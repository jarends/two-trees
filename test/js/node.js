// Generated by CoffeeScript 1.12.6
(function() {
  var MyExtendedNode, MyTextNode1, MyTextNode2, MyValidNode, Node, expectAttr, expectBoolAttr, expectClass, expectExtends, expectValidTagNode, expectValidTextNode, getTag, getText,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Node = require('../../src/js/node');

  getTag = function(tag) {
    return document.createElement(tag);
  };

  getText = function(text) {
    return document.createTextNode(text);
  };

  MyValidNode = (function(superClass) {
    extend(MyValidNode, superClass);

    function MyValidNode() {
      return MyValidNode.__super__.constructor.apply(this, arguments);
    }

    MyValidNode.prototype.render = function() {
      return {
        tag: 'div'
      };
    };

    return MyValidNode;

  })(Node);

  MyTextNode1 = (function(superClass) {
    extend(MyTextNode1, superClass);

    function MyTextNode1() {
      return MyTextNode1.__super__.constructor.apply(this, arguments);
    }

    MyTextNode1.prototype.render = function() {
      return 'text';
    };

    return MyTextNode1;

  })(Node);

  MyTextNode2 = (function(superClass) {
    extend(MyTextNode2, superClass);

    function MyTextNode2() {
      return MyTextNode2.__super__.constructor.apply(this, arguments);
    }

    MyTextNode2.prototype.render = function() {
      return {
        text: 'text'
      };
    };

    return MyTextNode2;

  })(Node);

  MyExtendedNode = (function(superClass) {
    extend(MyExtendedNode, superClass);

    function MyExtendedNode() {
      return MyExtendedNode.__super__.constructor.apply(this, arguments);
    }

    return MyExtendedNode;

  })(Node);

  expectClass = function(node, clazz) {
    return expect(node.constructor).to.equal(clazz);
  };

  expectExtends = function(node, clazz) {
    return expect(node).to.be["instanceof"](clazz);
  };

  expectValidTextNode = function(node, clazz, text) {
    expectClass(node, clazz);
    expectExtends(node.view, Text);
    expect(node.kind).to.equal(Node.TEXT_KIND);
    expect(node.view.nodeValue).to.equal(text + '');
    return expect(node.text).to.equal(text);
  };

  expectValidTagNode = function(node, clazz, tag) {
    expectClass(node, clazz);
    expectExtends(node.view, HTMLElement);
    expect(node.kind).to.equal(Node.TAG_KIND);
    expect(node.view.nodeName.toLowerCase()).to.equal(tag);
    return expect(node.tag).to.equal(tag);
  };

  expectAttr = function(node, name, value) {
    expectExtends(node.view, HTMLElement);
    expect(node.kind).to.equal(Node.TAG_KIND);
    expect(node.attrs[name]).to.equal(value = Node.getOrCall(value));
    return expect(node.view.getAttribute(name)).to.equal(value + '');
  };

  expectBoolAttr = function(node, name, value) {
    expectExtends(node.view, HTMLElement);
    expect(node.attrs[name]).to.equal(value = Node.getOrCall(value));
    if (value === true) {
      expect(node.view.getAttribute(name)).to.equal('');
      return expect(node.view[name]).to.equal(value);
    } else {
      expect(node.view.getAttribute(name)).to.equal(null);
      return expect(node.view[name]).to.equal(value);
    }
  };

  describe('Node', function() {
    return describe('.create', function() {
      it("should return a valid text node, if cfg = 'text'", function() {
        return expectValidTextNode(Node.create('text'), Node, 'text');
      });
      it("should return a valid text node, if cfg = Text", function() {
        return expectValidTextNode(Node.create(getText('text')), Node, 'text');
      });
      it("should return a valid text node, if cfg.text = 'text'", function() {
        return expectValidTextNode(Node.create({
          text: 'text'
        }), Node, 'text');
      });
      it("should return a valid text node, if cfg.tag = Text", function() {
        return expectValidTextNode(Node.create({
          tag: getText('text')
        }), Node, 'text');
      });
      it("should return a valid text node, if cfg.clazz = MyTextNode1", function() {
        return expectValidTextNode(Node.create({
          clazz: MyTextNode1
        }), MyTextNode1, 'text');
      });
      it("should return a valid text node, if cfg.clazz = MyTextNode2", function() {
        return expectValidTextNode(Node.create({
          clazz: MyTextNode2
        }), MyTextNode2, 'text');
      });
      it("should return a valid tag node, if cfg = HTMLELement", function() {
        return expectValidTagNode(Node.create(getTag('div')), Node, 'div');
      });
      it("should return a valid tag node, if cfg.tag = 'div'", function() {
        return expectValidTagNode(Node.create({
          tag: 'div'
        }), Node, 'div');
      });
      it("should return a valid tag node, if cfg.tag = HTMLELement", function() {
        return expectValidTagNode(Node.create({
          tag: getTag('div')
        }), Node, 'div');
      });
      it("should return a valid tag node, if cfg.tag = MyValidNode", function() {
        return expectValidTagNode(Node.create({
          tag: MyValidNode
        }), MyValidNode, 'div');
      });
      it("should return a valid tag node, if cfg.clazz = MyValidNode", function() {
        return expectValidTagNode(Node.create({
          clazz: MyValidNode
        }), MyValidNode, 'div');
      });
      it("should throw an error, if cfg = null", function() {
        return expect(function() {
          return Node.create();
        }).to["throw"]();
      });
      it("should throw an error, if neither tag nor text are set", function() {
        return expect(function() {
          return Node.create({});
        }).to["throw"]();
      });
      it("should throw an error, if cfg.tag = MyExtendedNode", function() {
        return expect(function() {
          return Node.create({
            tag: MyExtendedNode
          });
        }).to["throw"]();
      });
      it("should throw an error, if cfg.tag is invalid", function() {
        expect(function() {
          return Node.create({
            tag: 1
          });
        }).to["throw"]();
        expect(function() {
          return Node.create({
            tag: true
          });
        }).to["throw"]();
        expect(function() {
          return Node.create({
            tag: {}
          });
        }).to["throw"]();
        expect(function() {
          return Node.create({
            tag: []
          });
        }).to["throw"]();
        return expect(function() {
          return Node.create({
            tag: function() {}
          });
        }).to["throw"]();
      });
      it("should throw an error, if cfg.text is invalid", function() {
        expect(function() {
          return Node.create({
            text: null
          });
        }).to["throw"]();
        expect(function() {
          return Node.create({
            text: {}
          });
        }).to["throw"]();
        expect(function() {
          return Node.create({
            text: []
          });
        }).to["throw"]();
        expect(function() {
          return Node.create({
            text: function() {}
          });
        }).to["throw"]();
        expect(function() {
          return Node.create({
            text: function() {
              return {};
            }
          });
        }).to["throw"]();
        return expect(function() {
          return Node.create({
            text: function() {
              return [];
            }
          });
        }).to["throw"]();
      });
      it("should throw an error, if cfg.clazz = MyExtendedNode, because neither tag nor text are set", function() {
        return expect(function() {
          return Node.create({
            clazz: MyExtendedNode
          });
        }).to["throw"]();
      });
      it("should not throw an error, if cfg.clazz = MyExtendedNode and tag = 'div'", function() {
        return expect(function() {
          return Node.create({
            tag: 'div',
            clazz: MyExtendedNode
          });
        }).to.not["throw"]();
      });
      it("should not throw an error, if cfg.clazz = MyExtendedNode and text = ''", function() {
        return expect(function() {
          return Node.create({
            text: '',
            clazz: MyExtendedNode
          });
        }).to.not["throw"]();
      });
      return it("should not throw an error, if cfg.text is valid", function() {
        expect(function() {
          return expectValidTextNode(Node.create({
            text: ''
          }), Node, '');
        }).to.not["throw"]();
        expect(function() {
          return expectValidTextNode(Node.create({
            text: 1
          }), Node, 1);
        }).to.not["throw"]();
        expect(function() {
          return expectValidTextNode(Node.create({
            text: true
          }), Node, true);
        }).to.not["throw"]();
        expect(function() {
          return expectValidTextNode(Node.create({
            text: function() {
              return '';
            }
          }), Node, '');
        }).to.not["throw"]();
        expect(function() {
          return expectValidTextNode(Node.create({
            text: function() {
              return 1;
            }
          }), Node, 1);
        }).to.not["throw"]();
        return expect(function() {
          return expectValidTextNode(Node.create({
            text: function() {
              return true;
            }
          }), Node, true);
        }).to.not["throw"]();
      });
    });
  });

  describe('new Node', function() {
    it("should return a valid text node, if cfg = 'text'", function() {
      return expectValidTextNode(new Node('text'), Node, 'text');
    });
    it("should return a valid text node, if cfg = Text", function() {
      return expectValidTextNode(new Node(getText('text')), Node, 'text');
    });
    it("should return a valid text node, if cfg.text = 'text'", function() {
      return expectValidTextNode(new Node({
        text: 'text'
      }), Node, 'text');
    });
    it("should return a valid text node, if cfg.tag = Text", function() {
      return expectValidTextNode(new Node({
        tag: getText('text')
      }), Node, 'text');
    });
    it("should return a valid tag node, if cfg = HTMLELement", function() {
      return expectValidTagNode(new Node(getTag('div')), Node, 'div');
    });
    it("should return a valid tag node, if cfg.tag = 'div'", function() {
      return expectValidTagNode(new Node({
        tag: 'div'
      }), Node, 'div');
    });
    it("should return a valid tag node, if cfg.tag = HTMLELement", function() {
      return expectValidTagNode(new Node({
        tag: getTag('div')
      }), Node, 'div');
    });
    it("should throw an error, if cfg = null", function() {
      return expect(function() {
        return new Node();
      }).to["throw"]();
    });
    it("should throw an error, if neither tag nor text are set", function() {
      return expect(function() {
        return new Node({});
      }).to["throw"]();
    });
    it("should throw an error, if cfg.tag is invalid", function() {
      expect(function() {
        return new Node({
          tag: 1
        });
      }).to["throw"]();
      expect(function() {
        return new Node({
          tag: true
        });
      }).to["throw"]();
      expect(function() {
        return new Node({
          tag: {}
        });
      }).to["throw"]();
      expect(function() {
        return new Node({
          tag: []
        });
      }).to["throw"]();
      expect(function() {
        return new Node({
          tag: function() {}
        });
      }).to["throw"]();
      return expect(function() {
        return new Node({
          tag: Node
        });
      }).to["throw"]();
    });
    it("should throw an error, if cfg.text is invalid", function() {
      expect(function() {
        return new Node({
          text: null
        });
      }).to["throw"]();
      expect(function() {
        return new Node({
          text: {}
        });
      }).to["throw"]();
      expect(function() {
        return new Node({
          text: []
        });
      }).to["throw"]();
      expect(function() {
        return new Node({
          text: function() {}
        });
      }).to["throw"]();
      expect(function() {
        return new Node({
          text: function() {
            return {};
          }
        });
      }).to["throw"]();
      return expect(function() {
        return new Node({
          text: function() {
            return [];
          }
        });
      }).to["throw"]();
    });
    it("should not throw an error, if cfg.text is valid", function() {
      expect(function() {
        return expectValidTextNode(new Node({
          text: ''
        }), Node, '');
      }).to.not["throw"]();
      expect(function() {
        return expectValidTextNode(new Node({
          text: 1
        }), Node, 1);
      }).to.not["throw"]();
      expect(function() {
        return expectValidTextNode(new Node({
          text: true
        }), Node, true);
      }).to.not["throw"]();
      expect(function() {
        return expectValidTextNode(new Node({
          text: function() {
            return '';
          }
        }), Node, '');
      }).to.not["throw"]();
      expect(function() {
        return expectValidTextNode(new Node({
          text: function() {
            return 1;
          }
        }), Node, 1);
      }).to.not["throw"]();
      return expect(function() {
        return expectValidTextNode(new Node({
          text: function() {
            return true;
          }
        }), Node, true);
      }).to.not["throw"]();
    });
    it("should create a attr title = 'my title'", function() {
      var cfg, node;
      cfg = {
        tag: 'div',
        title: 'my title'
      };
      expectValidTagNode(node = new Node(cfg), Node, 'div');
      return expectAttr(node, 'title', 'my title');
    });
    it("should create a bool attr disabled = true", function() {
      var cfg, node;
      cfg = {
        tag: 'div',
        disabled: true
      };
      expectValidTagNode(node = new Node(cfg), Node, 'div');
      return expectBoolAttr(node, 'disabled', true);
    });
    it("should create a bool attr disabled = false", function() {
      var cfg, node;
      cfg = {
        tag: 'div',
        disabled: false
      };
      expectValidTagNode(node = new Node(cfg), Node, 'div');
      return expectBoolAttr(node, 'disabled', false);
    });
    return it("should remove a bool attr disabled = undefined", function() {
      var cfg, node;
      cfg = {
        tag: 'div',
        disabled: void 0
      };
      expectValidTagNode(node = new Node(cfg), Node, 'div');
      return expectBoolAttr(node, 'disabled', void 0);
    });
  });

}).call(this);

//# sourceMappingURL=node.js.map
