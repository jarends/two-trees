{"version":3,"file":"index.pack.js","sourceRoot":"","sources":["index.pack.js"],"sections":[{"offset":{"line":186,"column":0},"map":{"version":3,"file":"index.js","sourceRoot":"","sources":["../coffee/index.coffee"],"names":[],"mappings":";AAAA;EAAA,OAAA,CAAQ,aAAR;AAAA","sourcesContent":["require './view-tree'"]}},{"offset":{"line":197,"column":0},"map":{"version":3,"file":"view-tree.js","sourceRoot":"","sources":["../coffee/view-tree.coffee"],"names":[],"mappings":"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","sourcesContent":["ViewTree = require '../../src/js/view-tree'\nNode     = ViewTree.Node\n\n\ncreate       = ViewTree.create\nCOMP_CFG_ERR = ViewTree.COMP_CFG_ERROR\nVIEW_CFG_ERR = ViewTree.VIEW_CFG_ERROR\n\n\nclass MockNode extends Node\n    render: () -> tag: 'mock-node'\n\nclass ExtendedMockNode extends MockNode\n\nclass WrongViewCfgNode extends Node\n    constructor: (@cfg) ->\n    render: () -> tag: @cfg.value\n\n\nViewTree.map 'mock', MockNode\n\n\nexpectNode = (node, clazz = Node) ->\n    expect(node).to.be.instanceof clazz\n    expect(node.view).to.be.ok\n\n\nexpectType = (node, type) ->\n    expectNode(node)\n    expect(node.view.nodeType).to.equal type\n\n\nexpectText = (node, text) ->\n    expectType node, 3\n    expect(node.view.nodeValue).to.equal text\n\n\nexpectTag = (node, tag) ->\n    expectType node, 1\n    expect(node.view.nodeName.toUpperCase()).to.equal tag.toUpperCase()\n\n\n\n\ndescribe 'TreeOne', () ->\n\n\n    describe 'create', () ->\n\n        it 'should throw a comp cfg error if cfg is null or undefined', () ->\n            expect(() -> create null).to.throw()\n            expect(() -> create undefined).to.throw()\n\n        it 'should throw a comp cfg error if cfg.tag is neither a not empty string nor a component class', () ->\n            expect(() -> create tag: null)            .to.throw(COMP_CFG_ERR)\n            expect(() -> create tag: undefined)       .to.throw(COMP_CFG_ERR)\n            expect(() -> create tag: '')              .to.throw(COMP_CFG_ERR)\n            expect(() -> create tag: [])              .to.throw(COMP_CFG_ERR)\n            expect(() -> create tag: {})              .to.throw(COMP_CFG_ERR)\n            expect(() -> create tag: () ->)           .to.throw(COMP_CFG_ERR)\n            expect(() -> create tag: 'a')             .to.not.throw()\n            expect(() -> create tag: MockNode)        .to.not.throw()\n            expect(() -> create tag: ExtendedMockNode).to.not.throw()\n\n        it 'should throw a view cfg error if cfg returned by node.render() isn\\'t a not empty string', () ->\n            expect(() -> create {tag: WrongViewCfgNode, value: null})     .to.throw(VIEW_CFG_ERR)\n            expect(() -> create {tag: WrongViewCfgNode, value: undefined}).to.throw(VIEW_CFG_ERR)\n            expect(() -> create {tag: WrongViewCfgNode, value: ''})       .to.throw(VIEW_CFG_ERR)\n            expect(() -> create {tag: WrongViewCfgNode, value: []})       .to.throw(VIEW_CFG_ERR)\n            expect(() -> create {tag: WrongViewCfgNode, value: {}})       .to.throw(VIEW_CFG_ERR)\n            expect(() -> create {tag: WrongViewCfgNode, value: () ->})    .to.throw(VIEW_CFG_ERR)\n            expect(() -> create {tag: WrongViewCfgNode, value: MockNode}) .to.throw(VIEW_CFG_ERR)\n\n        it 'should return a text node', () ->\n            expectText create('hello'), 'hello'\n            expectText create(0),       '0'\n            expectText create(true),    'true'\n\n        it 'should return a basic node with given tag', () ->\n            expectTag create(tag: 'hello'), 'hello'\n\n        it 'should return a component node', () ->\n            expectNode create(tag: MockNode), MockNode\n            expectTag  create(tag: MockNode), 'mock-node'\n\n        it 'should return a mapped node', () ->\n            expectNode create(tag: 'mock'), MockNode\n            expectTag  create(tag: 'mock'), 'mock-node'\n"]}},{"offset":{"line":420,"column":0},"map":{"version":3,"file":"../../src/js/view-tree.js","sourceRoot":"","sources":["../../src/coffee/view-tree.coffee"],"names":[],"mappings":"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","sourcesContent":["__id__ = 0\n\n\nTEXT_KIND = 0\nNODE_KIND = 1\n\n\nCOMP_CFG_ERROR = 'Cfg for creating a node must either be a string or an object containing a tag property as not empty string or a node class.'\nVIEW_CFG_ERROR = 'Cfg for creating a view must either be a string or an object containing a tag property as not empty string'\n\n\nisBool   = (value) -> typeof value == 'boolean'\nisNumber = (value) -> typeof value == 'number'\nisString = (value) -> typeof value == 'string' or value == value + ''\nisObject = (value) -> typeof value == 'object'\nisFunc   = (value) -> typeof value == 'function'\nisHTML   = (value) -> value instanceof HTMLElement\nisNot    = (value) -> value == null or value == undefined\nisSimple = (value) ->\n    (t = typeof value) == 'string' or t == 'number' or t == 'boolean'\n\n\n\n\nnormalizeName = (name) ->\n    name.replace /[A-Z]/g, (name) ->\n        '-' + name.toLowerCase()\n\n\n\n\nnormalizeEvent = (type) ->\n    type = type.slice 2\n    type.charAt(0).toLowerCase() + normalizeName type.slice(1)\n\n\n\n\nthrowNodeCfgError = (cfg) ->\n    throw new Error COMP_CFG_ERROR + ' cfg = ' + getCfgJson cfg\n\n\nthrowViewCfgError = (cfg) ->\n    throw new Error VIEW_CFG_ERROR + ' cfg = ' + getCfgJson cfg\n\n\n\n\ngetCfgJson = (cfg) ->\n    try\n        c = JSON.stringify cfg\n    catch\n    c + ''\n\n\n\n\n###\n    if cfg is string || boolean || number\n        node is a text node\n\n    if cfg is object\n        tag can be\n            string\n                which is mapped to an component class\n                the node name\n\n    cfg =\n        tag:\n        style:\n        className:\n        children:\n        event handlers starting with 'on'\n\n###\n\n\n\n\n\nclass Node\n\n\n    constructor: (cfg) ->\n        @register(cfg)\n        #console.log 'ctx: ', @ctx\n\n\n    register: (@cfg) ->\n        @keep = false\n        if not @__id__\n            @__id__ = ++__id__\n            nodeMap[@__id__] = @\n        @__id__\n\n\n\n    dispose: () -> null\n\n\n    onMount: () -> null\n\n\n    onUnmount: () -> @keep\n\n\n    needsUpdate: () -> true\n    canUpdate:   (@cfg) -> true\n    update:      () => update @\n    render:      () -> @cfg\n\n\n    onAdded:   () ->\n\n\n    onRemoved: () ->\n\n\n    add:       (child) ->\n    addAt:     (child, index) ->\n    remove:    (child) ->\n    removeAt:  (index) ->\n\n\n\n\n#    00000000   00000000    0000000   00000000    0000000\n#    000   000  000   000  000   000  000   000  000     \n#    00000000   0000000    000   000  00000000   0000000 \n#    000        000   000  000   000  000             000\n#    000        000   000   0000000   000        0000000 \n\ntagMap     = {}\nrootMap    = {}\nnodeMap    = {}\ndirtyMap   = {}\ndirty      = false\nrafTimeout = null\n\n\n\n\n#    00     00   0000000   00000000 \n#    000   000  000   000  000   000\n#    000000000  000000000  00000000 \n#    000 0 000  000   000  000      \n#    000   000  000   000  000      \n\nmap = (tag, clazz, overwrite = false) ->\n    if isNot(tagMap[tag]) or overwrite\n        tagMap[tag] = clazz\n    null\n\n\n\n\n\n#    000   000  000   000  00     00   0000000   00000000 \n#    000   000  0000  000  000   000  000   000  000   000\n#    000   000  000 0 000  000000000  000000000  00000000 \n#    000   000  000  0000  000 0 000  000   000  000      \n#     0000000   000   000  000   000  000   000  000      \n\nunmap = (tag) ->\n    delete tagMap[tag]\n    null\n\n\n\n\n#     0000000  00000000   00000000   0000000   000000000  00000000\n#    000       000   000  000       000   000     000     000     \n#    000       0000000    0000000   000000000     000     0000000 \n#    000       000   000  000       000   000     000     000     \n#     0000000  000   000  00000000  000   000     000     00000000\n\ncreate = (cfg, root = null, inject = null) ->\n    #console.log 'ViewTree.create: ', cfg, root\n    throwNodeCfgError cfg if isNot cfg\n    tag = cfg.tag\n    if isSimple(cfg) or (not tag and (isSimple(cfg.text) or isFunc(cfg.text)))\n        clazz = ViewTree.DEFAULT_CLASS\n    else\n        if isFunc(tag) and ((tag.prototype instanceof Node) or tag == Node)\n            clazz = cfg.tag\n        else\n            throwNodeCfgError cfg if not isString(tag) or tag == ''\n            clazz = tagMap[tag] or ViewTree.DEFAULT_CLASS\n\n    node = createNode clazz, cfg, inject\n    createView node, node.render()\n\n    if root != null #TODO: node.render() is called twice in this case - bad!!!\n        render(node, root)\n\n    else if false #TODO: check, if we really want this\n        if isSimple cfg\n            updateText node, cfg\n        else\n            updateProperties node, cfg\n\n        node.onMount()\n    node\n\n\n\n\n#     0000000  00000000   00000000   0000000   000000000  00000000        000   000   0000000   0000000    00000000\n#    000       000   000  000       000   000     000     000             0000  000  000   000  000   000  000     \n#    000       0000000    0000000   000000000     000     0000000         000 0 000  000   000  000   000  0000000 \n#    000       000   000  000       000   000     000     000             000  0000  000   000  000   000  000     \n#     0000000  000   000  00000000  000   000     000     00000000        000   000   0000000   0000000    00000000\n\ncreateNode = (clazz, cfg, inject) ->\n    inject = cfg.__i__ or inject\n    return new clazz cfg if not inject\n\n    #console.log 'INJECT: ', clazz, inject\n\n    p = clazz.prototype\n    m = {}\n    for key, value of inject\n        m[key] = p[key]\n        p[key] = value\n        #console.log 'INJECT set value: ', key, value\n\n    node       = new clazz cfg\n    node.__i__ = inject\n\n    for key, value of inject\n        node[key] = value\n        p[key]    = m[key]\n    node\n\n\n\n\n#     0000000  00000000   00000000   0000000   000000000  00000000        000   000  000  00000000  000   000\n#    000       000   000  000       000   000     000     000             000   000  000  000       000 0 000\n#    000       0000000    0000000   000000000     000     0000000          000 000   000  0000000   000000000\n#    000       000   000  000       000   000     000     000                000     000  000       000   000\n#     0000000  000   000  00000000  000   000     000     00000000            0      000  00000000  00     00\n\ncreateView = (node, cfg) ->\n    throwViewCfgError(cfg) if isNot cfg\n    text = if isFunc(cfg.text) then cfg.text() else cfg.text\n    if isSimple(cfg) or (not cfg.tag and (isSimple(text)))\n        node.tag  = undefined\n        node.text = if isNot(text) then cfg else text\n        node.view = document.createTextNode node.text\n    else\n        throwViewCfgError(cfg) if not isString(tag = cfg.tag) or tag == ''\n        node.tag  = tag\n        node.view =  document.createElement tag\n    node.view\n\n\n\n\n#    00000000   00000000  000   000  0000000    00000000  00000000 \n#    000   000  000       0000  000  000   000  000       000   000\n#    0000000    0000000   000 0 000  000   000  0000000   0000000  \n#    000   000  000       000  0000  000   000  000       000   000\n#    000   000  00000000  000   000  0000000    00000000  000   000\n\nrender = (node, root) ->\n    #console.log 'ViewTree.render: ', node, root\n    cfg = node.render()\n    if not node.view\n        createView node, cfg\n\n    root.appendChild(node.view)\n\n    if isSimple cfg\n        updateText node, cfg\n    else\n        updateProperties node, cfg\n\n    node.onMount()\n    null\n\n\n\n\n#    00000000   00000000  00     00   0000000   000   000  00000000\n#    000   000  000       000   000  000   000  000   000  000     \n#    0000000    0000000   000000000  000   000   000 000   0000000 \n#    000   000  000       000 0 000  000   000     000     000     \n#    000   000  00000000  000   000   0000000       0      00000000\n\nremove = (nodeOrRoot) ->\n\n\n\n\n#    000   000  00000000   0000000     0000000   000000000  00000000\n#    000   000  000   000  000   000  000   000     000     000     \n#    000   000  00000000   000   000  000000000     000     0000000 \n#    000   000  000        000   000  000   000     000     000     \n#     0000000   000        0000000    000   000     000     00000000\n\nupdate = (node) ->\n    #console.log 'UPDATE: ', node.__id__\n    id = node?.__id__\n    if not id\n        throw new Error \"DOM ERROR: can't update node. Node doesn't exist. cfg = \" + getCfgJson(node?.cfg or null)\n\n    if not dirty\n        window.cancelAnimationFrame rafTimeout\n        rafTimeout = window.requestAnimationFrame updateNow\n\n    dirtyMap[id] = true\n    dirty        = true\n    null\n\n\n\n\n#    000   000  00000000   0000000     0000000   000000000  00000000        000   000   0000000   000   000\n#    000   000  000   000  000   000  000   000     000     000             0000  000  000   000  000 0 000\n#    000   000  00000000   000   000  000000000     000     0000000         000 0 000  000   000  000000000\n#    000   000  000        000   000  000   000     000     000             000  0000  000   000  000   000\n#     0000000   000        0000000    000   000     000     00000000        000   000   0000000   00     00\n\nupdateNow = () ->\n    #console.log 'UPDATE NOW: '\n    window.cancelAnimationFrame rafTimeout\n    dirty = false\n    #TODO: sort by depth to update top down\n    nodes = []\n    (nodes.push(n) if n = nodeMap[id]) for id of dirtyMap\n    nodes.sort (a, b) -> a.depth - b.depth\n    for node in nodes\n        continue if not node or not node.view\n        cfg = node.render()\n\n        if isNot(node.tag) and isNot(cfg.tag)\n            updateText node, cfg\n        else if node.tag != cfg.tag\n            replaceChild node, cfg\n        else\n            updateProperties node, cfg\n    dirtyMap = {}\n    null\n\n\n\n\n#    000   000  00000000   0000000     0000000   000000000  00000000        000000000  00000000  000   000  000000000\n#    000   000  000   000  000   000  000   000     000     000                000     000        000 000      000   \n#    000   000  00000000   000   000  000000000     000     0000000            000     0000000     00000       000   \n#    000   000  000        000   000  000   000     000     000                000     000        000 000      000   \n#     0000000   000        0000000    000   000     000     00000000           000     00000000  000   000     000   \n\nupdateText = (node, cfg) ->\n    text = if isFunc(cfg.text) then cfg.text() else if isString(cfg) then cfg else cfg.text\n    if node.text != text\n        node.cfg            = cfg\n        node.text           = text\n        node.view.nodeValue = text\n    null\n\n\n\n\n#    000   000  00000000   0000000     0000000   000000000  00000000        00000000   00000000    0000000   00000000    0000000\n#    000   000  000   000  000   000  000   000     000     000             000   000  000   000  000   000  000   000  000     \n#    000   000  00000000   000   000  000000000     000     0000000         00000000   0000000    000   000  00000000   0000000 \n#    000   000  000        000   000  000   000     000     000             000        000   000  000   000  000             000\n#     0000000   000        0000000    000   000     000     00000000        000        000   000   0000000   000        0000000 \n\nupdateProperties = (node, cfg) ->\n    #console.log 'UPDATE PROPS: ', node.__id__, node.view\n    cfg     = cfg.render() if cfg instanceof Node\n    attrs   = node.attrs or node.attrs = {}\n    propMap = Object.assign {}, attrs, node.events, cfg\n\n    if propMap.hasOwnProperty 'className'\n        updateClass node, cfg.className\n\n    if propMap.hasOwnProperty 'style'\n        updateStyle node, cfg.style\n\n    if propMap.hasOwnProperty 'children'\n        updateChildren node, cfg.children\n\n    delete propMap.tag\n    delete propMap.__i__\n    delete propMap.keep\n    delete propMap.text\n    delete propMap.className\n    delete propMap.style\n    delete propMap.children\n    delete propMap.bindings\n\n    for name of propMap\n        attr  = attrs[name]\n        value = cfg[name]\n\n        if isBool(value) or isNot(value) and attr == true\n            updateBool node, value, name\n        else\n            if /^on/.test name\n                updateEvent node, value, name\n            else\n                value = value() if isFunc value\n                if isBool value\n                    updateBool node, value, name\n                else\n                    updateAttr node, value, name\n    null\n\n\n\n\n\n\n\n\n#     0000000   000000000  000000000  00000000    0000000\n#    000   000     000        000     000   000  000\n#    000000000     000        000     0000000    0000000\n#    000   000     000        000     000   000       000\n#    000   000     000        000     000   000  0000000\n\nupdateAttr = (node, value, name) ->\n    #console.log 'updateAttr: ', name, value, node.attrs[name], node.__id__\n    return if node.attrs[name] == value\n    if value != null and value != undefined\n        node.view.setAttribute name, value\n        node.view[name]  = value\n        node.attrs[name] = value\n    else\n        node.view.removeAttribute name\n        delete node.view[name]\n        delete node.attrs[name]\n    null\n\n\n\n\n#    0000000     0000000    0000000   000\n#    000   000  000   000  000   000  000\n#    0000000    000   000  000   000  000\n#    000   000  000   000  000   000  000\n#    0000000     0000000    0000000   0000000\n\nupdateBool = (node, value, name) ->\n    #console.log 'updateBool: ', name, value, node.attrs[name], node.__id__\n    return if node.attrs[name] == value\n    view = node.view\n    if isNot(value)\n        view.removeAttribute name\n        view[name] = false\n        delete node.attrs[name]\n    else\n        node.attrs[name] = value\n        if value\n            view.setAttribute name, ''\n            view[name] = true\n        else\n            view.removeAttribute name\n            view[name] = false\n    null\n\n\n\n\n#     0000000  000       0000000    0000000   0000000\n#    000       000      000   000  000       000\n#    000       000      000000000  0000000   0000000\n#    000       000      000   000       000       000\n#     0000000  0000000  000   000  0000000   0000000\n\nupdateClass = (node, value) ->\n    value = value() if isFunc value\n\n    return if node.attrs.className == value\n    if value\n        node.view.className  = value\n        node.attrs.className = value\n    else\n        node.view.className  = undefined\n        delete node.attrs.className\n    null\n\n\n\n\n#     0000000  000000000  000   000  000      00000000\n#    000          000      000 000   000      000\n#    0000000      000       00000    000      0000000\n#         000     000        000     000      000\n#    0000000      000        000     0000000  00000000\n\nupdateStyle = (node, style) ->\n    view  = node.view\n    attrs = node.attrs\n    sobj  = attrs.style\n\n    style = style() if isFunc style\n\n    if isNot style\n        view.style.cssText = null\n        delete attrs.style\n\n    else if isString style\n        view.style.cssText = style\n        attrs.style        = style\n    else\n        css     = ''\n        sobj    = if isObject(sobj) then sobj else {}\n        changed = false\n        propMap = Object.assign {}, style, sobj\n        for name of propMap\n            value = style[name]\n            if value != sobj[name]\n                changed = true\n            sobj[name] = value\n            if isNot value\n                delete sobj[name]\n            else\n                prop  = normalizeName name\n                css  += prop + ': ' + value + '; '\n\n        if changed\n            if css.length\n                css                = css.slice 0, -1\n                view.style.cssText = css\n                attrs.style        = sobj\n            else\n                view.style.cssText = null\n                delete attrs.style\n    null\n\n\n\n\n#    00000000  000   000  00000000  000   000  000000000   0000000\n#    000       000   000  000       0000  000     000     000\n#    0000000    000 000   0000000   000 0 000     000     0000000\n#    000          000     000       000  0000     000          000\n#    00000000      0      00000000  000   000     000     0000000\n\nupdateEvent = (node, callback, name) ->\n    events    = node.events or node.events = {}\n    view      = node.view\n    type      = normalizeEvent name\n    listener  = events[name]\n\n    if isString callback\n        callback = node[name]\n\n    if listener != callback\n        if listener\n            view.removeEventListener(type, listener)\n            delete events[name]\n        if callback\n            view.addEventListener(type, callback)\n            events[name] = callback\n    null\n\n\nremoveEvents = (node) ->\n    events = node.events\n    return null if not events\n\n    view = node.view\n    for name, listener of events\n        type = normalizeEvent name\n        view.removeEventListener(type, listener) if listener\n        delete events[name]\n    node.events = null\n    null\n\n\n\n\n#     0000000  000   000  000  000      0000000    00000000   00000000  000   000\n#    000       000   000  000  000      000   000  000   000  000       0000  000\n#    000       000000000  000  000      000   000  0000000    0000000   000 0 000\n#    000       000   000  000  000      000   000  000   000  000       000  0000\n#     0000000  000   000  000  0000000  0000000    000   000  00000000  000   000\n\nupdateChildren = (node, cfgs) ->\n    #TODO: allow object as only child\n    children = node.children or node.children = []\n    cfgs     = cfgs() if isFunc cfgs\n    cfgs     = if isString(cfgs) then [cfgs] else cfgs or []\n    l        = if children.length > cfgs.length then children.length else cfgs.length\n    for i in [0...l]\n        child = children[i]\n        cfg   = cfgs[i]\n        cfg   = cfg() if isFunc cfg\n\n        if not child and not cfg\n            throw new Error \"DOM ERROR: either child or cfg at index #{i} must be defined. Got \" + child + ', ' + cfg\n        if not child\n            addChild node, cfg\n        else if not cfg\n            removeChild child\n        else\n            change child, cfg\n    children.length = cfgs.length\n    null\n\n\n\n\n#     0000000  000   000   0000000   000   000   0000000   00000000\n#    000       000   000  000   000  0000  000  000        000\n#    000       000000000  000000000  000 0 000  000  0000  0000000\n#    000       000   000  000   000  000  0000  000   000  000\n#     0000000  000   000  000   000  000   000   0000000   00000000\n\nchange = (node, cfg) ->\n    canUpdate   = node.canUpdate(cfg)\n    needsUpdate = node.needsUpdate()\n    if node == cfg or node.constructor == cfg.tag\n        if needsUpdate and canUpdate\n            updateProperties node, node.render()\n        else if needsUpdate and not canUpdate\n            replaceChild node, node.render()\n\n        # node don't wants to be updated\n\n    else if node.tag != cfg.tag or cfg instanceof Node\n        replaceChild node, cfg\n\n    else if node.tag == undefined # text node\n        updateText node, cfg\n\n    else if canUpdate and needsUpdate # tag node\n        updateProperties node, cfg\n\n    false\n\n\n\n\n#     0000000   0000000    0000000\n#    000   000  000   000  000   000\n#    000000000  000   000  000   000\n#    000   000  000   000  000   000\n#    000   000  0000000    0000000\n\naddChild = (node, cfg) ->\n    if cfg instanceof Node\n        child = cfg\n    else\n        child = create cfg, null, cfg.__i__ or node.__i__\n\n    cfg = child.render()\n    if not child.view\n        child.view = createView child, cfg\n\n    node.children.push child\n    node.view.appendChild child.view\n    child.parent = node\n\n\n    if isSimple(cfg) or (not cfg.tag and isSimple(cfg.text))\n        updateText child, cfg\n    else\n        updateProperties child, cfg\n\n    child.onMount()\n    null\n\n\n\n\n#    00000000   00000000  00     00   0000000   000   000  00000000\n#    000   000  000       000   000  000   000  000   000  000\n#    0000000    0000000   000000000  000   000   000 000   0000000\n#    000   000  000       000 0 000  000   000     000     000\n#    000   000  00000000  000   000   0000000       0      00000000\n\nremoveChild = (child) ->\n    #TODO: node.children currently not handled -> handled by changing node.children.length in updateChildren\n\n    #console.log 'removeChild: ', child, node\n\n    node = child.parent\n    view = child.view\n    disposeNode child\n    node.view.removeChild view\n    null\n\n\n\n\n#    00000000   00000000  00000000   000       0000000    0000000  00000000\n#    000   000  000       000   000  000      000   000  000       000\n#    0000000    0000000   00000000   000      000000000  000       0000000\n#    000   000  000       000        000      000   000  000       000\n#    000   000  00000000  000        0000000  000   000   0000000  00000000\n\nreplaceChild = (child, cfg) ->\n    #console.log 'ViewTree.replaceChild: ', child, cfg\n    node     = child.parent\n    children = node.children\n    i        = children.indexOf child\n    view     = child.view\n\n    disposeNode child\n\n    if cfg instanceof Node\n        child = cfg\n        cfg   = child.render()\n    else\n        child = create cfg, null, cfg.__i__ or node.__i__\n\n    cfg = child.render()\n    if not child.view\n        child.view = createView child, cfg\n\n    children[i]  = child\n    child.parent = node\n    node.view.replaceChild child.view, view\n\n    if isSimple(cfg) or (not cfg.tag and isSimple(cfg.text))\n        updateText child, cfg\n    else\n        updateProperties child, cfg\n\n    child.onMount()\n    #console.log 'DOM.replaceChild: create = ', child, cfg\n    null\n\n\n\n\n#    0000000    000   0000000  00000000    0000000    0000000  00000000\n#    000   000  000  000       000   000  000   000  000       000\n#    000   000  000  0000000   00000000   000   000  0000000   0000000\n#    000   000  000       000  000        000   000       000  000\n#    0000000    000  0000000   000         0000000   0000000   00000000\n\ndisposeNode = (node) ->\n    #console.log 'disposeNode: ', node\n    if node.onUnmount() != true\n\n        #console.log 'dispose node now: ', node\n        removeEvents node\n\n        if node.children and node.children.length\n            disposeNode child for child in node.children\n\n        delete node.children\n        delete node.view\n        delete nodeMap[node.__id__]\n\n    node.parent = null\n    null\n\n\n\n\n\n\n\n\n#    00000000    0000000   00000000\n#    000   000  000   000  000\n#    0000000    000000000  000000\n#    000   000  000   000  000\n#    000   000  000   000  000\n\nif typeof window != 'undefined'\n    lastTime = 0\n    vendors  = ['webkit', 'moz']\n    for vendor in vendors\n        break if window.requestAnimationFrame\n        window.requestAnimationFrame = window[vendor + 'RequestAnimationFrame']\n        window.cancelAnimationFrame  = window[vendor + 'CancelAnimationFrame' ] or window[vendor + 'CancelRequestAnimationFrame']\n\n\n    if not window.requestAnimationFrame\n        window.requestAnimationFrame = (callback) ->\n            currTime   = Date.now()\n            timeToCall = Math.max 0, 16 - currTime + lastTime\n            rAF        = () -> callback currTime + timeToCall\n            id         = window.setTimeout rAF, timeToCall\n            lastTime   = currTime + timeToCall\n            id\n\n\n    if not window.cancelAnimationFrame\n        window.cancelAnimationFrame = (id) ->\n            clearTimeout id\n            null\n\n\n\n\n#     0000000    0000000   0000000  000   0000000   000   000\n#    000   000  000       000       000  000        0000  000\n#    000000000  0000000   0000000   000  000  0000  000 0 000\n#    000   000       000       000  000  000   000  000  0000\n#    000   000  0000000   0000000   000   0000000   000   000\n\nif typeof Object.assign == 'undefined'\n    Object.assign = (target, args...) ->\n        for src in args\n            for key of src\n                target[key] = src[key];\n        target\n\n\n\n\n\n\n\n\nViewTree =\n    Node:             Node\n    DEFAULT_CLASS:    Node\n    HANDLE_CTX:       true\n    HANDLE_DATA_TREE: true\n    COMP_CFG_ERROR:   COMP_CFG_ERROR\n    VIEW_CFG_ERROR:   VIEW_CFG_ERROR\n    map:              map\n    unmap:            unmap\n    create:           create\n    render:           render\n    remove:           remove\n    update:           update\n    updateNow:        updateNow\n\n\n\n\nif typeof module != 'undefined'\n    module.exports = ViewTree\nif typeof window != 'undefined'\n    window.ViewTree = ViewTree\nelse\n    this.ViewTree = ViewTree"]}}]}