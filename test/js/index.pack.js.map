{"version":3,"file":"index.pack.js","sourceRoot":"","sources":["index.pack.js"],"sections":[{"offset":{"line":186,"column":0},"map":{"version":3,"file":"index.js","sourceRoot":"","sources":["../coffee/index.coffee"],"names":[],"mappings":";AACA;EAAA,OAAA,CAAQ,QAAR;AAAA","sourcesContent":["#require './view-tree'\nrequire './node'"]}},{"offset":{"line":197,"column":0},"map":{"version":3,"file":"node.js","sourceRoot":"","sources":["../coffee/node.coffee"],"names":[],"mappings":"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","sourcesContent":["Node = require '../../src/js/node'\n\n\ngetTag  = (tag)  -> document.createElement  tag\ngetText = (text) -> document.createTextNode text\n\nclass MyValidNode extends Node\n    render: () -> tag: 'div'\n\nclass MyTextNode1 extends Node\n    render: () -> 'text'\n\nclass MyTextNode2 extends Node\n    render: () -> text: 'text'\n\nclass MyExtendedNode extends Node\n\n\n\n\nexpectClass   = (node, clazz) -> expect(node.constructor).to.equal clazz\nexpectExtends = (node, clazz) -> expect(node).to.be.instanceof clazz\n\n\nexpectValidTextNode = (node, clazz, text) ->\n    expectClass   node, clazz\n    expectExtends node.view, Text\n    expect(node.kind).to.equal Node.TEXT_KIND\n    expect(node.view.nodeValue).to.equal text + ''\n    expect(node.text).to.equal text\n\n\nexpectValidTagNode = (node, clazz, tag) ->\n    expectClass   node, clazz\n    expectExtends node.view, HTMLElement\n    expect(node.kind).to.equal Node.TAG_KIND\n    expect(node.view.nodeName.toLowerCase()).to.equal tag\n    expect(node.tag).to.equal tag\n\n\nexpectAttr = (node, name, value) ->\n    expectExtends node.view, HTMLElement\n    expect(node.kind).to.equal Node.TAG_KIND\n    expect(node.attrs[name]).to.equal value = Node.getOrCall value\n    expect(node.view.getAttribute(name)).to.equal value + ''\n\n\nexpectBoolAttr = (node, name, value) ->\n    expectExtends node.view, HTMLElement\n    expect(node.attrs[name]).to.equal value = Node.getOrCall value\n    if value == true\n        expect(node.view.getAttribute(name)).to.equal ''\n        expect(node.view[name]).to.equal value\n    else\n        expect(node.view.getAttribute(name)).to.equal null\n        expect(node.view[name]).to.equal value\n\n\n\n\n\n\n\n\ndescribe 'Node', () ->\n\n    describe '.create', () ->\n\n        it \"should return a valid text node, if cfg = 'text'\", () ->\n            expectValidTextNode Node.create('text'), Node, 'text'\n\n        it \"should return a valid text node, if cfg = Text\", () ->\n            expectValidTextNode Node.create(getText('text')), Node, 'text'\n\n        it \"should return a valid text node, if cfg.text = 'text'\", () ->\n            expectValidTextNode Node.create(text: 'text'), Node, 'text'\n\n        it \"should return a valid text node, if cfg.tag = Text\", () ->\n            expectValidTextNode Node.create(tag: getText('text')), Node, 'text'\n\n        it \"should return a valid text node, if cfg.clazz = MyTextNode1\", () ->\n            expectValidTextNode Node.create(clazz: MyTextNode1), MyTextNode1, 'text'\n\n        it \"should return a valid text node, if cfg.clazz = MyTextNode2\", () ->\n            expectValidTextNode Node.create(clazz: MyTextNode2), MyTextNode2, 'text'\n\n        it \"should return a valid tag node, if cfg = HTMLELement\", () ->\n            expectValidTagNode Node.create(getTag('div')), Node, 'div'\n\n        it \"should return a valid tag node, if cfg.tag = 'div'\", () ->\n            expectValidTagNode Node.create(tag:'div'), Node, 'div'\n\n        it \"should return a valid tag node, if cfg.tag = HTMLELement\", () ->\n            expectValidTagNode Node.create(tag: getTag('div')), Node, 'div'\n\n        it \"should return a valid tag node, if cfg.tag = MyValidNode\", () ->\n            expectValidTagNode Node.create(tag: MyValidNode), MyValidNode, 'div'\n\n        it \"should return a valid tag node, if cfg.clazz = MyValidNode\", () ->\n            expectValidTagNode Node.create(clazz: MyValidNode), MyValidNode, 'div'\n\n        it \"should throw an error, if cfg = null\", () ->\n            expect(() -> Node.create()).to.throw()\n\n        it \"should throw an error, if neither tag nor text are set\", () ->\n            expect(() -> Node.create  {}).to.throw()\n\n        it \"should throw an error, if cfg.tag = MyExtendedNode\", () ->\n            expect(() -> Node.create(tag: MyExtendedNode)).to.throw()\n\n        it \"should throw an error, if cfg.tag is invalid\", () ->\n            expect(() -> Node.create tag: 1).to.throw()\n            expect(() -> Node.create tag: true).to.throw()\n            expect(() -> Node.create tag: {}).to.throw()\n            expect(() -> Node.create tag: []).to.throw()\n            expect(() -> Node.create tag: () ->).to.throw()\n\n        it \"should throw an error, if cfg.text is invalid\", () ->\n            expect(() -> Node.create text: null).to.throw()\n            expect(() -> Node.create text: {}).to.throw()\n            expect(() -> Node.create text: []).to.throw()\n            expect(() -> Node.create text: () ->).to.throw()\n            expect(() -> Node.create text: () -> {}).to.throw()\n            expect(() -> Node.create text: () -> []).to.throw()\n\n        it \"should throw an error, if cfg.clazz = MyExtendedNode, because neither tag nor text are set\", () ->\n            expect(() -> Node.create(clazz: MyExtendedNode)).to.throw()\n\n        it \"should not throw an error, if cfg.clazz = MyExtendedNode and tag = 'div'\", () ->\n            expect(() -> Node.create({tag: 'div', clazz: MyExtendedNode})).to.not.throw()\n\n        it \"should not throw an error, if cfg.clazz = MyExtendedNode and text = ''\", () ->\n            expect(() -> Node.create({text: '', clazz: MyExtendedNode})).to.not.throw()\n\n        it \"should not throw an error, if cfg.text is valid\", () ->\n            expect(() -> expectValidTextNode Node.create(text: ''),         Node, '')   .to.not.throw()\n            expect(() -> expectValidTextNode Node.create(text: 1),          Node, 1)   .to.not.throw()\n            expect(() -> expectValidTextNode Node.create(text: true),       Node, true).to.not.throw()\n            expect(() -> expectValidTextNode Node.create(text: () -> ''),   Node, '')  .to.not.throw()\n            expect(() -> expectValidTextNode Node.create(text: () -> 1),    Node, 1)   .to.not.throw()\n            expect(() -> expectValidTextNode Node.create(text: () -> true), Node, true).to.not.throw()\n\n\n\n\ndescribe 'new Node', () ->\n\n    it \"should return a valid text node, if cfg = 'text'\", () ->\n        expectValidTextNode new Node('text'), Node, 'text'\n\n    it \"should return a valid text node, if cfg = Text\", () ->\n        expectValidTextNode new Node(getText('text')), Node, 'text'\n\n    it \"should return a valid text node, if cfg.text = 'text'\", () ->\n        expectValidTextNode new Node(text: 'text'), Node, 'text'\n\n    it \"should return a valid text node, if cfg.tag = Text\", () ->\n        expectValidTextNode new Node(tag: getText('text')), Node, 'text'\n\n    it \"should return a valid tag node, if cfg = HTMLELement\", () ->\n        expectValidTagNode new Node(getTag('div')), Node, 'div'\n\n    it \"should return a valid tag node, if cfg.tag = 'div'\", () ->\n        expectValidTagNode new Node(tag:'div'), Node, 'div'\n\n    it \"should return a valid tag node, if cfg.tag = HTMLELement\", () ->\n        expectValidTagNode new Node(tag: getTag('div')), Node, 'div'\n\n    it \"should throw an error, if cfg = null\", () ->\n        expect(() -> new Node()).to.throw()\n\n    it \"should throw an error, if neither tag nor text are set\", () ->\n        expect(() -> new Node {}).to.throw()\n\n    it \"should throw an error, if cfg.tag is invalid\", () ->\n        expect(() -> new Node tag: 1).to.throw()\n        expect(() -> new Node tag: true).to.throw()\n        expect(() -> new Node tag: {}).to.throw()\n        expect(() -> new Node tag: []).to.throw()\n        expect(() -> new Node tag: () ->).to.throw()\n        expect(() -> new Node tag: Node).to.throw()\n\n    it \"should throw an error, if cfg.text is invalid\", () ->\n        expect(() -> new Node text: null).to.throw()\n        expect(() -> new Node text: {}).to.throw()\n        expect(() -> new Node text: []).to.throw()\n        expect(() -> new Node text: () ->).to.throw()\n        expect(() -> new Node text: () -> {}).to.throw()\n        expect(() -> new Node text: () -> []).to.throw()\n\n    it \"should not throw an error, if cfg.text is valid\", () ->\n        expect(() -> expectValidTextNode new Node(text: ''),         Node, '')   .to.not.throw()\n        expect(() -> expectValidTextNode new Node(text: 1),          Node, 1)   .to.not.throw()\n        expect(() -> expectValidTextNode new Node(text: true),       Node, true).to.not.throw()\n        expect(() -> expectValidTextNode new Node(text: () -> ''),   Node, '')  .to.not.throw()\n        expect(() -> expectValidTextNode new Node(text: () -> 1),    Node, 1)   .to.not.throw()\n        expect(() -> expectValidTextNode new Node(text: () -> true), Node, true).to.not.throw()\n\n    it \"should create a attr title = 'my title'\", () ->\n        cfg =\n            tag:   'div'\n            title: 'my title'\n        expectValidTagNode node = new Node(cfg), Node, 'div'\n        expectAttr node, 'title', 'my title'\n\n    it \"should create a bool attr disabled = true\", () ->\n        cfg =\n            tag:      'div'\n            disabled: true\n        expectValidTagNode node = new Node(cfg), Node, 'div'\n        expectBoolAttr node, 'disabled', true\n\n    it \"should create a bool attr disabled = false\", () ->\n        cfg =\n            tag:      'div'\n            disabled: false\n        expectValidTagNode node = new Node(cfg), Node, 'div'\n        expectBoolAttr node, 'disabled', false\n\n    it \"should remove a bool attr disabled = undefined\", () ->\n        cfg =\n            tag:      'div'\n            disabled: undefined\n        expectValidTagNode node = new Node(cfg), Node, 'div'\n        expectBoolAttr node, 'disabled', undefined\n\n\n\n\ndescribe 'node instance', () ->\n\n    describe 'appendTo', () ->\n\n        it 'should append the nodes view to the dom', () ->\n            parent = getTag 'div'\n            node   = new Node tag:'div'\n            node.appendTo parent\n            expect(parent.childNodes[0]).to.equal node.view\n            expect(parent.childNodes.length).to.equal 1\n\n        it 'should throw an error if the dom is controlled by a node', () ->\n            parent = new Node tag:'div'\n            node   = new Node tag:'div'\n            expect(() -> node.appendTo parent.view).to.throw()\n\n        it 'should not throw an error if Node.CHECK_DOM = false', () ->\n            Node.CHECK_DOM = false\n            parent = new Node tag:'div'\n            node   = new Node tag:'div'\n            expect(() -> node.appendTo parent.view).to.not.throw()\n            Node.CHECK_DOM = true\n\n\n    describe 'behind', () ->\n\n        it 'should append the nodes view behind the dom', () ->\n            parent = getTag 'div'\n            node   = new Node tag:'div'\n            parent.appendChild getTag 'div'\n            parent.appendChild prev = getTag 'div'\n            parent.appendChild getTag 'div'\n            node.behind prev\n            expect(parent.childNodes[2]).to.equal node.view\n            expect(parent.childNodes.length).to.equal 4\n\n\n        it 'should append the nodes view behind the dom if the dom is the last child', () ->\n            parent = getTag 'div'\n            node   = new Node tag:'div'\n            parent.appendChild getTag 'div'\n            parent.appendChild getTag 'div'\n            parent.appendChild prev = getTag 'div'\n            node.behind prev\n            expect(parent.childNodes[3]).to.equal node.view\n            expect(parent.childNodes.length).to.equal 4\n\n\n        it 'should throw an error if the doms parent is controlled by a node', () ->\n            parent = new Node tag:'div'\n            node   = new Node tag:'div'\n            parent.view.appendChild prev = getTag 'div'\n            expect(() -> node.behind prev).to.throw()\n\n\n        it 'should not throw an error if Node.CHECK_DOM = false', () ->\n            Node.CHECK_DOM = false\n            parent = new Node tag:'div'\n            node   = new Node tag:'div'\n            parent.view.appendChild prev = getTag 'div'\n            expect(() -> node.behind prev).to.not.throw()\n            Node.CHECK_DOM = true\n\n\n    describe 'before', () ->\n\n        it 'should prepand the nodes view before the dom', () ->\n            parent = getTag 'div'\n            node   = new Node tag:'div'\n            parent.appendChild getTag 'div'\n            parent.appendChild next = getTag 'div'\n            node.before next\n            expect(parent.childNodes[1]).to.equal node.view\n            expect(parent.childNodes.length).to.equal 3\n\n\n        it 'should throw an error if the doms parent is controlled by a node', () ->\n            parent = new Node tag:'div'\n            node   = new Node tag:'div'\n            parent.view.appendChild next = getTag 'div'\n            expect(() -> node.before next).to.throw()\n\n\n        it 'should not throw an error if Node.CHECK_DOM = false', () ->\n            Node.CHECK_DOM = false\n            parent = new Node tag:'div'\n            node   = new Node tag:'div'\n            parent.view.appendChild next = getTag 'div'\n            expect(() -> node.before next).to.not.throw()\n            Node.CHECK_DOM = true\n\n\n    describe 'replace', () ->\n\n        it 'should replace the dom with the nodes view', () ->\n            parent = getTag 'div'\n            node   = new Node tag:'div'\n            parent.appendChild old = getTag 'div'\n            node.replace old\n            expect(parent.childNodes[0]).to.equal node.view\n            expect(parent.childNodes.length).to.equal 1\n\n\n        it 'should throw an error if the doms parent is controlled by a node', () ->\n            parent = new Node tag:'div'\n            node   = new Node tag:'div'\n            parent.view.appendChild old = getTag 'div'\n            expect(() -> node.replace old).to.throw()\n\n\n        it 'should not throw an error for the doms parent if Node.CHECK_DOM = false', () ->\n            Node.CHECK_DOM = false\n            parent = new Node tag:'div'\n            node   = new Node tag:'div'\n            parent.view.appendChild old = getTag 'div'\n            expect(() -> node.replace old).to.not.throw()\n            Node.CHECK_DOM = true\n\n\n        it 'should throw an error if the dom is controlled by a node', () ->\n            parent = getTag 'div'\n            node   = new Node tag:'div'\n            parent.appendChild old = (new Node tag:'div').view\n            expect(() -> node.replace old).to.throw()\n\n        it 'should not throw an error for the dom if Node.CHECK_DOM = false', () ->\n            Node.CHECK_DOM = false\n            parent = getTag 'div'\n            node   = new Node tag:'div'\n            parent.appendChild old = (new Node tag:'div').view\n            expect(() -> node.replace old).to.not.throw()\n            Node.CHECK_DOM = true\n\n\n"]}},{"offset":{"line":910,"column":0},"map":{"version":3,"file":"../../src/js/node.js","sourceRoot":"","sources":["../../src/coffee/node.coffee"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA,MAAA,soBAAA;IAAA;;EAqDA,SAAA,GAAc,SAAC,KAAD;IAAW,IAAG,MAAA,CAAO,KAAP,CAAH;aAAsB,KAAA,CAAA,EAAtB;KAAA,MAAA;aAAmC,MAAnC;;EAAX;;EACd,MAAA,GAAc,SAAC,KAAD;WAAW,OAAO,KAAP,KAAgB;EAA3B;;EACd,QAAA,GAAc,SAAC,KAAD;WAAW,OAAO,KAAP,KAAgB;EAA3B;;EACd,QAAA,GAAc,SAAC,KAAD;WAAW,OAAO,KAAP,KAAgB,QAAhB,IAA4B,KAAA,KAAS,KAAA,GAAQ;EAAxD;;EACd,QAAA,GAAc,SAAC,KAAD;WAAW,OAAO,KAAP,KAAgB;EAA3B;;EACd,MAAA,GAAc,SAAC,KAAD;WAAW,OAAO,KAAP,KAAgB;EAA3B;;EACd,KAAA,GAAc,SAAC,KAAD;WAAW,KAAA,YAAiB;EAA5B;;EACd,SAAA,GAAc,SAAC,KAAD;WAAW,KAAA,YAAiB;EAA5B;;EACd,KAAA,GAAc,SAAC,KAAD;WAAW,KAAA,KAAS,IAAT,IAAiB,KAAA,KAAS;EAArC;;EACd,QAAA,GAAc,SAAC,KAAD;AAAW,QAAA;WAAA,CAAC,CAAA,GAAI,OAAO,KAAZ,CAAA,KAAsB,QAAtB,IAAkC,CAAA,KAAK,QAAvC,IAAmD,CAAA,KAAK;EAAnE;;EACd,WAAA,GAAc,SAAC,KAAD;WAAW,MAAA,CAAO,KAAP,CAAA,IAAkB,CAAC,CAAC,KAAK,CAAC,SAAN,YAA2B,IAA5B,CAAA,IAAqC,KAAA,KAAS,IAA/C;EAA7B;;EAGd,aAAA,GAAgB,SAAC,IAAD;WACZ,IAAI,CAAC,OAAL,CAAa,QAAb,EAAuB,SAAC,IAAD;aACnB,GAAA,GAAM,IAAI,CAAC,WAAL,CAAA;IADa,CAAvB;EADY;;EAKhB,cAAA,GAAiB,SAAC,IAAD;IACb,IAAA,GAAO,IAAI,CAAC,KAAL,CAAW,CAAX;WACP,IAAI,CAAC,MAAL,CAAY,CAAZ,CAAc,CAAC,WAAf,CAAA,CAAA,GAA+B,aAAA,CAAc,IAAI,CAAC,KAAL,CAAW,CAAX,CAAd;EAFlB;;EAaX;IAGF,IAAC,CAAA,aAAD,GAAiB;;IACjB,IAAC,CAAA,SAAD,GAAiB;;IACjB,IAAC,CAAA,SAAD,GAAiB;;IACjB,IAAC,CAAA,QAAD,GAAiB;;IAGJ,cAAC,IAAD;MAAC,IAAC,CAAA,MAAD;MACV,IAAC,CAAA,MAAD,GAAmB,EAAE;MACrB,OAAQ,CAAA,IAAC,CAAA,MAAD,CAAR,GAAmB;MACnB,IAAC,CAAA,IAAD,GAAS,IAAC,CAAA,IAAD,KAAU,IAAV,IAAkB;MAC3B,IAAC,CAAA,KAAD,GAAS,IAAC,CAAA,KAAD,KAAU,IAAV,IAAkB;MAC3B,IAAC,CAAA,IAAD,CAAA;IALS;;mBAQb,IAAA,GAAM,SAAA;aAAM,IAAA,CAAK,IAAL;IAAN;;mBAGN,QAAA,GAAU,SAAC,GAAD;aAAS,MAAA,CAAQ,IAAR,EAAW,GAAX;IAAT;;mBACV,MAAA,GAAU,SAAC,GAAD;aAAS,MAAA,CAAQ,IAAR,EAAW,GAAX;IAAT;;mBACV,MAAA,GAAU,SAAC,GAAD;aAAS,MAAA,CAAQ,IAAR,EAAW,GAAX;IAAT;;mBACV,OAAA,GAAU,SAAC,GAAD;aAAS,OAAA,CAAQ,IAAR,EAAW,GAAX;IAAT;;mBAGV,MAAA,GAAQ,SAAA;aAAM,MAAA,CAAQ,IAAR;IAAN;;mBAGR,QAAA,GAAe,SAAC,KAAD;aAAkB,QAAA,CAAc,IAAd,EAAiB,KAAjB;IAAlB;;mBACf,UAAA,GAAe,SAAC,KAAD,EAAQ,KAAR;aAAkB,UAAA,CAAc,IAAd,EAAiB,KAAjB,EAAwB,KAAxB;IAAlB;;mBACf,WAAA,GAAe,SAAC,KAAD;aAAkB,WAAA,CAAc,IAAd,EAAiB,KAAjB;IAAlB;;mBACf,aAAA,GAAe,SAAC,KAAD;aAAkB,aAAA,CAAc,IAAd,EAAiB,KAAjB;IAAlB;;mBACf,SAAA,GAAe,SAAA;aAAkB,SAAA,CAAc,IAAd;IAAlB;;mBACf,YAAA,GAAe,SAAC,IAAD,EAAO,KAAP;aAAkB,YAAA,CAAc,IAAd,EAAiB,IAAjB,EAAuB,KAAvB;IAAlB;;mBAGf,MAAA,GAAW,SAAA;aAAiB,MAAA,CAAU,IAAV;IAAjB;;mBACX,SAAA,GAAW,SAAC,IAAD,EAAO,KAAP;aAAiB,SAAA,CAAU,IAAV,EAAa,IAAb,EAAmB,KAAnB;IAAjB;;mBAGX,MAAA,GAAQ,SAAA;aAAM,IAAC,CAAA;IAAP;;mBAGR,OAAA,GAAS,SAAA,GAAA;;mBAET,KAAA,GAAO,SAAA;aAAM,KAAA,CAAM,IAAN;IAAN;;mBAKP,OAAA,GAAS,SAAA,GAAA;;mBAGT,SAAA,GAAW,SAAA,GAAA;;mBAGX,OAAA,GAAS,SAAA,GAAA;;mBAGT,SAAA,GAAW,SAAA;aAAM,IAAC,CAAA;IAAP;;mBAGX,SAAA,GAAW,SAAA,GAAA;;mBAGX,YAAA,GAAc,SAAA,GAAA;;;;;;EAYlB,MAAA,GAAW;;EACX,QAAA,GAAW;;EACX,OAAA,GAAW;;EACX,OAAA,GAAa;;EACb,QAAA,GAAa;;EACb,KAAA,GAAa;;EACb,UAAA,GAAa;;EAUb,GAAA,GAAM,SAAC,GAAD,EAAM,KAAN,EAAa,SAAb;;MAAa,YAAY;;IAC3B,IAAG,QAAS,CAAA,GAAA,CAAT,IAAkB,CAAI,SAAzB;AACI,YAAM,IAAI,KAAJ,CAAU,oCAAA,GAAqC,GAArC,GAAyC,GAAnD,EADV;;WAEA,QAAS,CAAA,GAAA,CAAT,GAAgB;EAHd;;EAQN,KAAA,GAAQ,SAAC,GAAD;WACJ,OAAO,QAAS,CAAA,GAAA;EADZ;;EAYR,MAAA,GAAS,SAAC,GAAD;AACL,QAAA;IAAA,IAAG,KAAA,CAAM,GAAN,CAAH;AACI,YAAM,IAAI,KAAJ,CAAU,yCAAV,EADV;;IAEA,IAAG,CAAI,WAAA,CAAY,KAAA,GAAQ,GAAG,CAAC,KAAxB,CAAP;MACI,IAAG,CAAI,WAAA,CAAY,KAAA,GAAQ,GAAG,CAAC,GAAxB,CAAP;QACI,KAAA,GAAQ;QACR,IAAsC,KAAA,CAAM,GAAN,CAAtC;UAAA,GAAA,GAAQ,GAAG,CAAC,QAAQ,CAAC,WAAb,CAAA,EAAR;;QACA,IAAyB,QAAA,CAAS,GAAA,GAAM,GAAA,IAAO,GAAG,CAAC,GAA1B,CAAzB;UAAA,KAAA,GAAQ,QAAS,CAAA,GAAA,EAAjB;SAHJ;OADJ;;IAKA,KAAA,GAAQ,KAAA,IAAS,IAAI,CAAC;WACtB,IAAI,KAAJ,CAAU,GAAV;EATK;;EAoBT,IAAA,GAAO,SAAC,IAAD;AACH,QAAA;IAAA,IAAG,KAAA,CAAM,GAAA,GAAM,IAAI,CAAC,MAAL,CAAA,CAAZ,CAAH;AACI,YAAM,IAAI,KAAJ,CAAU,6CAAV,EADV;;AAEA,YAAO,IAAP;AAAA,WACS,QAAA,CAAU,GAAV,CADT;QAC4B,YAAA,CAAgB,IAAhB,EAAsB,IAAI,CAAC,GAAL,GAAW;UAAA,IAAA,EAAM,GAAA,GAAM,EAAZ;SAAjC;AAAnB;AADT,WAES,KAAA,CAAU,GAAV,CAFT;QAE4B,cAAA,CAAgB,IAAhB,EAAsB,IAAtB,EAA4B,GAA5B;AAAnB;AAFT,WAGS,SAAA,CAAU,GAAV,CAHT;QAG4B,eAAA,CAAgB,IAAhB,EAAsB,IAAtB,EAA4B,GAA5B;AAAnB;AAHT;QAKQ,GAAA,GAAM,GAAG,CAAC;AACV,gBAAO,IAAP;AAAA,eACS,KAAA,CAAU,GAAV,CADT;YAC4B,YAAA,CAAgB,IAAhB,EAAsB,GAAtB;AAAnB;AADT,eAES,QAAA,CAAU,GAAV,CAFT;YAE4B,WAAA,CAAgB,IAAhB,EAAsB,GAAtB;AAAnB;AAFT,eAGS,KAAA,CAAU,GAAV,CAHT;YAG4B,cAAA,CAAgB,IAAhB,EAAsB,GAAtB,EAA2B,GAA3B;AAAnB;AAHT,eAIS,SAAA,CAAU,GAAV,CAJT;YAI4B,eAAA,CAAgB,IAAhB,EAAsB,GAAtB,EAA2B,GAA3B;AAAnB;AAJT;YAMQ,IAAG,WAAA,CAAY,GAAZ,CAAH;AACI,oBAAM,IAAI,KAAJ,CAAU,sEAAV,EADV;;AAEA,kBAAM,IAAI,KAAJ,CAAU,0CAAV;AARd;AANR;IAgBA,IAA0B,IAAI,CAAC,SAA/B;MAAA,OAAO,CAAC,IAAR,CAAa,IAAI,CAAC,IAAlB,EAAA;;WACA;EApBG;;EAyBP,YAAA,GAAe,SAAC,IAAD,EAAO,GAAP;AACX,QAAA;IAAA,IAAA,GAAO,GAAG,CAAC;IACX,IAAiB,MAAA,CAAO,IAAP,CAAjB;MAAA,IAAA,GAAO,IAAA,CAAA,EAAP;;IACA,IAAG,CAAI,QAAA,CAAS,IAAT,CAAP;AACI,YAAM,IAAI,KAAJ,CAAU,4DAAV,EADV;;IAEA,IAAI,CAAC,IAAL,GAAY;IACZ,IAAI,CAAC,GAAL,GAAY,GAAG,CAAC,GAAJ,GAAW;IACvB,IAAI,CAAC,IAAL,GAAY,IAAI,CAAC;IACjB,IAAI,CAAC,IAAL,GAAY,QAAQ,CAAC,cAAT,CAAwB,IAAxB;WACZ;EATW;;EAcf,WAAA,GAAc,SAAC,IAAD,EAAO,GAAP;AACV,QAAA;IAAA,IAAI,CAAC,GAAL,GAAY,GAAA,GAAM,GAAG,CAAC;IACtB,IAAI,CAAC,IAAL,GAAY,IAAI,CAAC;IACjB,IAAI,CAAC,IAAL,GAAY,QAAQ,CAAC,aAAT,CAAuB,GAAvB;IACZ,WAAA,CAAY,IAAZ,EAAkB,GAAlB;WACA;EALU;;EAUd,eAAA,GAAkB,SAAC,IAAD,EAAO,GAAP,EAAY,GAAZ;AACd,QAAA;IAAA,IAAgB,IAAI,CAAC,SAArB;MAAA,QAAA,CAAS,GAAT,EAAA;;IACA,IAAI,CAAC,IAAL,GAAY,GAAG,CAAC;IAChB,IAAI,CAAC,GAAL,GAAY;IACZ,IAAI,CAAC,IAAL,GAAY,IAAI,CAAC;IACjB,IAAI,CAAC,IAAL,GAAY;IACZ,IAAG,GAAH;MACI,IAAA,GAAO,GAAG,CAAC;MACX,IAAG,CAAI,KAAA,CAAM,IAAN,CAAP;QACI,IAAiB,MAAA,CAAO,IAAP,CAAjB;UAAA,IAAA,GAAO,IAAA,CAAA,EAAP;;QACA,IAAG,CAAI,QAAA,CAAS,IAAT,CAAP;AACI,gBAAM,IAAI,KAAJ,CAAU,4DAAV,EADV;;QAEA,IAAI,CAAC,IAAL,GAAY,GAAG,CAAC,SAAJ,GAAgB,KAJhC;OAAA,MAAA;QAMI,GAAG,CAAC,IAAJ,GAAW,IAAI,CAAC,KANpB;OAFJ;KAAA,MAAA;MAUI,IAAI,CAAC,GAAL,GAAW;QAAA,IAAA,EAAM,IAAI,CAAC,IAAX;QAVf;;WAWA;EAjBc;;EAsBlB,cAAA,GAAiB,SAAC,IAAD,EAAO,GAAP,EAAY,GAAZ;IACb,IAAgB,IAAI,CAAC,SAArB;MAAA,QAAA,CAAS,GAAT,EAAA;;IACA,IAAI,CAAC,GAAL,GAAY,GAAG,CAAC,QAAQ,CAAC,WAAb,CAAA;IACZ,IAAI,CAAC,IAAL,GAAY,IAAI,CAAC;IACjB,IAAI,CAAC,IAAL,GAAY;IACZ,IAAG,GAAA,IAAQ,QAAA,CAAS,GAAG,CAAC,GAAb,CAAR,IAA8B,GAAG,CAAC,GAAJ,KAAW,IAAI,CAAC,GAAjD;AACI,YAAM,IAAI,KAAJ,CAAU,wDAAA,GAAyD,GAAG,CAAC,GAA7D,GAAiE,OAAjE,GAAwE,IAAI,CAAC,GAAvF,EADV;;IAEA,GAAA,GAAU,GAAA,IAAO,CAAA,IAAI,CAAC,GAAL,GAAW,EAAX;IACjB,GAAG,CAAC,GAAJ,GAAU,IAAI,CAAC;IACf,WAAA,CAAY,IAAZ,EAAkB,GAAlB;WACA;EAVa;;EAqBjB,QAAA,GAAW,SAAC,GAAD;IACP,IAAG,OAAO,CAAC,OAAR,CAAgB,GAAhB,CAAA,GAAuB,CAAC,CAA3B;AACI,YAAM,IAAI,KAAJ,CAAU,iDAAV,EADV;;WAEA,OAAO,CAAC,IAAR,CAAa,GAAb;EAHO;;EAcX,aAAA,GAAgB,SAAA,GAAA;;EAWhB,MAAA,GAAS,SAAC,IAAD,GAAA;;EAKT,SAAA,GAAY,SAAC,IAAD,EAAO,IAAP,EAAa,KAAb,GAAA;;EAKZ,SAAA,GAAY,SAAC,IAAD;AACR,QAAA;WAAA,GAAA,GAAM,IAAI,CAAC,MAAL,CAAA;EADE;;EAMZ,YAAA,GAAe,SAAC,IAAD,EAAO,IAAP,EAAa,KAAb,GAAA;;EAKf,UAAA,GAAa,SAAC,IAAD,EAAO,GAAP;AACT,QAAA;IAAA,IAAA,GAAO,GAAG,CAAC;IACX,IAAG,CAAI,KAAA,CAAM,IAAN,CAAP;MACI,IAAiB,MAAA,CAAO,IAAP,CAAjB;QAAA,IAAA,GAAO,IAAA,CAAA,EAAP;;MACA,IAAG,CAAI,QAAA,CAAS,IAAT,CAAP;AACI,cAAM,IAAI,KAAJ,CAAU,4DAAV,EADV;OAFJ;KAAA,MAAA;aAKI,GAAG,CAAC,IAAJ,GAAW,IAAI,CAAC,KALpB;;EAFS;;EAab,WAAA,GAAc,SAAC,IAAD,EAAO,GAAP;AAEV,QAAA;IAAA,IAA0B,GAAA,YAAe,IAAzC;MAAA,GAAA,GAAU,GAAG,CAAC,MAAJ,CAAA,EAAV;;IACA,KAAA,GAAU,IAAI,CAAC,KAAL,IAAc,CAAA,IAAI,CAAC,KAAL,GAAa,EAAb;IACxB,OAAA,GAAU,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAlB,EAAyB,IAAI,CAAC,MAA9B,EAAsC,GAAtC;IAEV,IAAG,OAAO,CAAC,cAAR,CAAuB,WAAvB,CAAH;MACI,WAAA,CAAY,IAAZ,EAAkB,GAAG,CAAC,SAAtB,EADJ;;IAGA,IAAG,OAAO,CAAC,cAAR,CAAuB,OAAvB,CAAH;MACI,WAAA,CAAY,IAAZ,EAAkB,GAAG,CAAC,KAAtB,EADJ;;IAGA,IAAG,OAAO,CAAC,cAAR,CAAuB,UAAvB,CAAH;MACI,cAAA,CAAe,IAAf,EAAqB,GAAG,CAAC,QAAzB,EADJ;;IAGA,OAAO,OAAO,CAAC;IACf,OAAO,OAAO,CAAC;IACf,OAAO,OAAO,CAAC;IACf,OAAO,OAAO,CAAC;IACf,OAAO,OAAO,CAAC;IACf,OAAO,OAAO,CAAC;IACf,OAAO,OAAO,CAAC;IACf,OAAO,OAAO,CAAC;IACf,OAAO,OAAO,CAAC;AAEf,SAAA,eAAA;MACI,IAAA,GAAQ,KAAM,CAAA,IAAA;MACd,KAAA,GAAQ,GAAI,CAAA,IAAA;MAEZ,IAAG,MAAA,CAAO,KAAP,CAAA,IAAiB,CAAC,KAAA,CAAM,KAAN,CAAA,IAAiB,MAAA,CAAO,IAAP,CAAlB,CAApB;QACI,UAAA,CAAW,IAAX,EAAiB,KAAjB,EAAwB,IAAxB,EADJ;OAAA,MAAA;QAGI,IAAG,KAAK,CAAC,IAAN,CAAW,IAAX,CAAH;UACI,WAAA,CAAY,IAAZ,EAAkB,KAAlB,EAAyB,IAAzB,EADJ;SAAA,MAAA;UAGI,IAAmB,MAAA,CAAO,KAAP,CAAnB;YAAA,KAAA,GAAQ,KAAA,CAAA,EAAR;;UACA,IAAG,MAAA,CAAO,KAAP,CAAH;YACI,UAAA,CAAW,IAAX,EAAiB,KAAjB,EAAwB,IAAxB,EADJ;WAAA,MAAA;YAGI,UAAA,CAAW,IAAX,EAAiB,KAAjB,EAAwB,IAAxB,EAHJ;WAJJ;SAHJ;;AAJJ;WAeA;EAxCU;;EAuDd,UAAA,GAAa,SAAC,IAAD,EAAO,KAAP,EAAc,IAAd;AAET,QAAA;IAAA,IAAI,CAAC,KAAM,CAAA,IAAA,CAAX,GAAmB,IAAI,CAAC,IAAI,CAAC,YAAV,CAAuB,IAAvB;IACnB,IAAU,IAAI,CAAC,KAAM,CAAA,IAAA,CAAX,KAAoB,KAA9B;AAAA,aAAA;;IACA,IAAA,GAAO,IAAI,CAAC;IACZ,IAAG,KAAA,KAAS,IAAT,IAAkB,KAAA,KAAS,MAA9B;MACI,IAAI,CAAC,YAAL,CAAkB,IAAlB,EAAwB,KAAxB;MACA,IAAK,CAAA,IAAA,CAAL,GAAmB;MACnB,IAAI,CAAC,KAAM,CAAA,IAAA,CAAX,GAAmB,MAHvB;KAAA,MAAA;MAKI,IAAI,CAAC,eAAL,CAAqB,IAArB;MACA,OAAO,IAAK,CAAA,IAAA;MACZ,OAAO,IAAI,CAAC,KAAM,CAAA,IAAA,EAPtB;;WAQA;EAbS;;EAwBb,UAAA,GAAa,SAAC,IAAD,EAAO,KAAP,EAAc,IAAd;AACT,QAAA;IAAA,IAAI,CAAC,KAAM,CAAA,IAAA,CAAX,GAAmB,IAAI,CAAC,IAAK,CAAA,IAAA;IAC7B,IAAU,IAAI,CAAC,KAAM,CAAA,IAAA,CAAX,KAAoB,KAA9B;AAAA,aAAA;;IACA,IAAA,GAAO,IAAI,CAAC;IACZ,IAAG,KAAA,CAAM,KAAN,CAAH;MACI,IAAI,CAAC,eAAL,CAAqB,IAArB;MACA,IAAK,CAAA,IAAA,CAAL,GAAa;MACb,OAAO,IAAI,CAAC,KAAM,CAAA,IAAA,EAHtB;KAAA,MAIK,IAAI,KAAA,KAAS,KAAb;MACD,IAAI,CAAC,eAAL,CAAqB,IAArB;MACA,IAAK,CAAA,IAAA,CAAL,GAAmB;MACnB,IAAI,CAAC,KAAM,CAAA,IAAA,CAAX,GAAmB,MAHlB;KAAA,MAAA;MAKD,IAAI,CAAC,YAAL,CAAkB,IAAlB,EAAwB,EAAxB;MACA,IAAK,CAAA,IAAA,CAAL,GAAmB;MACnB,IAAI,CAAC,KAAM,CAAA,IAAA,CAAX,GAAmB,KAPlB;;WAQL;EAhBS;;EA2Bb,WAAA,GAAc,SAAC,IAAD,EAAO,KAAP;IACV,IAAmB,MAAA,CAAO,KAAP,CAAnB;MAAA,KAAA,GAAQ,KAAA,CAAA,EAAR;;IAEA,IAAI,CAAC,KAAK,CAAC,SAAX,GAAuB,IAAI,CAAC,IAAI,CAAC;IACjC,IAAU,IAAI,CAAC,KAAK,CAAC,SAAX,KAAwB,KAAlC;AAAA,aAAA;;IACA,IAAG,KAAH;MACI,IAAI,CAAC,IAAI,CAAC,SAAV,GAAuB;MACvB,IAAI,CAAC,KAAK,CAAC,SAAX,GAAuB,MAF3B;KAAA,MAAA;MAII,IAAI,CAAC,IAAI,CAAC,SAAV,GAAuB;MACvB,OAAO,IAAI,CAAC,KAAK,CAAC,UALtB;;WAMA;EAXU;;EAsBd,WAAA,GAAc,SAAC,IAAD,EAAO,KAAP;AACV,QAAA;IAAA,IAAA,GAAQ,IAAI,CAAC;IACb,KAAA,GAAQ,IAAI,CAAC;IACb,IAAA,GAAQ,KAAK,CAAC;IAEd,IAAU,CAAI,IAAd;AAAA,aAAA;;IAEA,IAAmB,MAAA,CAAO,KAAP,CAAnB;MAAA,KAAA,GAAQ,KAAA,CAAA,EAAR;;IAEA,IAAG,KAAA,CAAM,KAAN,CAAH;MACI,IAAI,CAAC,KAAK,CAAC,OAAX,GAAqB;MACrB,OAAO,KAAK,CAAC,MAFjB;KAAA,MAIK,IAAG,QAAA,CAAS,KAAT,CAAH;MACD,IAAI,CAAC,KAAK,CAAC,OAAX,GAAqB;MACrB,KAAK,CAAC,KAAN,GAAqB,MAFpB;KAAA,MAAA;MAID,GAAA,GAAU;MACV,IAAA,GAAa,QAAA,CAAS,IAAT,CAAH,GAAuB,IAAvB,GAAiC;MAC3C,OAAA,GAAU;MACV,OAAA,GAAU,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAlB,EAAyB,IAAzB;AACV,WAAA,eAAA;QACI,KAAA,GAAQ,KAAM,CAAA,IAAA;QACd,IAAG,KAAA,KAAS,IAAK,CAAA,IAAA,CAAjB;UACI,OAAA,GAAU,KADd;;QAEA,IAAK,CAAA,IAAA,CAAL,GAAa;QACb,IAAG,KAAA,CAAM,KAAN,CAAH;UACI,OAAO,IAAK,CAAA,IAAA,EADhB;SAAA,MAAA;UAGI,IAAA,GAAQ,aAAA,CAAc,IAAd;UACR,GAAA,IAAQ,IAAA,GAAO,IAAP,GAAc,KAAd,GAAsB,KAJlC;;AALJ;MAWA,IAAG,OAAH;QACI,IAAG,GAAG,CAAC,MAAP;UACI,GAAA,GAAqB,GAAG,CAAC,KAAJ,CAAU,CAAV,EAAa,CAAC,CAAd;UACrB,IAAI,CAAC,KAAK,CAAC,OAAX,GAAqB;UACrB,KAAK,CAAC,KAAN,GAAqB,KAHzB;SAAA,MAAA;UAKI,IAAI,CAAC,KAAK,CAAC,OAAX,GAAqB;UACrB,OAAO,KAAK,CAAC,MANjB;SADJ;OAnBC;;WA2BL;EAxCU;;EAmDd,WAAA,GAAc,SAAC,IAAD,EAAO,QAAP,EAAiB,IAAjB;AACV,QAAA;IAAA,MAAA,GAAY,IAAI,CAAC,MAAL,IAAe,CAAA,IAAI,CAAC,MAAL,GAAc,EAAd;IAC3B,IAAA,GAAY,IAAI,CAAC;IACjB,IAAA,GAAY,cAAA,CAAe,IAAf;IACZ,QAAA,GAAY,MAAO,CAAA,IAAA;IAEnB,IAAG,QAAA,CAAS,QAAT,CAAH;MACI,QAAA,GAAW,IAAK,CAAA,IAAA,EADpB;;IAGA,IAAG,QAAA,KAAY,QAAf;MACI,IAAG,QAAH;QACI,IAAI,CAAC,mBAAL,CAAyB,IAAzB,EAA+B,QAA/B;QACA,OAAO,MAAO,CAAA,IAAA,EAFlB;;MAGA,IAAG,QAAH;QACI,IAAI,CAAC,gBAAL,CAAsB,IAAtB,EAA4B,QAA5B;QACA,MAAO,CAAA,IAAA,CAAP,GAAe,SAFnB;OAJJ;;WAOA;EAhBU;;EAmBd,YAAA,GAAe,SAAC,IAAD;AACX,QAAA;IAAA,MAAA,GAAS,IAAI,CAAC;IACd,IAAe,CAAI,MAAnB;AAAA,aAAO,KAAP;;IAEA,IAAA,GAAO,IAAI,CAAC;AACZ,SAAA,cAAA;;MACI,IAAA,GAAO,cAAA,CAAe,IAAf;MACP,IAA4C,QAA5C;QAAA,IAAI,CAAC,mBAAL,CAAyB,IAAzB,EAA+B,QAA/B,EAAA;;MACA,OAAO,MAAO,CAAA,IAAA;AAHlB;IAIA,IAAI,CAAC,MAAL,GAAc;WACd;EAVW;;EAqBf,cAAA,GAAiB,SAAC,IAAD,EAAO,IAAP;AAEb,QAAA;IAAA,QAAA,GAAW,IAAI,CAAC,QAAL,IAAiB,CAAA,IAAI,CAAC,QAAL,GAAgB,EAAhB;IAC5B,IAAqB,MAAA,CAAO,IAAP,CAArB;MAAA,IAAA,GAAW,IAAA,CAAA,EAAX;;IACA,IAAA,GAAc,QAAA,CAAS,IAAT,CAAH,GAAuB,CAAC,IAAD,CAAvB,GAAmC,IAAA,IAAQ;IACtD,CAAA,GAAc,QAAQ,CAAC,MAAT,GAAkB,IAAI,CAAC,MAA1B,GAAsC,QAAQ,CAAC,MAA/C,GAA2D,IAAI,CAAC;AAC3E,SAAS,0EAAT;MACI,KAAA,GAAQ,QAAS,CAAA,CAAA;MACjB,GAAA,GAAQ,IAAK,CAAA,CAAA;MACb,IAAiB,MAAA,CAAO,GAAP,CAAjB;QAAA,GAAA,GAAQ,GAAA,CAAA,EAAR;;MAEA,IAAG,CAAI,KAAJ,IAAc,CAAI,GAArB;AACI,cAAM,IAAI,KAAJ,CAAU,CAAA,0CAAA,GAA2C,CAA3C,GAA6C,wBAA7C,CAAA,GAAuE,KAAvE,GAA+E,IAA/E,GAAsF,GAAhG,EADV;;MAEA,IAAG,CAAI,KAAP;QACI,QAAA,CAAS,IAAT,EAAe,GAAf,EADJ;OAAA,MAEK,IAAG,CAAI,GAAP;QACD,WAAA,CAAY,KAAZ,EADC;OAAA,MAAA;QAGD,MAAA,CAAO,KAAP,EAAc,GAAd,EAHC;;AATT;IAaA,QAAQ,CAAC,MAAT,GAAkB,IAAI,CAAC;WACvB;EApBa;;EA+BjB,MAAA,GAAS,SAAC,IAAD,EAAO,GAAP;AACL,QAAA;IAAA,WAAA,GAAc,IAAI,CAAC,WAAL,CAAA;IACd,SAAA,GAAc,IAAI,CAAC,SAAL,CAAe,GAAf;IACd,IAAG,IAAA,KAAQ,GAAR,IAAe,IAAI,CAAC,WAAL,KAAoB,GAAG,CAAC,GAA1C;MACI,IAAwC,WAAA,IAAgB,SAAxD;QAAA,gBAAA,CAAiB,IAAjB,EAAuB,IAAI,CAAC,MAAL,CAAA,CAAvB,EAAA;;MACA,IAAwC,WAAA,IAAgB,CAAI,SAA5D;QAAA,YAAA,CAAiB,IAAjB,EAAuB,IAAI,CAAC,MAAL,CAAA,CAAvB,EAAA;OAFJ;KAAA,MAMK,IAAG,IAAI,CAAC,GAAL,KAAY,GAAG,CAAC,GAAhB,IAAuB,GAAA,YAAe,IAAzC;MACD,YAAA,CAAa,IAAb,EAAmB,GAAnB,EADC;KAAA,MAGA,IAAG,IAAI,CAAC,GAAL,KAAY,MAAf;MACD,UAAA,CAAW,IAAX,EAAiB,GAAjB,EADC;KAAA,MAGA,IAAG,WAAA,IAAgB,SAAnB;MACD,gBAAA,CAAiB,IAAjB,EAAuB,GAAvB,EADC;;WAGL;EAlBK;;EA6BT,QAAA,GAAW,SAAC,IAAD,EAAO,GAAP;AACP,QAAA;IAAA,IAAG,GAAA,YAAe,IAAlB;MACI,KAAA,GAAQ,IADZ;KAAA,MAAA;MAGI,KAAA,GAAQ,MAAA,CAAO,GAAP,EAAY,IAAZ,EAAkB,GAAG,CAAC,KAAJ,IAAa,IAAI,CAAC,KAApC,EAHZ;;IAKA,GAAA,GAAM,KAAK,CAAC,MAAN,CAAA;IACN,IAAG,CAAI,KAAK,CAAC,IAAb;MACI,KAAK,CAAC,IAAN,GAAa,UAAA,CAAW,KAAX,EAAkB,GAAlB,EADjB;;IAGA,IAAI,CAAC,QAAQ,CAAC,IAAd,CAAmB,KAAnB;IACA,IAAI,CAAC,IAAI,CAAC,WAAV,CAAsB,KAAK,CAAC,IAA5B;IACA,KAAK,CAAC,MAAN,GAAe;IACf,KAAK,CAAC,KAAN,GAAe,IAAI,CAAC,KAAL,GAAa;IAE5B,IAAG,QAAA,CAAS,GAAT,CAAA,IAAiB,CAAC,CAAI,GAAG,CAAC,GAAR,IAAgB,QAAA,CAAS,GAAG,CAAC,IAAb,CAAjB,CAApB;MACI,UAAA,CAAW,KAAX,EAAkB,GAAlB,EADJ;KAAA,MAAA;MAGI,gBAAA,CAAiB,KAAjB,EAAwB,GAAxB,EAHJ;;IAKA,KAAK,CAAC,OAAN,CAAA;WACA;EArBO;;EAgCX,WAAA,GAAc,SAAC,KAAD;AAKV,QAAA;IAAA,IAAA,GAAO,KAAK,CAAC;IACb,IAAA,GAAO,KAAK,CAAC;IACb,WAAA,CAAY,KAAZ;IACA,IAAI,CAAC,IAAI,CAAC,WAAV,CAAsB,IAAtB;WACA;EATU;;EAoBd,YAAA,GAAe,SAAC,KAAD,EAAQ,GAAR;AAEX,QAAA;IAAA,IAAA,GAAW,KAAK,CAAC;IACjB,QAAA,GAAW,IAAI,CAAC;IAChB,CAAA,GAAW,QAAQ,CAAC,OAAT,CAAiB,KAAjB;IACX,IAAA,GAAW,KAAK,CAAC;IAEjB,WAAA,CAAY,KAAZ;IAEA,IAAG,GAAA,YAAe,IAAlB;MACI,KAAA,GAAQ;MACR,GAAA,GAAQ,KAAK,CAAC,MAAN,CAAA,EAFZ;KAAA,MAAA;MAII,KAAA,GAAQ,MAAA,CAAO,GAAP,EAAY,IAAZ,EAAkB,GAAG,CAAC,KAAJ,IAAa,IAAI,CAAC,KAApC,EAJZ;;IAMA,GAAA,GAAM,KAAK,CAAC,MAAN,CAAA;IACN,IAAG,CAAI,KAAK,CAAC,IAAb;MACI,KAAK,CAAC,IAAN,GAAa,UAAA,CAAW,KAAX,EAAkB,GAAlB,EADjB;;IAGA,QAAS,CAAA,CAAA,CAAT,GAAe;IACf,KAAK,CAAC,MAAN,GAAe;IACf,KAAK,CAAC,KAAN,GAAe,IAAI,CAAC,KAAL,GAAa;IAC5B,IAAI,CAAC,IAAI,CAAC,YAAV,CAAuB,KAAK,CAAC,IAA7B,EAAmC,IAAnC;IAEA,IAAG,QAAA,CAAS,GAAT,CAAA,IAAiB,CAAC,CAAI,GAAG,CAAC,GAAR,IAAgB,QAAA,CAAS,GAAG,CAAC,IAAb,CAAjB,CAApB;MACI,UAAA,CAAW,KAAX,EAAkB,GAAlB,EADJ;KAAA,MAAA;MAGI,gBAAA,CAAiB,KAAjB,EAAwB,GAAxB,EAHJ;;IAKA,KAAK,CAAC,OAAN,CAAA;WAEA;EA/BW;;EA0Cf,WAAA,GAAc,SAAC,IAAD;AAEV,QAAA;IAAA,IAAG,IAAI,CAAC,SAAL,CAAA,CAAA,KAAoB,IAAvB;MAGI,YAAA,CAAa,IAAb;MAEA,IAAG,IAAI,CAAC,QAAL,IAAkB,IAAI,CAAC,QAAQ,CAAC,MAAnC;AACI;AAAA,aAAA,qCAAA;;UAAA,WAAA,CAAY,KAAZ;AAAA,SADJ;;MAGA,OAAO,IAAI,CAAC;MACZ,OAAO,IAAI,CAAC;MACZ,OAAO,OAAQ,CAAA,IAAI,CAAC,MAAL,EAVnB;;IAYA,IAAI,CAAC,MAAL,GAAc;IACd,IAAI,CAAC,KAAL,GAAc;WACd;EAhBU;;EAyBd,MAAA,GAAS,SAAC,IAAD,EAAO,GAAP;IACL,IAAgB,IAAI,CAAC,SAArB;MAAA,QAAA,CAAS,GAAT,EAAA;;WACA,GAAG,CAAC,WAAJ,CAAgB,IAAI,CAAC,IAArB;EAFK;;EAKT,MAAA,GAAS,SAAC,IAAD,EAAO,GAAP;AACL,QAAA;IAAA,MAAA,GAAS,GAAG,CAAC;IACb,IAAA,GAAS,GAAG,CAAC;IACb,IAAmB,IAAI,CAAC,SAAxB;MAAA,QAAA,CAAS,MAAT,EAAA;;IACA,IAAG,IAAH;aACI,MAAM,CAAC,YAAP,CAAoB,IAAI,CAAC,IAAzB,EAA+B,IAA/B,EADJ;KAAA,MAAA;aAGI,MAAM,CAAC,WAAP,CAAmB,IAAI,CAAC,IAAxB,EAHJ;;EAJK;;EAUT,MAAA,GAAS,SAAC,IAAD,EAAO,GAAP;AACL,QAAA;IAAA,MAAA,GAAS,GAAG,CAAC;IACb,IAAmB,IAAI,CAAC,SAAxB;MAAA,QAAA,CAAS,MAAT,EAAA;;WACA,MAAM,CAAC,YAAP,CAAoB,IAAI,CAAC,IAAzB,EAA+B,GAA/B;EAHK;;EAMT,OAAA,GAAU,SAAC,IAAD,EAAO,GAAP;AACN,QAAA;IAAA,MAAA,GAAS,GAAG,CAAC;IACb,IAAG,IAAI,CAAC,SAAR;MACI,QAAA,CAAS,MAAT;MACA,QAAA,CAAS,GAAT,EAFJ;;WAGA,MAAM,CAAC,YAAP,CAAoB,IAAI,CAAC,IAAzB,EAA+B,GAA/B;EALM;;EAQV,MAAA,GAAS,SAAC,IAAD;AACL,QAAA;IAAA,MAAA,GAAS,IAAI,CAAC,IAAI,CAAC;IACnB,IAAmB,IAAI,CAAC,SAAxB;MAAA,QAAA,CAAS,MAAT,EAAA;;WACA,MAAM,CAAC,WAAP,CAAmB,IAAI,CAAC,IAAxB;EAHK;;EAQT,QAAA,GAAW,SAAC,IAAD,EAAO,KAAP,GAAA;;EACX,UAAA,GAAa,SAAC,IAAD,EAAO,KAAP,EAAc,KAAd,GAAA;;EACb,WAAA,GAAc,SAAC,IAAD,EAAO,KAAP,GAAA;;EACd,aAAA,GAAgB,SAAC,IAAD,EAAO,KAAP,GAAA;;EAChB,WAAA,GAAc,SAAA,GAAA;;EACd,KAAA,GAAQ,SAAA,GAAA;;EAeR,IAAI,CAAC,MAAL,GAAmB;;EACnB,IAAI,CAAC,GAAL,GAAmB;;EACnB,IAAI,CAAC,KAAL,GAAmB;;EAEnB,IAAI,CAAC,MAAL,GAAmB;;EACnB,IAAI,CAAC,MAAL,GAAmB;;EACnB,IAAI,CAAC,MAAL,GAAmB;;EACnB,IAAI,CAAC,OAAL,GAAmB;;EACnB,IAAI,CAAC,MAAL,GAAmB;;EAEnB,IAAI,CAAC,SAAL,GAAmB;;EACnB,IAAI,CAAC,MAAL,GAAmB;;EACnB,IAAI,CAAC,QAAL,GAAmB;;EACnB,IAAI,CAAC,QAAL,GAAmB;;EACnB,IAAI,CAAC,QAAL,GAAmB;;EACnB,IAAI,CAAC,MAAL,GAAmB;;EACnB,IAAI,CAAC,KAAL,GAAmB;;EACnB,IAAI,CAAC,SAAL,GAAmB;;EACnB,IAAI,CAAC,KAAL,GAAmB;;EACnB,IAAI,CAAC,QAAL,GAAmB;;EACnB,IAAI,CAAC,WAAL,GAAmB;;EAenB,IAAG,OAAO,MAAP,KAAiB,WAApB;IACI,QAAA,GAAW;IACX,OAAA,GAAW,CAAC,QAAD,EAAW,KAAX;AACX,SAAA,yCAAA;;MACI,IAAS,MAAM,CAAC,qBAAhB;AAAA,cAAA;;MACA,MAAM,CAAC,qBAAP,GAA+B,MAAO,CAAA,MAAA,GAAS,uBAAT;MACtC,MAAM,CAAC,oBAAP,GAA+B,MAAO,CAAA,MAAA,GAAS,sBAAT,CAAP,IAA4C,MAAO,CAAA,MAAA,GAAS,6BAAT;AAHtF;IAMA,IAAG,CAAI,MAAM,CAAC,qBAAd;MACI,MAAM,CAAC,qBAAP,GAA+B,SAAC,QAAD;AAC3B,YAAA;QAAA,QAAA,GAAa,IAAI,CAAC,GAAL,CAAA;QACb,UAAA,GAAa,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,EAAA,GAAK,QAAL,GAAgB,QAA5B;QACb,GAAA,GAAa,SAAA;iBAAM,QAAA,CAAS,QAAA,GAAW,UAApB;QAAN;QACb,EAAA,GAAa,MAAM,CAAC,UAAP,CAAkB,GAAlB,EAAuB,UAAvB;QACb,QAAA,GAAa,QAAA,GAAW;eACxB;MAN2B,EADnC;;IAUA,IAAG,CAAI,MAAM,CAAC,oBAAd;MACI,MAAM,CAAC,oBAAP,GAA8B,SAAC,EAAD;QAC1B,YAAA,CAAa,EAAb;eACA;MAF0B,EADlC;KAnBJ;;;EAiCA,IAAG,OAAO,MAAM,CAAC,MAAd,KAAwB,WAA3B;IACI,MAAM,CAAC,MAAP,GAAgB,SAAA;AACZ,UAAA;MADa,uBAAQ;AACrB,WAAA,wCAAA;;AACI,aAAA,UAAA;UACI,MAAO,CAAA,GAAA,CAAP,GAAc,GAAI,CAAA,GAAA;AADtB;AADJ;aAGA;IAJY,EADpB;;;EAgBA,IAAG,OAAO,MAAP,KAAiB,WAApB;IACI,MAAM,CAAC,OAAP,GAAiB,KADrB;;;EAEA,IAAG,OAAO,MAAP,KAAiB,WAApB;IACI,MAAM,CAAC,IAAP,GAAc,KADlB;GAAA,MAAA;IAGI,IAAI,CAAC,IAAL,GAAY,KAHhB;;AA94BA","sourcesContent":["###\n    cfg as string || boolean || number\n        node is a text node\n\n    cfg as object\n        tag can be\n            string\n                which is mapped to an component class\n                the node name\n            HTMLElement\n            node class    -> render only\n            node instance -> render only\n            undefined/null if text is defined\n\n    cfg as node instance # invalid in create\n\n    cfg as HTMLElement -> in constructor only\n\n    cfg as func -> has to return a valid node cfg\n\n\n    cfg =\n        tag:\n        clazz:\n        bind:\n        inject:\n        text:\n        className:\n        style:\n        child:\n        children:\n        event handlers starting with 'on', camel case converts to kebab case\n\n\n\n\n    update:\n\n        if value == undefined -> no update\n        if value == null      -> remove value\n        else                  -> update\n\n###\n\n\n\n\n#    000   000  000000000  000  000       0000000\n#    000   000     000     000  000      000     \n#    000   000     000     000  000      0000000 \n#    000   000     000     000  000           000\n#     0000000      000     000  0000000  0000000 \n\ngetOrCall   = (value) -> if isFunc(value) then value() else value\nisBool      = (value) -> typeof value == 'boolean'\nisNumber    = (value) -> typeof value == 'number'\nisString    = (value) -> typeof value == 'string' or value == value + ''\nisObject    = (value) -> typeof value == 'object'\nisFunc      = (value) -> typeof value == 'function'\nisDom       = (value) -> value instanceof HTMLElement\nisDomText   = (value) -> value instanceof Text\nisNot       = (value) -> value == null or value == undefined\nisSimple    = (value) -> (t = typeof value) == 'string' or t == 'number' or t == 'boolean'\nextendsNode = (value) -> isFunc(value) and ((value.prototype instanceof Node) or value == Node)\n\n\nnormalizeName = (name) ->\n    name.replace /[A-Z]/g, (name) ->\n        '-' + name.toLowerCase()\n\n\nnormalizeEvent = (type) ->\n    type = type.slice 2\n    type.charAt(0).toLowerCase() + normalizeName type.slice(1)\n\n\n\n\n#    000   000   0000000   0000000    00000000\n#    0000  000  000   000  000   000  000\n#    000 0 000  000   000  000   000  0000000\n#    000  0000  000   000  000   000  000\n#    000   000   0000000   0000000    00000000\n\nclass Node\n\n\n    @DEFAULT_CLASS = @\n    @CHECK_DOM     = true\n    @TEXT_KIND     = 0\n    @TAG_KIND      = 1\n\n\n    constructor: (@cfg) ->\n        @__id__          = ++__id__\n        nodeMap[@__id__] = @\n        @keep  = @keep  == true or false\n        @valid = @valid == true or false\n        @init()\n\n    # internal node configuration\n    init: () -> init @\n\n    # add nodes view to dom\n    appendTo: (dom) -> append  @, dom\n    behind:   (dom) -> behind  @, dom\n    before:   (dom) -> before  @, dom\n    replace:  (dom) -> replace @, dom\n\n    # remove nodes view from dom\n    remove: () -> remove  @\n\n    # direct dom manipulation\n    addChild:      (child)        -> addChild      @, child\n    addChildAt:    (child, index) -> addChildAt    @, child, index\n    removeChild:   (child)        -> removeChild   @, child\n    removeChildAt: (index)        -> removeChildAt @, index\n    updateNow:     ()             -> updateNow     @\n    updateKeyNow:  (name, value)  -> updateKeyNow  @, name, value\n\n    # raf timed dom manipulation\n    update:    ()            -> update    @\n    updateKey: (name, value) -> updateKey @, name, value\n\n    # override\n    render: () -> @cfg\n\n    # override\n    dispose: () ->\n\n    clone: () -> clone @\n\n    # callbacks\n\n    # node added to parent\n    onAdded: () ->\n\n    # node removed from parent\n    onRemoved: () ->\n\n    # nodes view added to dom\n    onMount: () ->\n\n    # nodes view removed from dom\n    onUnmount: () -> @keep\n\n    # nodes view  was updated\n    onUpdated: () ->\n\n    # a key on nodes view was updated\n    onKeyUpdated: () ->\n\n\n\n\n#    000000000  00000000   00000000  00000000\n#       000     000   000  000       000     \n#       000     0000000    0000000   0000000 \n#       000     000   000  000       000     \n#       000     000   000  00000000  00000000\n\n\n__id__   = 0\nclassMap = {}\ndomList  = []\nnodeMap    = {}\ndirtyMap   = {}\ndirty      = false\nrafTimeout = null\n\n\n\n#    00     00   0000000   00000000 \n#    000   000  000   000  000   000\n#    000000000  000000000  00000000 \n#    000 0 000  000   000  000      \n#    000   000  000   000  000      \n\nmap = (tag, clazz, overwrite = false) ->\n    if classMap[tag] and not overwrite\n        throw new Error \"A class is already mapped for tag #{tag}.\"\n    classMap[tag] = clazz\n\n\n\n    \nunmap = (tag) ->\n    delete classMap[tag]\n\n\n\n\n#     0000000  00000000   00000000   0000000   000000000  00000000\n#    000       000   000  000       000   000     000     000     \n#    000       0000000    0000000   000000000     000     0000000 \n#    000       000   000  000       000   000     000     000     \n#     0000000  000   000  00000000  000   000     000     00000000\n\ncreate = (cfg) ->\n    if isNot cfg\n        throw new Error \"A node can't be created from empty cfg.\"\n    if not extendsNode clazz = cfg.clazz\n        if not extendsNode clazz = cfg.tag\n            clazz = null\n            tag   = cfg.nodeName.toLowerCase() if isDom cfg\n            clazz = classMap[tag] if isString tag = tag or cfg.tag\n    clazz = clazz or Node.DEFAULT_CLASS\n    new clazz cfg\n\n\n\n\n#    000  000   000  000  000000000\n#    000  0000  000  000     000   \n#    000  000 0 000  000     000   \n#    000  000  0000  000     000   \n#    000  000   000  000     000   \n\ninit = (node) ->\n    if isNot cfg = node.render()\n        throw new Error \"A node can't be initialized with empty cfg.\"\n    switch true\n        when isSimple  cfg then initTextNode    node, node.cfg = text: cfg + ''\n        when isDom     cfg then initTagFromDom  node, null, cfg\n        when isDomText cfg then initTextFromDom node, null, cfg\n        else\n            tag = cfg.tag\n            switch true\n                when isNot     tag then initTextNode    node, cfg\n                when isString  tag then initTagNode     node, cfg\n                when isDom     tag then initTagFromDom  node, cfg, tag\n                when isDomText tag then initTextFromDom node, cfg, tag\n                else\n                    if extendsNode tag\n                        throw new Error \"A tag must be a string or a HTMLElement, you specified a Node class.\"\n                    throw new Error \"A tag must be a string or a HTMLElement.\"\n\n    domList.push node.view if Node.CHECK_DOM\n    node\n\n\n\n\ninitTextNode = (node, cfg) ->\n    text = cfg.text\n    text = text() if isFunc text\n    if not isSimple text\n        throw new Error \"The text for a text node must be a string, number or bool.\"\n    node.text = text\n    node.tag  = cfg.tag  = null\n    node.kind = Node.TEXT_KIND\n    node.view = document.createTextNode text\n    node\n\n\n\n\ninitTagNode = (node, cfg) ->\n    node.tag  = tag = cfg.tag\n    node.kind = Node.TAG_KIND\n    node.view = document.createElement tag\n    updateProps node, cfg\n    node\n\n\n\n\ninitTextFromDom = (node, cfg, dom) ->\n    checkDom dom if Node.CHECK_DOM\n    node.text = dom.nodeValue\n    node.tag  = null\n    node.kind = Node.TEXT_KIND\n    node.view = dom\n    if cfg\n        text = cfg.text\n        if not isNot text\n            text = text() if isFunc text\n            if not isSimple text\n                throw new Error \"The text for a text node must be a string, number or bool.\"\n            node.text = dom.nodeValue = text\n        else\n            cfg.text = node.text\n    else\n        node.cfg = text: node.text\n    node\n\n\n\n\ninitTagFromDom = (node, cfg, dom) ->\n    checkDom dom if Node.CHECK_DOM\n    node.tag  = dom.nodeName.toLowerCase()\n    node.kind = Node.TAG_KIND\n    node.view = dom\n    if cfg and isString(cfg.tag) and cfg.tag != node.tag\n        throw new Error \"A cfg and the dom element must have the same tag. Got #{cfg.tag} and #{node.tag}\"\n    cfg     = cfg or node.cfg = {}\n    cfg.tag = node.tag\n    updateProps node, cfg\n    node\n\n\n\n\n#     0000000  000   000  00000000   0000000  000   000        0000000     0000000   00     00\n#    000       000   000  000       000       000  000         000   000  000   000  000   000\n#    000       000000000  0000000   000       0000000          000   000  000   000  000000000\n#    000       000   000  000       000       000  000         000   000  000   000  000 0 000\n#     0000000  000   000  00000000   0000000  000   000        0000000     0000000   000   000\n\ncheckDom = (dom) ->\n    if domList.indexOf(dom) > -1\n        throw new Error 'Dom element already controlled by another node.'\n    domList.push dom\n\n\n\n\n#    00000000   00000000  00000000   00000000   0000000   00000000   00     00\n#    000   000  000       000   000  000       000   000  000   000  000   000\n#    00000000   0000000   0000000    000000    000   000  0000000    000000000\n#    000        000       000   000  000       000   000  000   000  000 0 000\n#    000        00000000  000   000  000        0000000   000   000  000   000\n\nperformUpdate = () ->\n\n\n\n\n#    000   000  00000000   0000000     0000000   000000000  00000000\n#    000   000  000   000  000   000  000   000     000     000     \n#    000   000  00000000   000   000  000000000     000     0000000 \n#    000   000  000        000   000  000   000     000     000     \n#     0000000   000        0000000    000   000     000     00000000\n\nupdate = (node) ->\n\n\n\n\nupdateKey = (node, name, value) ->\n\n\n\n\nupdateNow = (node) ->\n    cfg = node.render()\n\n\n\n\nupdateKeyNow = (node, name, value) ->\n\n\n\n\nupdateText = (node, cfg) ->\n    text = cfg.text\n    if not isNot text\n        text = text() if isFunc text\n        if not isSimple text\n            throw new Error \"The text for a text node must be a string, number or bool.\"\n    else\n        cfg.text = node.text\n\n\n\n\n\nupdateProps = (node, cfg) ->\n    #console.log 'updateProps: ', node, cfg\n    cfg     = cfg.render() if cfg instanceof Node\n    attrs   = node.attrs or node.attrs = {}\n    propMap = Object.assign {}, attrs, node.events, cfg\n\n    if propMap.hasOwnProperty 'className'\n        updateClass node, cfg.className\n\n    if propMap.hasOwnProperty 'style'\n        updateStyle node, cfg.style\n\n    if propMap.hasOwnProperty 'children'\n        updateChildren node, cfg.children\n\n    delete propMap.tag\n    delete propMap.clazz\n    delete propMap.__i__\n    delete propMap.keep\n    delete propMap.text\n    delete propMap.className\n    delete propMap.style\n    delete propMap.children\n    delete propMap.bindings\n\n    for name of propMap\n        attr  = attrs[name]\n        value = cfg[name]\n\n        if isBool(value) or (isNot(value) and isBool(attr))\n            updateBool node, value, name\n        else\n            if /^on/.test name\n                updateEvent node, value, name\n            else\n                value = value() if isFunc value\n                if isBool value\n                    updateBool node, value, name\n                else\n                    updateAttr node, value, name\n    node\n\n\n\n\n\n\n\n\n#     0000000   000000000  000000000  00000000    0000000\n#    000   000     000        000     000   000  000\n#    000000000     000        000     0000000    0000000\n#    000   000     000        000     000   000       000\n#    000   000     000        000     000   000  0000000\n\nupdateAttr = (node, value, name) ->\n    #console.log 'updateAttr: ', name, value, node.attrs[name], node.__id__\n    node.attrs[name] = node.view.getAttribute name\n    return if node.attrs[name] == value\n    view = node.view\n    if value != null and value != undefined\n        view.setAttribute name, value\n        view[name]       = value\n        node.attrs[name] = value\n    else\n        view.removeAttribute name\n        delete view[name]\n        delete node.attrs[name]\n    null\n\n\n\n\n#    0000000     0000000    0000000   000\n#    000   000  000   000  000   000  000\n#    0000000    000   000  000   000  000\n#    000   000  000   000  000   000  000\n#    0000000     0000000    0000000   0000000\n\nupdateBool = (node, value, name) ->\n    node.attrs[name] = node.view[name]\n    return if node.attrs[name] == value\n    view = node.view\n    if isNot value\n        view.removeAttribute name\n        view[name] = false\n        delete node.attrs[name]\n    else if  value == false\n        view.removeAttribute name\n        view[name]       = false\n        node.attrs[name] = false\n    else\n        view.setAttribute name, ''\n        view[name]       = true\n        node.attrs[name] = true\n    null\n\n\n\n\n#     0000000  000       0000000    0000000   0000000\n#    000       000      000   000  000       000\n#    000       000      000000000  0000000   0000000\n#    000       000      000   000       000       000\n#     0000000  0000000  000   000  0000000   0000000\n\nupdateClass = (node, value) ->\n    value = value() if isFunc value\n\n    node.attrs.className = node.view.className\n    return if node.attrs.className == value\n    if value\n        node.view.className  = value\n        node.attrs.className = value\n    else\n        node.view.className  = undefined\n        delete node.attrs.className\n    null\n\n\n\n\n#     0000000  000000000  000   000  000      00000000\n#    000          000      000 000   000      000\n#    0000000      000       00000    000      0000000\n#         000     000        000     000      000\n#    0000000      000        000     0000000  00000000\n\nupdateStyle = (node, style) ->\n    view  = node.view\n    attrs = node.attrs\n    sobj  = attrs.style\n\n    return if not view\n\n    style = style() if isFunc style\n\n    if isNot style\n        view.style.cssText = null\n        delete attrs.style\n\n    else if isString style\n        view.style.cssText = style\n        attrs.style        = style\n    else\n        css     = ''\n        sobj    = if isObject(sobj) then sobj else {}\n        changed = false\n        propMap = Object.assign {}, style, sobj\n        for name of propMap\n            value = style[name]\n            if value != sobj[name]\n                changed = true\n            sobj[name] = value\n            if isNot value\n                delete sobj[name]\n            else\n                prop  = normalizeName name\n                css  += prop + ': ' + value + '; '\n\n        if changed\n            if css.length\n                css                = css.slice 0, -1\n                view.style.cssText = css\n                attrs.style        = sobj\n            else\n                view.style.cssText = null\n                delete attrs.style\n    null\n\n\n\n\n#    00000000  000   000  00000000  000   000  000000000   0000000\n#    000       000   000  000       0000  000     000     000\n#    0000000    000 000   0000000   000 0 000     000     0000000\n#    000          000     000       000  0000     000          000\n#    00000000      0      00000000  000   000     000     0000000\n\nupdateEvent = (node, callback, name) ->\n    events    = node.events or node.events = {}\n    view      = node.view\n    type      = normalizeEvent name\n    listener  = events[name]\n\n    if isString callback\n        callback = node[name]\n\n    if listener != callback\n        if listener\n            view.removeEventListener(type, listener)\n            delete events[name]\n        if callback\n            view.addEventListener(type, callback)\n            events[name] = callback\n    null\n\n\nremoveEvents = (node) ->\n    events = node.events\n    return null if not events\n\n    view = node.view\n    for name, listener of events\n        type = normalizeEvent name\n        view.removeEventListener(type, listener) if listener\n        delete events[name]\n    node.events = null\n    null\n\n\n\n\n#     0000000  000   000  000  000      0000000    00000000   00000000  000   000\n#    000       000   000  000  000      000   000  000   000  000       0000  000\n#    000       000000000  000  000      000   000  0000000    0000000   000 0 000\n#    000       000   000  000  000      000   000  000   000  000       000  0000\n#     0000000  000   000  000  0000000  0000000    000   000  00000000  000   000\n\nupdateChildren = (node, cfgs) ->\n    #TODO: allow object as only child\n    children = node.children or node.children = []\n    cfgs     = cfgs() if isFunc cfgs\n    cfgs     = if isString(cfgs) then [cfgs] else cfgs or []\n    l        = if children.length > cfgs.length then children.length else cfgs.length\n    for i in [0...l]\n        child = children[i]\n        cfg   = cfgs[i]\n        cfg   = cfg() if isFunc cfg\n\n        if not child and not cfg\n            throw new Error \"DOM ERROR: either child or cfg at index #{i} must be defined. Got \" + child + ', ' + cfg\n        if not child\n            addChild node, cfg\n        else if not cfg\n            removeChild child\n        else\n            change child, cfg\n    children.length = cfgs.length\n    null\n\n\n\n\n#     0000000  000   000   0000000   000   000   0000000   00000000\n#    000       000   000  000   000  0000  000  000        000\n#    000       000000000  000000000  000 0 000  000  0000  0000000\n#    000       000   000  000   000  000  0000  000   000  000\n#     0000000  000   000  000   000  000   000   0000000   00000000\n\nchange = (node, cfg) ->\n    needsUpdate = node.needsUpdate()\n    canUpdate   = node.canUpdate(cfg)\n    if node == cfg or node.constructor == cfg.tag\n        updateProperties node, node.render() if needsUpdate and canUpdate\n        replaceChild     node, node.render() if needsUpdate and not canUpdate\n\n        # node don't wants to be updated\n\n    else if node.tag != cfg.tag or cfg instanceof Node\n        replaceChild node, cfg\n\n    else if node.tag == undefined # text node\n        updateText node, cfg\n\n    else if needsUpdate and canUpdate # tag node\n        updateProperties node, cfg\n\n    false\n\n\n\n\n#     0000000   0000000    0000000\n#    000   000  000   000  000   000\n#    000000000  000   000  000   000\n#    000   000  000   000  000   000\n#    000   000  0000000    0000000\n\naddChild = (node, cfg) ->\n    if cfg instanceof Node\n        child = cfg\n    else\n        child = create cfg, null, cfg.__i__ or node.__i__\n\n    cfg = child.render()\n    if not child.view\n        child.view = createView child, cfg\n\n    node.children.push child\n    node.view.appendChild child.view\n    child.parent = node\n    child.depth  = node.depth + 1\n\n    if isSimple(cfg) or (not cfg.tag and isSimple(cfg.text))\n        updateText child, cfg\n    else\n        updateProperties child, cfg\n\n    child.onMount()\n    null\n\n\n\n\n#    00000000   00000000  00     00   0000000   000   000  00000000\n#    000   000  000       000   000  000   000  000   000  000\n#    0000000    0000000   000000000  000   000   000 000   0000000\n#    000   000  000       000 0 000  000   000     000     000\n#    000   000  00000000  000   000   0000000       0      00000000\n\nremoveChild = (child) ->\n    #TODO: node.children currently not handled -> handled by changing node.children.length in updateChildren\n\n    #console.log 'removeChild: ', child, node\n\n    node = child.parent\n    view = child.view\n    disposeNode child\n    node.view.removeChild view\n    null\n\n\n\n\n#    00000000   00000000  00000000   000       0000000    0000000  00000000\n#    000   000  000       000   000  000      000   000  000       000\n#    0000000    0000000   00000000   000      000000000  000       0000000\n#    000   000  000       000        000      000   000  000       000\n#    000   000  00000000  000        0000000  000   000   0000000  00000000\n\nreplaceChild = (child, cfg) ->\n    #console.log 'ViewTree.replaceChild: ', child, cfg\n    node     = child.parent\n    children = node.children\n    i        = children.indexOf child\n    view     = child.view\n\n    disposeNode child\n\n    if cfg instanceof Node\n        child = cfg\n        cfg   = child.render()\n    else\n        child = create cfg, null, cfg.__i__ or node.__i__\n\n    cfg = child.render()\n    if not child.view\n        child.view = createView child, cfg\n\n    children[i]  = child\n    child.parent = node\n    child.depth  = node.depth + 1\n    node.view.replaceChild child.view, view\n\n    if isSimple(cfg) or (not cfg.tag and isSimple(cfg.text))\n        updateText child, cfg\n    else\n        updateProperties child, cfg\n\n    child.onMount()\n    #console.log 'DOM.replaceChild: create = ', child, cfg\n    null\n\n\n\n\n#    0000000    000   0000000  00000000    0000000    0000000  00000000\n#    000   000  000  000       000   000  000   000  000       000\n#    000   000  000  0000000   00000000   000   000  0000000   0000000\n#    000   000  000       000  000        000   000       000  000\n#    0000000    000  0000000   000         0000000   0000000   00000000\n\ndisposeNode = (node) ->\n    #console.log 'disposeNode: ', node\n    if node.onUnmount() != true\n\n        #console.log 'dispose node now: ', node\n        removeEvents node\n\n        if node.children and node.children.length\n            disposeNode child for child in node.children\n\n        delete node.children\n        delete node.view\n        delete nodeMap[node.__id__]\n\n    node.parent = null\n    node.depth  = undefined\n    null\n\n\n\n\n\n\n\n\nappend = (node, dom) ->\n    checkDom dom if Node.CHECK_DOM\n    dom.appendChild node.view\n\n\nbehind = (node, dom) ->\n    parent = dom.parentNode\n    next   = dom.nextSibling\n    checkDom parent if Node.CHECK_DOM\n    if next\n        parent.insertBefore node.view, next\n    else\n        parent.appendChild node.view\n\n\nbefore = (node, dom) ->\n    parent = dom.parentNode\n    checkDom parent if Node.CHECK_DOM\n    parent.insertBefore node.view, dom\n\n\nreplace = (node, dom) ->\n    parent = dom.parentNode\n    if Node.CHECK_DOM\n        checkDom parent\n        checkDom dom\n    parent.replaceChild node.view, dom\n\n\nremove = (node) ->\n    parent = node.view.parentNode\n    checkDom parent if Node.CHECK_DOM\n    parent.removeChild node.view\n\n\n\n\naddChild = (node, child) ->\naddChildAt = (node, child, index) ->\nremoveChild = (node, index) ->\nremoveChildAt = (node, index) ->\ndisposeNode = () ->\nclone = () ->\n\n\n\n\n\n\n\n\n#     0000000  000000000   0000000   000000000  000   0000000\n#    000          000     000   000     000     000  000     \n#    0000000      000     000000000     000     000  000     \n#         000     000     000   000     000     000  000     \n#    0000000      000     000   000     000     000   0000000\n\nNode.create      = create\nNode.map         = map\nNode.unmap       = unmap\n\nNode.append      = append\nNode.behind      = behind\nNode.before      = before\nNode.replace     = replace\nNode.remove      = remove\n\nNode.getOrCall   = getOrCall\nNode.isBool      = isBool\nNode.isNumber    = isNumber\nNode.isString    = isString\nNode.isObject    = isObject\nNode.isFunc      = isFunc\nNode.isDom       = isDom\nNode.isDomText   = isDomText\nNode.isNot       = isNot\nNode.isSimple    = isSimple\nNode.extendsNode = extendsNode\n\n\n\n\n\n\n\n\n#    00000000    0000000   00000000\n#    000   000  000   000  000\n#    0000000    000000000  000000\n#    000   000  000   000  000\n#    000   000  000   000  000\n\nif typeof window != 'undefined'\n    lastTime = 0\n    vendors  = ['webkit', 'moz']\n    for vendor in vendors\n        break if window.requestAnimationFrame\n        window.requestAnimationFrame = window[vendor + 'RequestAnimationFrame']\n        window.cancelAnimationFrame  = window[vendor + 'CancelAnimationFrame' ] or window[vendor + 'CancelRequestAnimationFrame']\n\n\n    if not window.requestAnimationFrame\n        window.requestAnimationFrame = (callback) ->\n            currTime   = Date.now()\n            timeToCall = Math.max 0, 16 - currTime + lastTime\n            rAF        = () -> callback currTime + timeToCall\n            id         = window.setTimeout rAF, timeToCall\n            lastTime   = currTime + timeToCall\n            id\n\n\n    if not window.cancelAnimationFrame\n        window.cancelAnimationFrame = (id) ->\n            clearTimeout id\n            null\n\n\n\n\n#     0000000    0000000   0000000  000   0000000   000   000\n#    000   000  000       000       000  000        0000  000\n#    000000000  0000000   0000000   000  000  0000  000 0 000\n#    000   000       000       000  000  000   000  000  0000\n#    000   000  0000000   0000000   000   0000000   000   000\n\nif typeof Object.assign == 'undefined'\n    Object.assign = (target, args...) ->\n        for src in args\n            for key of src\n                target[key] = src[key];\n        target\n\n\n\n\n#    00000000  000   000  00000000    0000000   00000000   000000000\n#    000        000 000   000   000  000   000  000   000     000   \n#    0000000     00000    00000000   000   000  0000000       000   \n#    000        000 000   000        000   000  000   000     000   \n#    00000000  000   000  000         0000000   000   000     000   \n\nif typeof module != 'undefined'\n    module.exports = Node\nif typeof window != 'undefined'\n    window.Node = Node\nelse\n    this.Node = Node\n"]}}]}