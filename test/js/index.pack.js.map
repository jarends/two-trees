{"version":3,"file":"index.pack.js","sourceRoot":"","sources":["index.pack.js"],"sections":[{"offset":{"line":186,"column":0},"map":{"version":3,"file":"index.js","sourceRoot":"","sources":["../coffee/index.coffee"],"names":[],"mappings":";AAAA;EAAA,OAAA,CAAQ,YAAR;AAAA","sourcesContent":["require './tree-one'"]}},{"offset":{"line":197,"column":0},"map":{"version":3,"file":"tree-one.js","sourceRoot":"","sources":["../coffee/tree-one.coffee"],"names":[],"mappings":";AAAA;AAAA,MAAA;;EAAA,OAAA,GAAU,OAAA,CAAQ,uBAAR;;EAEV,QAAA,CAAS,SAAT,EAAoB,SAAA;WAChB,QAAA,CAAS,QAAT,EAAmB,SAAA;aACf,EAAA,CAAG,sBAAH,EAA2B,SAAA;eAEvB,MAAM,CAAC,KAAP,CAAa,CAAb,EAAgB,CAAhB;MAFuB,CAA3B;IADe,CAAnB;EADgB,CAApB;AAFA","sourcesContent":["TreeOne = require '../../src/js/tree-one'\n\ndescribe 'TreeOne', () ->\n    describe 'render', () ->\n        it 'should render a view', () ->\n            #console.log 'TreeOne: ', TreeOne\n            assert.equal(0, 0)\n            #throw new Error 'something went wrong'\n\n"]}},{"offset":{"line":218,"column":0},"map":{"version":3,"file":"../../src/js/tree-one.js","sourceRoot":"","sources":["../../src/coffee/tree-one.coffee"],"names":[],"mappings":"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","sourcesContent":["__id__ = 0\n\n\nisBool   = (value) -> typeof value == 'boolean'\nisNumber = (value) -> typeof value == 'number'\nisString = (value) -> typeof value == 'string' or value == value + ''\nisObject = (value) -> typeof value == 'object'\nisFunc   = (value) -> typeof value == 'function'\nisHTML   = (value) -> value instanceof HTMLElement\nisNot    = (value) -> value == null or value == undefined\nisSimple = (value) ->\n    t = typeof value\n    t == 'string' or t == 'number' or t == 'boolean' or value == value + '' or value == true or value == false or not isNaN value\n\n\n\n\nnormalizeName = (name) ->\n    name.replace /[A-Z]/g, (name) ->\n        '-' + name.toLowerCase()\n\n\n\n\nnormalizeEvent = (type) ->\n    type = type.slice 2\n    type.charAt(0).toLowerCase() + normalizeName type.slice(1)\n\n\n\n\nthrowCfgError = (cfg) ->\n    throw new Error 'TreeOne ERROR: cfg must be either a string or an object containing a tag property as string. cfg = ' + getCfgJson cfg\n\n\n\n\ngetCfgJson = (cfg) ->\n    try\n        c = JSON.stringify cfg\n    catch\n    c + ''\n\n\n\n\n###\n    cfg =\n        tag:\n        style:\n        className:\n        children:\n        event handlers starting with 'on'\n\n###\n\n\n\n\n\nclass Node\n\n\n    constructor: (@cfg) ->\n        nodeMap[@id = ++__id__] = @\n\n\n    dispose: () ->\n        if @children and @children.length\n            child.dipose() for child in @children\n        delete nodeMap[@id]\n        null\n\n\n    onMount:   () ->\n        if @children and @children.length\n            child.onMount() for child in @children\n        null\n\n\n    onUnmount: () ->\n        if @children and @children.length\n            child.onUnmount() for child in @children\n        null\n\n\n    needsUpdate: () -> true\n    canUpdate:   () -> true\n    update:      () -> update @\n    render:      () -> @cfg\n\n\n    onAdded:   () ->\n        if @children and @children.length\n            child.onAdded() for child in @children\n\n\n    onRemoved: () ->\n        if @children and @children.length\n            child.onRemoved() for child in @children\n\n\n    add:       (child) ->\n    addAt:     (child, index) ->\n    remove:    (child) ->\n    removeAt:  (index) ->\n\n\n\n\n\n\ntagMap     = {}\nrootMap    = {}\nnodeMap    = {}\ndirtyMap   = {}\ndirty      = false\nrafTimeout = null\n\n\n\nmap = (tag, clazz, overwrite = false) ->\n    if isNot(tagMap[tag]) or overwrite\n        tagMap[tag] = clazz\n    null\n\n\n\n\nunmap = (tag) ->\n    delete tagMap[tag]\n    null\n\n\n\n\ncreate = (cfg, root = null) ->\n    #console.log 'TreeOne.create: ', cfg, root\n    throwCfgError(cfg) if isNot cfg\n    if isSimple cfg\n        clazz = Node\n    else\n        throwCfgError(cfg) if not isString cfg.tag\n        clazz = tagMap[cfg.tag] or Node\n\n    node      = new clazz cfg\n    node.view = createView node.render(), node\n    render(node, root) if root != null\n    node\n\n\n\n\nrender = (node, root) ->\n    #console.log 'TreeOne.render: ', node, root\n    cfg = node.render()\n    if not node.view\n        node.view = createView cfg, node\n\n    root.appendChild(node.view)\n\n    if isSimple cfg\n        updateText node, cfg\n    else\n        updateProperties node, cfg\n    null\n\n\n\n\nremove = (nodeOrRoot) ->\n\n\n\n\nupdate = (node) ->\n    id = node?.id\n    if not id\n        throw new Error \"DOM ERROR: can't update node. Node doesn't exist. cfg = \" + getCfgJson(node?.cfg or null)\n        return\n\n    if not dirty\n        window.cancelAnimationFrame rafTimeout\n        rafTimeout = window.requestAnimationFrame updateNow\n\n    dirtyMap[id] = true\n    dirty        = true\n    null\n\n\n\n\nupdateNow = () ->\n    window.cancelAnimationFrame rafTimeout\n    dirty = false\n    #TODO: sort by depth to update top down\n    nodes = []\n    nodes.push(nodeMap[id]) for id of dirtyMap\n    nodes.sort (a, b) -> a.depth - b.depth\n    for node in nodes\n        continue if not node\n        delete dirtyMap[node.id]\n        cfg = node.render()\n        #TODO: This removes a component if the kind swaps between text and tag or between different tags. Maybe we can keep the component somehow!!!\n        #TODO: Maybe ask the component, if it wants to be updated or replaced (like change method does)\n        #TODO: We definitly want to keep the component!!!\n        if node.tag != cfg.tag\n            replaceChild node, cfg\n        else\n            updateProperties node, cfg\n    null\n\n\n\n\n\ncreateView = (cfg, node) ->\n    throwCfgError(cfg) if isNot cfg\n    if isSimple cfg\n        node.tag = undefined\n        return document.createTextNode(cfg + '')\n    throwCfgError(cfg) if not isString tag = cfg.tag\n    node.tag = tag\n    document.createElement tag\n\n\n\n\nupdateText = (node, cfg) ->\n    if node.cfg != cfg\n        node.cfg            = cfg\n        node.view.nodeValue = cfg + ''\n    null\n\n\n\n\nupdateProperties = (node, cfg) ->\n    attrs   = node.attrs or node.attrs = {}\n    propMap = Object.assign {}, node.attrs, node.events, cfg\n    delete propMap.tag\n    delete propMap.children\n    delete propMap.style\n    delete propMap.className\n\n    for name of propMap\n        attr  = attrs[name]\n        value = cfg[name]\n        if isBool(attr) or isBool(value)\n            updateBool node, value, name\n        else\n            if /^on/.test name\n                updateEvent node, value, name\n            else\n                updateAttr node, value, name\n\n    if attrs.className or cfg.className\n        updateClass node, value\n\n    if attrs.style or cfg.style\n        updateStyle node, cfg.style\n\n    if attrs.children or cfg.children\n        updateChildren node, cfg.children\n\n    null\n\n\n\n\n\n\n\n#     0000000   000000000  000000000  00000000    0000000\n#    000   000     000        000     000   000  000\n#    000000000     000        000     0000000    0000000\n#    000   000     000        000     000   000       000\n#    000   000     000        000     000   000  0000000\n\nupdateAttr = (node, value, name) ->\n    return if node.attrs[name] == value\n    if value != null and value != undefined\n        node.view.setAttribute name, value\n        node.view[name]  = value\n        node.attrs[name] = value\n    else\n        node.view.removeAttribute name\n        delete node.view[name]\n        delete node.attrs[name]\n    null\n\n\n\n\n#     0000000  000       0000000    0000000   0000000\n#    000       000      000   000  000       000\n#    000       000      000000000  0000000   0000000\n#    000       000      000   000       000       000\n#     0000000  0000000  000   000  0000000   0000000\n\nupdateClass = (node, value) ->\n    return if node.attrs.className == value\n    if value\n        node.view.setAttribute 'class', value\n        node.attrs.className = value\n    else\n        node.view.removeAttribute 'class'\n        delete node.attrs.className\n    null\n\n\n\n\n#     0000000  000000000  000   000  000      00000000\n#    000          000      000 000   000      000\n#    0000000      000       00000    000      0000000\n#         000     000        000     000      000\n#    0000000      000        000     0000000  00000000\n\nupdateStyle = (node, style) ->\n    view  = node.view\n    attrs = node.attrs\n    sobj  = attrs.style\n\n    if isNot style\n        view.style.cssText = null\n        delete attrs.style\n\n    else if isString style\n        view.style.cssText = style\n        attrs.style        = style\n    else\n        css     = ''\n        sobj    = if isObject(sobj) then sobj else {}\n        changed = false\n        propMap = Object.assign {}, style, sobj\n        for name of propMap\n            value = style[name]\n            if value != sobj[name]\n                changed = true\n            sobj[name] = value\n            if isNot value\n                delete sobj[name]\n            else\n                prop  = normalizeName name\n                css  += prop + ': ' + value + '; '\n\n        if changed\n            if css.length\n                css                = css.slice 0, -1\n                view.style.cssText = css\n                attrs.style        = sobj\n            else\n                view.style.cssText = null\n                delete attrs.style\n    null\n\n\n\n\n#    0000000     0000000    0000000   000\n#    000   000  000   000  000   000  000\n#    0000000    000   000  000   000  000\n#    000   000  000   000  000   000  000\n#    0000000     0000000    0000000   0000000\n\nupdateBool = (node, value, name) ->\n    return if node.attrs[name] == value\n    view = node.view\n    if isNot value\n        view.removeAttribute name\n        delete node.attrs[name]\n    else\n        node.attrs[name] = value\n        if value\n            view.setAttribute name, ''\n            view[name] = true\n        else\n            view.removeAttribute name\n            view[name] = false\n    null\n\n\n\n\n#    00000000  000   000  00000000  000   000  000000000   0000000\n#    000       000   000  000       0000  000     000     000\n#    0000000    000 000   0000000   000 0 000     000     0000000\n#    000          000     000       000  0000     000          000\n#    00000000      0      00000000  000   000     000     0000000\n\nupdateEvent = (node, callback, name) ->\n    events    = node.events or node.events = {}\n    view      = node.view\n    type      = normalizeEvent name\n    listener  = events[name]\n\n    if isString callback\n        callback = node[name]\n\n    if listener != callback\n        if listener\n            view.removeEventListener(type, listener)\n            delete events[name]\n        if callback\n            view.addEventListener(type, callback)\n            events[name] = callback\n    null\n\n\nremoveEvents = (node) ->\n    events = node.events\n    return null if not events\n\n    view = node.view\n    for name, listener of events\n        type = normalizeEvent name\n        view.removeEventListener(type, listener) if listener\n        delete events[name]\n    node.events = null\n    null\n\n\n\n\n#     0000000  000   000  000  000      0000000    00000000   00000000  000   000\n#    000       000   000  000  000      000   000  000   000  000       0000  000\n#    000       000000000  000  000      000   000  0000000    0000000   000 0 000\n#    000       000   000  000  000      000   000  000   000  000       000  0000\n#     0000000  000   000  000  0000000  0000000    000   000  00000000  000   000\n\nupdateChildren = (node, cfgs) ->\n    children = node.children or node.children = []\n    cfgs     = if isString(cfgs) then [cfgs] else cfgs or []\n    l        = if children.length > cfgs.length then children.length else cfgs.length\n    for i in [0...l]\n        child = children[i]\n        cfg   = cfgs[i]\n\n        if not child and not cfg\n            throw new Error \"DOM ERROR: either child or cfg at index #{i} must be defined. Got \" + child + ', ' + cfg\n        if not child\n            addChild node, cfg\n        else if not cfg\n            removeChild child\n        else\n            change child, cfg\n    children.length = cfgs.length\n    null\n\n\n\n\n#     0000000  000   000   0000000   000   000   0000000   00000000\n#    000       000   000  000   000  0000  000  000        000\n#    000       000000000  000000000  000 0 000  000  0000  0000000\n#    000       000   000  000   000  000  0000  000   000  000\n#     0000000  000   000  000   000  000   000   0000000   00000000\n\nchange = (node, cfg) ->\n    if node == cfg\n        if node.canUpdate() and node.needsUpdate()\n            updateProperties node, cfg\n        else\n            replaceChild node, cfg\n\n    else if node.tag != cfg.tag\n        replaceChild node, cfg\n\n    else if node.tag == undefined # text node\n        updateText node, cfg\n\n    else if node.canUpdate() and node.needsUpdate()\n        updateProperties node, cfg\n\n    false\n\n\n\n\n#     0000000   0000000    0000000\n#    000   000  000   000  000   000\n#    000000000  000   000  000   000\n#    000   000  000   000  000   000\n#    000   000  0000000    0000000\n\naddChild = (node, cfg) ->\n    if cfg instanceof Node\n        child = node\n    else\n        child = create cfg\n\n    if not child.view\n        child.view = createView cfg, child\n\n    node.children.push child\n    node.view.appendChild child.view\n    child.parent = node\n    if isSimple cfg\n        updateText child, cfg\n    else\n        updateProperties child, cfg\n\n    child.onMount()\n    null\n\n\n\n\n#    00000000   00000000  00     00   0000000   000   000  00000000\n#    000   000  000       000   000  000   000  000   000  000\n#    0000000    0000000   000000000  000   000   000 000   0000000\n#    000   000  000       000 0 000  000   000     000     000\n#    000   000  00000000  000   000   0000000       0      00000000\n\nremoveChild = (child) ->\n    node = child.parent\n    disposeNode child\n    node.view.removeChild child.view\n    null\n\n\n\n\n#    00000000   00000000  00000000   000       0000000    0000000  00000000\n#    000   000  000       000   000  000      000   000  000       000\n#    0000000    0000000   00000000   000      000000000  000       0000000\n#    000   000  000       000        000      000   000  000       000\n#    000   000  00000000  000        0000000  000   000   0000000  00000000\n\nreplaceChild = (child, cfg) ->\n    consol.log 'TreeOne.replaceChild: ', child, cfg\n    node     = child.parent\n    children = node.children\n    i        = children.indexOf child\n    view     = child.view\n\n    disposeNode child\n\n    if cfg instanceof Node\n        child = cfg\n    else\n        child = create cfg\n\n    if not child.view\n        child.view = createView cfg, child\n\n    children[i]  = child\n    child.parent = node\n    node.view.replaceChild child.view, view\n\n    if isSimple cfg\n        updateText child, cfg\n    else\n        updateProperties child, cfg\n\n    child.onMount()\n    #console.log 'DOM.replaceChild: create = ', child, cfg\n    null\n\n\n\n\n#    0000000    000   0000000  00000000    0000000    0000000  00000000\n#    000   000  000  000       000   000  000   000  000       000\n#    000   000  000  0000000   00000000   000   000  0000000   0000000\n#    000   000  000       000  000        000   000       000  000\n#    0000000    000  0000000   000         0000000   0000000   00000000\n\ndisposeNode = (node) ->\n    delete nodeMap[node.id]\n\n    removeEvents node\n\n    if node.children and node.children.length\n        disposeNode(child) for child in node.children\n\n    null\n\n\n\n\n\n\n\n\n#    00000000    0000000   00000000\n#    000   000  000   000  000\n#    0000000    000000000  000000\n#    000   000  000   000  000\n#    000   000  000   000  000\n\nif typeof window != 'undefined'\n    lastTime = 0\n    vendors  = ['webkit', 'moz']\n    for vendor in vendors\n        break if window.requestAnimationFrame\n        window.requestAnimationFrame = window[vendor + 'RequestAnimationFrame']\n        window.cancelAnimationFrame  = window[vendor + 'CancelAnimationFrame' ] or window[vendor + 'CancelRequestAnimationFrame']\n\n\n    if not window.requestAnimationFrame\n        window.requestAnimationFrame = (callback) ->\n            currTime   = new Date().getTime()\n            timeToCall = Math.max 0, 16 - currTime + lastTime\n            rAF        = () -> callback currTime + timeToCall\n            id         = window.setTimeout rAF, timeToCall\n            lastTime   = currTime + timeToCall\n            id\n\n\n    if not window.cancelAnimationFrame\n        window.cancelAnimationFrame = (id) ->\n            clearTimeout id\n            null\n\n\n\n\n#     0000000    0000000   0000000  000   0000000   000   000\n#    000   000  000       000       000  000        0000  000\n#    000000000  0000000   0000000   000  000  0000  000 0 000\n#    000   000       000       000  000  000   000  000  0000\n#    000   000  0000000   0000000   000   0000000   000   000\n\nif typeof Object.assign == 'undefined'\n    Object.assign = (target, args...) ->\n        for src in args\n            for key of src\n                target[key] = src[key];\n        target\n\n\n\n\n\n\n\n\nTreeOne =\n    Node:      Node\n    map:       map\n    unmap:     unmap\n    create:    create\n    render:    render\n    remove:    remove\n    update:    update\n    updateNow: updateNow\n\n\n\nif typeof module != 'undefined'\n    module.exports = TreeOne\nif typeof window != 'undefined'\n    window.TreeOne = TreeOne\nelse\n    this.TreeOne = TreeOne"]}}]}