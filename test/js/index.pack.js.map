{"version":3,"file":"index.pack.js","sourceRoot":"","sources":["index.pack.js"],"sections":[{"offset":{"line":186,"column":0},"map":{"version":3,"file":"index.js","sourceRoot":"","sources":["../coffee/index.coffee"],"names":[],"mappings":";AAAA;EAAA,OAAA,CAAQ,aAAR;AAAA","sourcesContent":["require './view-node'"]}},{"offset":{"line":197,"column":0},"map":{"version":3,"file":"view-node.js","sourceRoot":"","sources":["../coffee/view-node.coffee"],"names":[],"mappings":"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","sourcesContent":["Node  = require '../../src/js/view-node'\nutils = require '../../src/js/utils'\n\ngetTag  = (tag)  -> document.createElement  tag\ngetText = (text) -> document.createTextNode text\n\nclass MyValidNode extends Node\n    render: () -> tag: 'div'\n\nclass MyTextNode1 extends Node\n    render: () -> 'text'\n\nclass MyTextNode2 extends Node\n    render: () -> text: 'text'\n\nclass MyExtendedNode extends Node\n\n\nexpectClass   = (node, clazz) -> expect(node.constructor).to.equal clazz\nexpectExtends = (node, clazz) -> expect(node).to.be.instanceof clazz\n\n\nexpectTextNode = (node, clazz, text) ->\n    expectClass   node, clazz\n    expectExtends node.view, Text\n    expect(node.kind).to.equal Node.TEXT_KIND\n    expect(node.view.nodeValue).to.equal text + ''\n    expect(node.text).to.equal text\n\nexpectTagNode = (node, clazz, tag) ->\n    expectClass   node, clazz\n    expectExtends node.view, HTMLElement\n    expect(node.kind).to.equal Node.TAG_KIND\n    expect(node.view.nodeName.toLowerCase()).to.equal tag\n    expect(node.tag).to.equal tag\n\nexpectAttr = (node, name, value) ->\n    expectExtends node.view, HTMLElement\n    expect(node.kind).to.equal Node.TAG_KIND\n    expect(node.attrs[name]).to.equal value = utils.getOrCall value\n    expect(node.view.getAttribute(name)).to.equal value + ''\n\n\nexpectBoolAttr = (node, name, value) ->\n    expectExtends node.view, HTMLElement\n    expect(node.attrs[name]).to.equal value = utils.getOrCall value\n    if value == true\n        expect(node.view.getAttribute(name)).to.equal ''\n        expect(node.view[name]).to.equal value\n    else\n        expect(node.view.getAttribute(name)).to.equal null\n        expect(node.view[name]).to.equal value\n\n\n\n\n\n\n\n\n#     0000000  00000000   00000000   0000000   000000000  00000000\n#    000       000   000  000       000   000     000     000\n#    000       0000000    0000000   000000000     000     0000000\n#    000       000   000  000       000   000     000     000\n#     0000000  000   000  00000000  000   000     000     00000000\n\ndescribe 'Node', () ->\n\n    describe '.create', () ->\n\n        it \"should return a valid text node, if cfg = 'text'\", () ->\n            expectTextNode Node.create('text'), Node, 'text'\n\n        it \"should return a valid text node, if cfg = Text\", () ->\n            expectTextNode Node.create(getText('text')), Node, 'text'\n\n        it \"should return a valid text node, if cfg.text = 'text'\", () ->\n            expectTextNode Node.create(text: 'text'), Node, 'text'\n\n        it \"should return a valid text node, if cfg.tag = Text\", () ->\n            expectTextNode Node.create(tag: getText('text')), Node, 'text'\n\n        it \"should return a valid text node, if cfg.clazz = MyTextNode1\", () ->\n            expectTextNode Node.create(clazz: MyTextNode1), MyTextNode1, 'text'\n\n        it \"should return a valid text node, if cfg.clazz = MyTextNode2\", () ->\n            expectTextNode Node.create(clazz: MyTextNode2), MyTextNode2, 'text'\n\n        it \"should return a valid tag node, if cfg = HTMLELement\", () ->\n            expectTagNode Node.create(getTag('div')), Node, 'div'\n\n        it \"should return a valid tag node, if cfg.tag = 'div'\", () ->\n            expectTagNode Node.create(tag:'div'), Node, 'div'\n\n        it \"should return a valid tag node, if cfg.tag = HTMLELement\", () ->\n            expectTagNode Node.create(tag: getTag('div')), Node, 'div'\n\n        it \"should return a valid tag node, if cfg.tag = MyValidNode\", () ->\n            expectTagNode Node.create(tag: MyValidNode), MyValidNode, 'div'\n\n        it \"should return a valid tag node, if cfg.clazz = MyValidNode\", () ->\n            expectTagNode Node.create(clazz: MyValidNode), MyValidNode, 'div'\n\n        it \"should throw an error, if cfg = null\", () ->\n            expect(() -> Node.create()).to.throw()\n\n        it \"should throw an error, if neither tag nor text are set\", () ->\n            expect(() -> Node.create()).to.throw()\n\n        it \"should throw an error, if cfg.tag = MyExtendedNode\", () ->\n            expect(() -> Node.create(tag: MyExtendedNode)).to.throw()\n\n        it \"should throw an error, if cfg.tag is invalid\", () ->\n            expect(() -> Node.create(tag: 1)).to.throw()\n            expect(() -> Node.create(tag: true)).to.throw()\n            expect(() -> Node.create(tag: {})).to.throw()\n            expect(() -> Node.create(tag: [])).to.throw()\n            expect(() -> Node.create(tag: () ->)).to.throw()\n\n        it \"should throw an error, if cfg.text is invalid\", () ->\n            expect(() -> Node.create(text: null)).to.throw()\n            expect(() -> Node.create(text: {})).to.throw()\n            expect(() -> Node.create(text: [])).to.throw()\n            expect(() -> Node.create(text: () ->)).to.throw()\n            expect(() -> Node.create(text: () -> {})).to.throw()\n            expect(() -> Node.create(text: () -> [])).to.throw()\n\n        it \"should throw an error, if cfg.clazz = MyExtendedNode, because neither tag nor text are set\", () ->\n            expect(() -> Node.create(clazz: MyExtendedNode)).to.throw()\n\n        it \"should not throw an error, if cfg.clazz = MyExtendedNode and tag = 'div'\", () ->\n            Node.create({tag: 'div', clazz: MyExtendedNode})\n            expect(() -> Node.create({tag: 'div', clazz: MyExtendedNode})).to.not.throw()\n\n        it \"should not throw an error, if cfg.clazz = MyExtendedNode and text = ''\", () ->\n            expect(() -> Node.create({text: '', clazz: MyExtendedNode})).to.not.throw()\n\n        it \"should not throw an error, if cfg.text is valid\", () ->\n            expect(() -> expectTextNode Node.create(text: ''),         Node, '')  .to.not.throw()\n            expect(() -> expectTextNode Node.create(text: 1),          Node, 1)   .to.not.throw()\n            expect(() -> expectTextNode Node.create(text: true),       Node, true).to.not.throw()\n            expect(() -> expectTextNode Node.create(text: () -> ''),   Node, '')  .to.not.throw()\n            expect(() -> expectTextNode Node.create(text: () -> 1),    Node, 1)   .to.not.throw()\n            expect(() -> expectTextNode Node.create(text: () -> true), Node, true).to.not.throw()\n\n\n\n\n#    000   000  00000000  000   000        000   000   0000000   0000000    00000000\n#    0000  000  000       000 0 000        0000  000  000   000  000   000  000\n#    000 0 000  0000000   000000000        000 0 000  000   000  000   000  0000000\n#    000  0000  000       000   000        000  0000  000   000  000   000  000\n#    000   000  00000000  00     00        000   000   0000000   0000000    00000000\n\ndescribe 'new Node', () ->\n\n    describe 'init', () ->\n\n        it \"should return a valid text node, if cfg = 'text'\", () ->\n            expectTextNode new Node('text'), Node, 'text'\n\n        it \"should return a valid text node, if cfg = Text\", () ->\n            expectTextNode new Node(getText('text')), Node, 'text'\n\n        it \"should return a valid text node, if cfg.text = 'text'\", () ->\n            expectTextNode new Node(text: 'text'), Node, 'text'\n\n        it \"should return a valid text node, if cfg.tag = Text\", () ->\n            expectTextNode new Node(tag: getText('text')), Node, 'text'\n\n        it \"should return a valid tag node, if cfg = HTMLELement\", () ->\n            expectTagNode new Node(getTag('div')), Node, 'div'\n\n        it \"should return a valid tag node, if cfg.tag = 'div'\", () ->\n            expectTagNode new Node(tag:'div'), Node, 'div'\n\n        it \"should return a valid tag node, if cfg.tag = HTMLELement\", () ->\n            expectTagNode new Node(tag: getTag('div')), Node, 'div'\n\n    describe 'init error', () ->\n        it \"should throw an error, if cfg = null\", () ->\n            expect(() -> new Node()).to.throw()\n\n        it \"should throw an error, if neither tag nor text are set\", () ->\n            expect(() -> new Node {}).to.throw()\n\n        it \"should throw an error, if cfg.tag is invalid\", () ->\n            expect(() -> new Node tag: 1).to.throw()\n            expect(() -> new Node tag: true).to.throw()\n            expect(() -> new Node tag: {}).to.throw()\n            expect(() -> new Node tag: []).to.throw()\n            expect(() -> new Node tag: () ->).to.throw()\n            expect(() -> new Node tag: Node).to.throw()\n\n        it \"should throw an error, if cfg.text is invalid\", () ->\n            expect(() -> new Node text: null).to.throw()\n            expect(() -> new Node text: {}).to.throw()\n            expect(() -> new Node text: []).to.throw()\n            expect(() -> new Node text: () ->).to.throw()\n            expect(() -> new Node text: () -> {}).to.throw()\n            expect(() -> new Node text: () -> []).to.throw()\n\n        it \"should not throw an error, if cfg.text is valid\", () ->\n            expect(() -> expectTextNode new Node(text: ''),         Node, '')   .to.not.throw()\n            expect(() -> expectTextNode new Node(text: 1),          Node, 1)   .to.not.throw()\n            expect(() -> expectTextNode new Node(text: true),       Node, true).to.not.throw()\n            expect(() -> expectTextNode new Node(text: () -> ''),   Node, '')  .to.not.throw()\n            expect(() -> expectTextNode new Node(text: () -> 1),    Node, 1)   .to.not.throw()\n            expect(() -> expectTextNode new Node(text: () -> true), Node, true).to.not.throw()\n\n    describe 'with attr', () ->\n\n        it \"should create a attr title = 'my title'\", () ->\n            cfg = tag: 'div', title: 'my title'\n            expectTagNode node = new Node(cfg), Node, 'div'\n            expectAttr node, 'title', 'my title'\n\n    describe 'with bool', () ->\n\n        it \"should create a bool attr disabled = true\", () ->\n            cfg = tag: 'div', disabled: true\n            expectTagNode node = new Node(cfg), Node, 'div'\n            expectBoolAttr node, 'disabled', true\n\n        it \"should create a bool attr disabled = false\", () ->\n            cfg = tag: 'div', disabled: false\n            expectTagNode node = new Node(cfg), Node, 'div'\n            expectBoolAttr node, 'disabled', false\n\n        it \"should remove a bool attr disabled = undefined\", () ->\n            cfg = tag: 'div', disabled: undefined\n            expectTagNode node = new Node(cfg), Node, 'div'\n            expectBoolAttr node, 'disabled', undefined\n\n    describe 'with tag children', () ->\n\n        it \"should add a child tag node if children = [tag: 'div']\", () ->\n            cfg = tag: 'div', children: [tag: 'div']\n            expectTagNode node = new Node(cfg), Node, 'div'\n            expectTagNode node.children[0], Node, 'div'\n\n        it \"should add a child tag node with class MyExtendedNode if children = [{tag: 'div', clazz:MyExtendedNode}]\", () ->\n            cfg = tag: 'div', children: [{tag: 'div', clazz:MyExtendedNode}]\n            expectTagNode node = new Node(cfg), Node, 'div'\n            expectTagNode node.children[0], MyExtendedNode, 'div'\n\n        it \"should add a child tag node if children = [HTMLElement]\", () ->\n            cfg = tag: 'div', children: [getTag 'div']\n            expectTagNode node = new Node(cfg), Node, 'div'\n            expectTagNode node.children[0], Node, 'div'\n\n        it \"should add a child tag node if children = [tag:HTMLElement]\", () ->\n            cfg = tag: 'div', children: [tag:getTag 'div']\n            expectTagNode node = new Node(cfg), Node, 'div'\n            expectTagNode node.children[0], Node, 'div'\n\n        it \"should add a child tag node with class MyExtendedNode if children = [{tag: HTMLElement, clazz:MyExtendedNode}]\", () ->\n            cfg = tag: 'div', children: [{tag: getTag('div'), clazz:MyExtendedNode}]\n            expectTagNode node = new Node(cfg), Node, 'div'\n            expectTagNode node.children[0], MyExtendedNode, 'div'\n\n    describe 'with tag child', () ->\n        it \"should add a child tag node if child = tag: 'div'\", () ->\n            cfg = tag: 'div', child: tag: 'div'\n            expectTagNode node = new Node(cfg), Node, 'div'\n            expectTagNode node.children[0], Node, 'div'\n\n        it \"should add a child tag node if child = HTMLElement\", () ->\n            cfg = tag: 'div', child: getTag 'div'\n            expectTagNode node = new Node(cfg), Node, 'div'\n            expectTagNode node.children[0], Node, 'div'\n\n        it \"should add a child tag node if child = tag: HTMLElement\", () ->\n            cfg = tag: 'div', child: tag: getTag 'div'\n            expectTagNode node = new Node(cfg), Node, 'div'\n            expectTagNode node.children[0], Node, 'div'\n\n     describe 'with text children', () ->\n\n        it \"should add a child text node if children = 'my text'\", () ->\n            cfg = tag: 'div', children: 'my text'\n            expectTagNode node = new Node(cfg), Node, 'div'\n            expectTextNode node.children[0], Node, 'my text'\n\n        it \"should add a child text node if children = ['my text']\", () ->\n            cfg = tag: 'div', children: ['my text']\n            expectTagNode node = new Node(cfg), Node, 'div'\n            expectTextNode node.children[0], Node, 'my text'\n\n        it \"should add a child text node if children = [Text]\", () ->\n            cfg = tag: 'div', children: [getText 'my text']\n            expectTagNode node = new Node(cfg), Node, 'div'\n            expectTextNode node.children[0], Node, 'my text'\n\n        it \"should add a child text node if children = [text:'my text']\", () ->\n            cfg = tag: 'div', children: [text:'my text']\n            expectTagNode node = new Node(cfg), Node, 'div'\n            expectTextNode node.children[0], Node, 'my text'\n\n        it \"should add a child text node with class MyExtendedNode if children = [{text:'my text', clazz:MyExtendedNode}]\", () ->\n            cfg = tag: 'div', children: [text:'my text', clazz:MyExtendedNode]\n            expectTagNode node = new Node(cfg), Node, 'div'\n            expectTextNode node.children[0], MyExtendedNode, 'my text'\n\n        it \"should add a child text node with class MyExtendedNode if children = [{tag:Text, clazz:MyExtendedNode}]\", () ->\n            cfg = tag: 'div', children: [tag:getText('my text'), clazz:MyExtendedNode]\n            expectTagNode node = new Node(cfg), Node, 'div'\n            expectTextNode node.children[0], MyExtendedNode, 'my text'\n\n    describe 'with text', () ->\n\n        it \"should add a child text node if text = 'my text'\", () ->\n            cfg = tag: 'div', text: 'my text'\n            expectTagNode node = new Node(cfg), Node, 'div'\n            expectTextNode node.children[0], Node, 'my text'\n\n        it \"should add a child text node if text = Text\", () ->\n            cfg = tag: 'div', text: getText 'my text'\n            expectTagNode node = new Node(cfg), Node, 'div'\n            expectTextNode node.children[0], Node, 'my text'\n\n    describe 'with text child', () ->\n\n        it \"should add a child text node if child = 'my text'\", () ->\n            cfg = tag: 'div', child: 'my text'\n            expectTagNode node = new Node(cfg), Node, 'div'\n            expectTextNode node.children[0], Node, 'my text'\n\n        it \"should add a child text node if child = text:'my text'\", () ->\n            cfg = tag: 'div', child: text: 'my text'\n            expectTagNode node = new Node(cfg), Node, 'div'\n            expectTextNode node.children[0], Node, 'my text'\n\n        it \"should add a child text node if child = Text\", () ->\n            cfg = tag: 'div', child: getText 'my text'\n            expectTagNode node = new Node(cfg), Node, 'div'\n            expectTextNode node.children[0], Node, 'my text'\n\n        it \"should add a child text node if child = tag: Text\", () ->\n            cfg = tag: 'div', child: tag: getText 'my text'\n            expectTagNode node = new Node(cfg), Node, 'div'\n            expectTextNode node.children[0], Node, 'my text'\n\n\n\n\n\n\n\n\n#    000  000   000   0000000  000000000   0000000   000   000   0000000  00000000\n#    000  0000  000  000          000     000   000  0000  000  000       000\n#    000  000 0 000  0000000      000     000000000  000 0 000  000       0000000\n#    000  000  0000       000     000     000   000  000  0000  000       000\n#    000  000   000  0000000      000     000   000  000   000   0000000  00000000\n\ndescribe 'node instance', () ->\n\n    describe 'appendTo', () ->\n\n        it 'should append the nodes view to the dom', () ->\n            parent = getTag 'div'\n            node   = new Node tag:'div'\n            node.appendTo parent\n            expect(parent.childNodes[0]).to.equal node.view\n            expect(parent.childNodes.length).to.equal 1\n\n        it 'should throw an error if the dom is controlled by a node', () ->\n            parent = new Node tag:'div'\n            node   = new Node tag:'div'\n            expect(() -> node.appendTo parent.view).to.throw()\n\n        it 'should not throw an error if Node.CHECK_DOM = false', () ->\n            Node.CHECK_DOM = false\n            parent = new Node tag:'div'\n            node   = new Node tag:'div'\n            expect(() -> node.appendTo parent.view).to.not.throw()\n            Node.CHECK_DOM = true\n\n\n    describe 'behind', () ->\n\n        it 'should append the nodes view behind the dom', () ->\n            parent = getTag 'div'\n            node   = new Node tag:'div'\n            parent.appendChild getTag 'div'\n            parent.appendChild prev = getTag 'div'\n            parent.appendChild getTag 'div'\n            node.behind prev\n            expect(parent.childNodes[2]).to.equal node.view\n            expect(parent.childNodes.length).to.equal 4\n\n        it 'should append the nodes view behind the dom if the dom is the last child', () ->\n            parent = getTag 'div'\n            node   = new Node tag:'div'\n            parent.appendChild getTag 'div'\n            parent.appendChild getTag 'div'\n            parent.appendChild prev = getTag 'div'\n            node.behind prev\n            expect(parent.childNodes[3]).to.equal node.view\n            expect(parent.childNodes.length).to.equal 4\n\n        it 'should throw an error if the doms parent is controlled by a node', () ->\n            parent = new Node tag:'div'\n            node   = new Node tag:'div'\n            parent.view.appendChild prev = getTag 'div'\n            expect(() -> node.behind prev).to.throw()\n\n        it 'should not throw an error if Node.CHECK_DOM = false', () ->\n            Node.CHECK_DOM = false\n            parent = new Node tag:'div'\n            node   = new Node tag:'div'\n            parent.view.appendChild prev = getTag 'div'\n            expect(() -> node.behind prev).to.not.throw()\n            Node.CHECK_DOM = true\n\n\n    describe 'before', () ->\n\n        it 'should prepand the nodes view before the dom', () ->\n            parent = getTag 'div'\n            node   = new Node tag:'div'\n            parent.appendChild getTag 'div'\n            parent.appendChild next = getTag 'div'\n            node.before next\n            expect(parent.childNodes[1]).to.equal node.view\n            expect(parent.childNodes.length).to.equal 3\n\n        it 'should throw an error if the doms parent is controlled by a node', () ->\n            parent = new Node tag:'div'\n            node   = new Node tag:'div'\n            parent.view.appendChild next = getTag 'div'\n            expect(() -> node.before next).to.throw()\n\n        it 'should not throw an error if Node.CHECK_DOM = false', () ->\n            Node.CHECK_DOM = false\n            parent = new Node tag:'div'\n            node   = new Node tag:'div'\n            parent.view.appendChild next = getTag 'div'\n            expect(() -> node.before next).to.not.throw()\n            Node.CHECK_DOM = true\n\n\n    describe 'replace', () ->\n\n        it 'should replace the dom with the nodes view', () ->\n            parent = getTag 'div'\n            node   = new Node tag:'div'\n            parent.appendChild old = getTag 'div'\n            node.replace old\n            expect(parent.childNodes[0]).to.equal node.view\n            expect(parent.childNodes.length).to.equal 1\n\n        it 'should throw an error if the doms parent is controlled by a node', () ->\n            parent = new Node tag:'div'\n            node   = new Node tag:'div'\n            parent.view.appendChild old = getTag 'div'\n            expect(() -> node.replace old).to.throw()\n\n        it 'should not throw an error for the doms parent if Node.CHECK_DOM = false', () ->\n            Node.CHECK_DOM = false\n            parent = new Node tag:'div'\n            node   = new Node tag:'div'\n            parent.view.appendChild old = getTag 'div'\n            expect(() -> node.replace old).to.not.throw()\n            Node.CHECK_DOM = true\n\n        it 'should throw an error if the dom is controlled by a node', () ->\n            parent = getTag 'div'\n            node   = new Node tag:'div'\n            parent.appendChild old = (new Node tag:'div').view\n            expect(() -> node.replace old).to.throw()\n\n        it 'should not throw an error for the dom if Node.CHECK_DOM = false', () ->\n            Node.CHECK_DOM = false\n            parent = getTag 'div'\n            node   = new Node tag:'div'\n            parent.appendChild old = (new Node tag:'div').view\n            expect(() -> node.replace old).to.not.throw()\n            Node.CHECK_DOM = true\n\n\n"]}},{"offset":{"line":1154,"column":0},"map":{"version":3,"file":"../../src/js/view-node.js","sourceRoot":"","sources":["../../src/coffee/view-node.coffee"],"names":[],"mappings":"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","sourcesContent":["_      = require './utils'\n__id__ = 0\n\n\n\n\n\n#    000   000  000  00000000  000   000        000   000   0000000   0000000    00000000\n#    000   000  000  000       000 0 000        0000  000  000   000  000   000  000     \n#     000 000   000  0000000   000000000        000 0 000  000   000  000   000  0000000 \n#       000     000  000       000   000        000  0000  000   000  000   000  000     \n#        0      000  00000000  00     00        000   000   0000000   0000000    00000000\n\nclass ViewNode\n\n    @DEBUG         = true\n    @CHECK_DOM     = true\n    @DEFAULT_CLASS = @\n\n    @create = create\n    @map    = map\n    @unmap  = unmap\n\n    constructor: (cfg) ->\n        @register  cfg\n        @updateCfg cfg\n        @updateNow()\n\n    register:   (cfg) -> register   @, cfg\n    updateNow:  (cfg) -> updateNow  @, cfg\n    createView: (cfg) -> createView @, cfg\n\n    # add nodes view to dom\n    appendTo: (dom) -> appendTo @, dom\n    behind:   (dom) -> behind   @, dom\n    before:   (dom) -> before   @, dom\n    replace:  (dom) -> replace  @, dom\n    remove:   (dom) -> remove   @, dom\n\n    # direct dom manipulation\n    addChild:      (child) ->        addChild      @, child\n    addChildAt:    (child, index) -> addChildAt    @, child, index\n    removeChild:   (child) ->        removeChild   @, child\n    removeChildAt: (index) ->        removeChildAt @, index\n\n    # timed dom manipulation\n    updateCfg: (cfg) -> (@cfg = cfg) or true\n    update:    () => update @\n    render:    () -> @cfg\n\n    dispose: () ->\n\n    onMount:   () ->\n    onUnmount: () -> @keep\n    onAdded:   () ->\n    onRemoved: () ->\n\n\n\n\n\n\n\n\n#    00000000   00000000    0000000   00000000    0000000\n#    000   000  000   000  000   000  000   000  000     \n#    00000000   0000000    000   000  00000000   0000000 \n#    000        000   000  000   000  000             000\n#    000        000   000   0000000   000        0000000 \n\nclassMap   = {}\nnodeMap    = {}\ndirtyMap   = {}\ncleanMap   = {}\ndomList    = []\ndirty      = false\nrafTimeout = null\n\n\n\n\n#     0000000  00000000   00000000   0000000   000000000  00000000\n#    000       000   000  000       000   000     000     000     \n#    000       0000000    0000000   000000000     000     0000000 \n#    000       000   000  000       000   000     000     000     \n#     0000000  000   000  00000000  000   000     000     00000000\n\ncreate = (cfg, root = null) ->\n    if _.isNot cfg\n        throw new Error \"A node can't be created from empty cfg.\"\n        \n    if not _.extendsNode clazz = cfg.clazz\n        if not _.extendsNode clazz = cfg.tag\n            clazz = null\n            tag   = cfg.nodeName.toLowerCase() if _.isDom cfg\n            clazz = classMap[tag] if _.isString tag = tag or cfg.tag\n\n    clazz = clazz or ViewNode.DEFAULT_CLASS\n    new clazz cfg\n\n\n\n\n#    00000000   00000000   0000000   000   0000000  000000000  00000000  00000000 \n#    000   000  000       000        000  000          000     000       000   000\n#    0000000    0000000   000  0000  000  0000000      000     0000000   0000000  \n#    000   000  000       000   000  000       000     000     000       000   000\n#    000   000  00000000   0000000   000  0000000      000     00000000  000   000\n\nregister = (node, cfg) ->\n        node.parent = null\n        node.depth  = 0\n        node.keep   = false\n        if not node.__id__\n            node.__id__ = ++__id__\n            nodeMap[node.__id__] = node\n        node.__id__\n        injectNode node, cfg\n\n\n\n\n#    000  000   000        000  00000000   0000000  000000000        000   000   0000000   0000000    00000000\n#    000  0000  000        000  000       000          000           0000  000  000   000  000   000  000     \n#    000  000 0 000        000  0000000   000          000           000 0 000  000   000  000   000  0000000 \n#    000  000  0000  000   000  000       000          000           000  0000  000   000  000   000  000     \n#    000  000   000   0000000   00000000   0000000     000           000   000   0000000   0000000    00000000\n\ninjectNode = (node, cfg) ->\n    if _.isNot(node.__i__) and cfg and cfg.__i__\n        inject    = node.__i__ = cfg.__i__\n        node[key] = value for key, value of inject\n    node\n\n\n\n\n#     0000000  00000000   00000000   0000000   000000000  00000000        000   000  000  00000000  000   000\n#    000       000   000  000       000   000     000     000             000   000  000  000       000 0 000\n#    000       0000000    0000000   000000000     000     0000000          000 000   000  0000000   000000000\n#    000       000   000  000       000   000     000     000                000     000  000       000   000\n#     0000000  000   000  00000000  000   000     000     00000000            0      000  00000000  00     00\n\ncreateView = (node, cfg) ->\n    if node.view\n        throw new Error \"View already exists\"\n    if _.isNot cfg = node.render()\n        throw new Error \"A view for an empty cfg can't be created.\"\n    switch true\n        when _.isSimple  cfg then createTextView    node, node.cfg = text: cfg + ''\n        when _.isDom     cfg then createTagFromDom  node, null, cfg\n        when _.isDomText cfg then createTextFromDom node, null, cfg\n        else\n            tag = cfg.tag\n            switch true\n                when _.isNot     tag then createTextView    node, cfg\n                when _.isString  tag then createTagView     node, cfg\n                when _.isDom     tag then createTagFromDom  node, cfg, tag\n                when _.isDomText tag then createTextFromDom node, cfg, tag\n                else\n                    if _.extendsNode tag\n                        throw new Error \"A tag must be a string or a HTMLElement, you specified a ViewNode class.\"\n                    throw new Error \"A tag must be a string or a HTMLElement.\"\n\n    domList.push node.view if ViewNode.CHECK_DOM\n    node\n\n\n\n\ncreateTextView = (node, cfg) ->\n    text = cfg.text\n    text = text() if _.isFunc text\n    if not _.isSimple text\n        throw new Error \"The text for a text node must be a string, number or bool.\"\n    node.text = text\n    node.tag  = cfg.tag  = undefined\n    node.kind = ViewNode.TEXT_KIND\n    node.view = document.createTextNode text\n\n\ncreateTextFromDom = (node, cfg, dom) ->\n    checkDom dom if ViewNode.CHECK_DOM\n    node.text = dom.nodeValue\n    node.tag  = null\n    node.kind = ViewNode.TEXT_KIND\n    node.view = dom\n    if cfg\n        text = cfg.text\n        if _.isNot text\n            cfg.text = node.text\n        else\n            text = text() if _.isFunc text\n            if not _.isSimple text\n                throw new Error \"The text for a text node must be a string, number or bool.\"\n            node.text = dom.nodeValue = text\n    else\n        cfg = node.cfg = text: node.text\n    cfg.tag = undefined\n    node\n\n\ncreateTagView = (node, cfg) ->\n    node.tag  = tag = cfg.tag\n    node.kind = ViewNode.TAG_KIND\n    node.view = document.createElement tag\n    node\n\n\ncreateTagFromDom = (node, cfg, dom) ->\n    checkDom dom if ViewNode.CHECK_DOM\n    node.tag  = dom.nodeName.toLowerCase()\n    node.kind = ViewNode.TAG_KIND\n    node.view = dom\n    cfg       = cfg or node.cfg = {}\n    cfg.tag   = node.tag\n    node\n\n\n\n\n#    000   000  00000000   0000000     0000000   000000000  00000000        000   000   0000000   000   000\n#    000   000  000   000  000   000  000   000     000     000             0000  000  000   000  000 0 000\n#    000   000  00000000   000   000  000000000     000     0000000         000 0 000  000   000  000000000\n#    000   000  000        000   000  000   000     000     000             000  0000  000   000  000   000\n#     0000000   000        0000000    000   000     000     00000000        000   000   0000000   00     00\n\nupdateNow = (node, cfg) ->\n    cfg = cfg or node.render()\n    node.createView cfg if _.isNot node.view\n    if _.isSimple(cfg) or (not cfg.tag and (_.isSimple(cfg.text) or _.isFunc(cfg.text)))\n        updateText node, cfg\n    else\n        updateProperties node, cfg\n    node\n\n\n\n\n#    000   000  00000000   0000000     0000000   000000000  00000000\n#    000   000  000   000  000   000  000   000     000     000     \n#    000   000  00000000   000   000  000000000     000     0000000 \n#    000   000  000        000   000  000   000     000     000     \n#     0000000   000        0000000    000   000     000     00000000\n\nupdate = (node) ->\n    id = node?.__id__\n    if not id\n        throw new Error \"Can't update node. ViewNode doesn't exist.\"\n\n    if not dirty\n        window.cancelAnimationFrame rafTimeout\n        rafTimeout = window.requestAnimationFrame performUpdate\n\n    dirtyMap[id] = true\n    dirty        = true\n    null\n\n\n\n\n#    00000000   00000000  00000000   00000000   0000000   00000000   00     00  000   000  00000000   0000000     0000000   000000000  00000000\n#    000   000  000       000   000  000       000   000  000   000  000   000  000   000  000   000  000   000  000   000     000     000     \n#    00000000   0000000   0000000    000000    000   000  0000000    000000000  000   000  00000000   000   000  000000000     000     0000000 \n#    000        000       000   000  000       000   000  000   000  000 0 000  000   000  000        000   000  000   000     000     000     \n#    000        00000000  000   000  000        0000000   000   000  000   000   0000000   000        0000000    000   000     000     00000000\n\nperformUpdate = () ->\n    window.cancelAnimationFrame rafTimeout\n    dirty    = false\n    cleanMap = {}\n    nodes    = []\n    #TODO: sort by depth to update top down\n    (nodes.push(n) if n = nodeMap[id]) for id of dirtyMap\n    nodes.sort (a, b) -> a.depth - b.depth\n    for node in nodes\n        continue if not node.view or not nodeMap[node.__id__] or cleanMap[node.__id__]\n        cfg = node.render()\n\n        if _.isNot(node.tag) and _.isNot(cfg.tag)\n            updateText node, cfg\n        else if not (node.tag == cfg.tag or node.constructor == cfg.tag)\n            replaceChildNode node, cfg\n        else\n            updateProperties node, cfg\n    dirtyMap = {}\n    null\n\n\n\n\n#    000   000  00000000   0000000     0000000   000000000  00000000        000000000  00000000  000   000  000000000\n#    000   000  000   000  000   000  000   000     000     000                000     000        000 000      000   \n#    000   000  00000000   000   000  000000000     000     0000000            000     0000000     00000       000   \n#    000   000  000        000   000  000   000     000     000                000     000        000 000      000   \n#     0000000   000        0000000    000   000     000     00000000           000     00000000  000   000     000   \n\nupdateText = (node, cfg) ->\n    cleanMap[node.__id__] = true\n    text = if _.isFunc(cfg.text) then cfg.text() else if _.isString(cfg) then cfg else cfg.text\n    if node.text != text\n        node.cfg            = cfg\n        node.text           = text\n        node.view.nodeValue = text\n    null\n\n\n\n\n#    000   000  00000000   0000000     0000000   000000000  00000000        00000000   00000000    0000000   00000000    0000000\n#    000   000  000   000  000   000  000   000     000     000             000   000  000   000  000   000  000   000  000     \n#    000   000  00000000   000   000  000000000     000     0000000         00000000   0000000    000   000  00000000   0000000 \n#    000   000  000        000   000  000   000     000     000             000        000   000  000   000  000             000\n#     0000000   000        0000000    000   000     000     00000000        000        000   000   0000000   000        0000000 \n\nupdateProperties = (node, cfg) ->\n    cleanMap[node.__id__] = true\n\n    cfg     = cfg.render() if cfg instanceof ViewNode\n    attrs   = node.attrs or node.attrs = {}\n    propMap = Object.assign {}, attrs, node.events, cfg\n\n    if propMap.hasOwnProperty 'className'\n        updateClass node, cfg.className\n\n    if propMap.hasOwnProperty 'style'\n        updateStyle node, cfg.style\n\n    if propMap.hasOwnProperty 'text'\n        text = text() if _.isFunc text = cfg.text\n        if _.isSimple text\n            updateChildren node, [text]\n        else if _.isDomText text\n            updateChildren node, [text]\n\n        if ViewNode.DEBUG\n            if cfg.hasOwnProperty 'child'\n                console.warn 'child specified while text exists: ', cfg\n            if cfg.hasOwnProperty 'children'\n                console.warn 'children specified while text exists', cfg\n\n    else if propMap.hasOwnProperty 'child'\n        child = child() if _.isFunc child = cfg.child\n        updateChildren node, [child]\n\n        if ViewNode.DEBUG\n            if cfg.hasOwnProperty 'children'\n                console.warn 'children specified while text exists', cfg\n\n    else if propMap.hasOwnProperty 'children'\n        updateChildren node, cfg.children\n\n    delete propMap.tag\n    delete propMap.clazz\n    delete propMap.__i__\n    delete propMap.keep\n    delete propMap.text\n    delete propMap.child\n    delete propMap.className\n    delete propMap.style\n    delete propMap.children\n    delete propMap.bindings\n\n    for name of propMap\n        attr  = attrs[name]\n        value = cfg[name]\n\n        if _.isBool(value) or (_.isNot(value) and _.isBool(attr))\n            updateBool node, value, name\n        else\n            if /^on/.test name\n                updateEvent node, value, name\n            else\n                value = value() if _.isFunc value\n                if _.isBool value\n                    updateBool node, value, name\n                else\n                    updateAttr node, value, name\n    null\n\n\n\n\n\n\n\n\n#     0000000   000000000  000000000  00000000    0000000\n#    000   000     000        000     000   000  000\n#    000000000     000        000     0000000    0000000\n#    000   000     000        000     000   000       000\n#    000   000     000        000     000   000  0000000\n\nupdateAttr = (node, value, name) ->\n    node.attrs[name] = node.view.getAttribute name\n    return if node.attrs[name] == value\n    view = node.view\n    if value != null and value != undefined\n        view.setAttribute name, value\n        view[name]       = value\n        node.attrs[name] = value\n    else\n        view.removeAttribute name\n        delete view[name]\n        delete node.attrs[name]\n    null\n\n\n\n\n#    0000000     0000000    0000000   000\n#    000   000  000   000  000   000  000\n#    0000000    000   000  000   000  000\n#    000   000  000   000  000   000  000\n#    0000000     0000000    0000000   0000000\n\nupdateBool = (node, value, name) ->\n    node.attrs[name] = node.view[name]\n    return if node.attrs[name] == value\n    view = node.view\n    if _.isNot value\n        view.removeAttribute name\n        view[name] = false\n        delete node.attrs[name]\n    else if  value == false\n        view.removeAttribute name\n        view[name]       = false\n        node.attrs[name] = false\n    else\n        view.setAttribute name, ''\n        view[name]       = true\n        node.attrs[name] = true\n    null\n\n\n\n\n#     0000000  000       0000000    0000000   0000000\n#    000       000      000   000  000       000\n#    000       000      000000000  0000000   0000000\n#    000       000      000   000       000       000\n#     0000000  0000000  000   000  0000000   0000000\n\nupdateClass = (node, value) ->\n    value = value() if _.isFunc value\n\n    node.attrs.className = node.view.className\n    return if node.attrs.className == value\n    if value\n        node.view.className  = value\n        node.attrs.className = value\n    else\n        node.view.className  = undefined\n        delete node.attrs.className\n    null\n\n\n\n\n#     0000000  000000000  000   000  000      00000000\n#    000          000      000 000   000      000\n#    0000000      000       00000    000      0000000\n#         000     000        000     000      000\n#    0000000      000        000     0000000  00000000\n\nupdateStyle = (node, style) ->\n    view  = node.view\n    attrs = node.attrs\n    sobj  = attrs.style\n\n    return if not view\n\n    style = style() if _.isFunc style\n\n    if _.isNot style\n        view.style.cssText = null\n        delete attrs.style\n\n    else if _.isString style\n        view.style.cssText = style\n        attrs.style        = style\n    else\n        css     = ''\n        sobj    = if _.isObject(sobj) then sobj else {}\n        changed = false\n        propMap = Object.assign {}, style, sobj\n        for name of propMap\n            value = style[name]\n            if value != sobj[name]\n                changed = true\n            sobj[name] = value\n            if _.isNot value\n                delete sobj[name]\n            else\n                prop  = _.normalizeName name\n                css  += prop + ': ' + value + '; '\n\n        if changed\n            if css.length\n                css                = css.slice 0, -1\n                view.style.cssText = css\n                attrs.style        = sobj\n            else\n                view.style.cssText = null\n                delete attrs.style\n    null\n\n\n\n\n#    00000000  000   000  00000000  000   000  000000000   0000000\n#    000       000   000  000       0000  000     000     000\n#    0000000    000 000   0000000   000 0 000     000     0000000\n#    000          000     000       000  0000     000          000\n#    00000000      0      00000000  000   000     000     0000000\n\nupdateEvent = (node, callback, name) ->\n    events    = node.events or node.events = {}\n    view      = node.view\n    type      = _.normalizeEvent name\n    listener  = events[name]\n\n    if _.isString callback\n        callback = node[name]\n\n    if listener != callback\n        if listener\n            view.removeEventListener(type, listener)\n            delete events[name]\n        if callback\n            view.addEventListener(type, callback)\n            events[name] = callback\n    null\n\n\nremoveEvents = (node) ->\n    events = node.events\n    return null if not events\n\n    view = node.view\n    for name, listener of events\n        type = _.normalizeEvent name\n        view.removeEventListener(type, listener) if listener\n        delete events[name]\n    node.events = null\n    null\n\n\n\n\n#     0000000  000   000  000  000      0000000    00000000   00000000  000   000\n#    000       000   000  000  000      000   000  000   000  000       0000  000\n#    000       000000000  000  000      000   000  0000000    0000000   000 0 000\n#    000       000   000  000  000      000   000  000   000  000       000  0000\n#     0000000  000   000  000  0000000  0000000    000   000  00000000  000   000\n\nupdateChildren = (node, cfgs) ->\n    #TODO: allow object as only child\n    children = node.children or node.children = []\n    cfgs     = cfgs() if _.isFunc cfgs\n    cfgs     = if _.isString(cfgs) then [cfgs] else cfgs or []\n    l        = if children.length > cfgs.length then children.length else cfgs.length\n    for i in [0...l]\n        child = children[i]\n        cfg   = cfgs[i]\n        cfg   = cfg() if _.isFunc cfg\n\n        if not child and not cfg\n            throw new Error \"DOM ERROR: either child or cfg at index #{i} must be defined. Got \" + child + ', ' + cfg\n        if not child\n            addChildNode node, cfg\n        else if not cfg\n            removeChildNode child\n        else\n            change child, cfg\n    children.length = cfgs.length\n    null\n\n\n\n\n#     0000000  000   000   0000000   000   000   0000000   00000000\n#    000       000   000  000   000  0000  000  000        000\n#    000       000000000  000000000  000 0 000  000  0000  0000000\n#    000       000   000  000   000  000  0000  000   000  000\n#     0000000  000   000  000   000  000   000   0000000   00000000\n\nchange = (node, cfg) ->\n\n    needsUpdate = node.updateCfg cfg\n    if node == cfg or node.constructor == cfg.tag\n        updateProperties node, node.render() if needsUpdate\n\n    else if node.tag != cfg.tag and (node.tag or cfg.tag) or cfg instanceof ViewNode\n        replaceChildNode node, cfg\n\n    else if _.isNot node.tag        # text node\n        updateText node, cfg\n\n    else if needsUpdate           # tag node\n        updateProperties node, cfg\n\n    false\n\n\n\n\n#     0000000   0000000    0000000\n#    000   000  000   000  000   000\n#    000000000  000   000  000   000\n#    000   000  000   000  000   000\n#    000   000  0000000    0000000\n\naddChildNode = (node, cfg) ->\n    if cfg instanceof ViewNode\n        child = cfg\n    else\n        cfg.__i__ = node.__i__ if not cfg.__i__\n        child = create cfg\n\n    node.children.push child\n    node.view.appendChild child.view\n    child.parent = node\n    child.depth  = node.depth + 1\n    child.onMount()\n    null\n\n\n\n\n#    00000000   00000000  00     00   0000000   000   000  00000000\n#    000   000  000       000   000  000   000  000   000  000\n#    0000000    0000000   000000000  000   000   000 000   0000000\n#    000   000  000       000 0 000  000   000     000     000\n#    000   000  00000000  000   000   0000000       0      00000000\n\nremoveChildNode = (child) ->\n    node = child.parent\n    view = child.view\n    disposeNode child\n    node.view.removeChild view\n    null\n\n\n\n\n#    00000000   00000000  00000000   000       0000000    0000000  00000000\n#    000   000  000       000   000  000      000   000  000       000\n#    0000000    0000000   00000000   000      000000000  000       0000000\n#    000   000  000       000        000      000   000  000       000\n#    000   000  00000000  000        0000000  000   000   0000000  00000000\n\nreplaceChildNode = (child, cfg) ->\n    node     = child.parent\n    children = node.children\n    i        = children.indexOf child\n    view     = child.view\n\n    disposeNode child\n\n    if cfg instanceof ViewNode\n        child = cfg\n        cfg   = child.render()\n    else\n        cfg.__i__ = node.__i__ if not cfg.__i__\n        child = create cfg\n\n    children[i]  = child\n    child.parent = node\n    child.depth  = node.depth + 1\n    node.view.replaceChild child.view, view\n\n    if _.isSimple(cfg) or (not cfg.tag and (_.isSimple(cfg.text) or _.isFunc(cfg.text)))\n        updateText child, cfg\n    else\n        updateProperties child, cfg\n\n    child.onMount()\n    null\n\n\n\n\n#    0000000    000   0000000  00000000    0000000    0000000  00000000\n#    000   000  000  000       000   000  000   000  000       000\n#    000   000  000  0000000   00000000   000   000  0000000   0000000\n#    000   000  000       000  000        000   000       000  000\n#    0000000    000  0000000   000         0000000   0000000   00000000\n\ndisposeNode = (node) ->\n    if node.onUnmount() != true\n        removeEvents node\n\n        if node.children and node.children.length\n            disposeNode child for child in node.children\n\n        delete node.children\n        delete node.view\n        delete nodeMap[node.__id__]\n\n    node.parent = null\n    node.depth  = undefined\n    null\n\n\n\n\n#    0000000     0000000   00     00\n#    000   000  000   000  000   000\n#    000   000  000   000  000000000\n#    000   000  000   000  000 0 000\n#    0000000     0000000   000   000\n\ncheckDom = (dom) ->\n    if domList.indexOf(dom) > -1\n        throw new Error 'Dom element already controlled by another node.'\n\n\nappendTo = (node, dom) ->\n    checkDom dom if ViewNode.CHECK_DOM\n    dom.appendChild node.view\n\n\n\nbehind = (node, dom) ->\n    parent = dom.parentNode\n    next   = dom.nextSibling\n    checkDom parent if ViewNode.CHECK_DOM\n    if next\n        parent.insertBefore node.view, next\n    else\n        parent.appendChild node.view\n\n\nbefore = (node, dom) ->\n    parent = dom.parentNode\n    checkDom parent if ViewNode.CHECK_DOM\n    parent.insertBefore node.view, dom\n\n\nreplace = (node, dom) ->\n    parent = dom.parentNode\n    if ViewNode.CHECK_DOM\n        checkDom parent\n        checkDom dom\n    parent.replaceChild node.view, dom\n\n\nremove = (node) ->\n    parent = node.view.parentNode\n    checkDom parent if ViewNode.CHECK_DOM\n    parent.removeChild node.view\n\n\n\n\n#    0000000     0000000   00     00        000  000   000  000000000  00000000  00000000   000   000   0000000   000    \n#    000   000  000   000  000   000        000  0000  000     000     000       000   000  0000  000  000   000  000    \n#    000   000  000   000  000000000        000  000 0 000     000     0000000   0000000    000 0 000  000000000  000    \n#    000   000  000   000  000 0 000        000  000  0000     000     000       000   000  000  0000  000   000  000    \n#    0000000     0000000   000   000        000  000   000     000     00000000  000   000  000   000  000   000  0000000\n\naddChild      = (node, child) ->\naddChildAt    = (node, child, index) ->\nremoveChild   = (node, child) ->\nremoveChildAt = (node, index) ->\n\n\n#    00     00   0000000   00000000\n#    000   000  000   000  000   000\n#    000000000  000000000  00000000\n#    000 0 000  000   000  000\n#    000   000  000   000  000\n\nmap = (tag, clazz, overwrite = false) ->\n    if _.isNot(classMap[tag]) or overwrite\n        classMap[tag] = clazz\n    null\n\n\n\n\n#    000   000  000   000  00     00   0000000   00000000\n#    000   000  0000  000  000   000  000   000  000   000\n#    000   000  000 0 000  000000000  000000000  00000000\n#    000   000  000  0000  000 0 000  000   000  000\n#     0000000   000   000  000   000  000   000  000\n\nunmap = (tag) ->\n    delete classMap[tag]\n    null\n\n\n\n\n\n\n\n\n#    00000000    0000000   00000000\n#    000   000  000   000  000\n#    0000000    000000000  000000\n#    000   000  000   000  000\n#    000   000  000   000  000\n\nif typeof window != 'undefined'\n    lastTime = 0\n    vendors  = ['webkit', 'moz']\n    for vendor in vendors\n        break if window.requestAnimationFrame\n        window.requestAnimationFrame = window[vendor + 'RequestAnimationFrame']\n        window.cancelAnimationFrame  = window[vendor + 'CancelAnimationFrame' ] or window[vendor + 'CancelRequestAnimationFrame']\n\n\n    if not window.requestAnimationFrame\n        window.requestAnimationFrame = (callback) ->\n            currTime   = Date.now()\n            timeToCall = Math.max 0, 16 - currTime + lastTime\n            rAF        = () -> callback currTime + timeToCall\n            id         = window.setTimeout rAF, timeToCall\n            lastTime   = currTime + timeToCall\n            id\n\n\n    if not window.cancelAnimationFrame\n        window.cancelAnimationFrame = (id) ->\n            clearTimeout id\n            null\n\n\n\n\n#     0000000    0000000   0000000  000   0000000   000   000\n#    000   000  000       000       000  000        0000  000\n#    000000000  0000000   0000000   000  000  0000  000 0 000\n#    000   000       000       000  000  000   000  000  0000\n#    000   000  0000000   0000000   000   0000000   000   000\n\nif typeof Object.assign == 'undefined'\n    Object.assign = (target, args...) ->\n        for src in args\n            for key of src\n                target[key] = src[key];\n        target\n\n\n\n\nViewNode.create = create\nViewNode.map    = map\nViewNode.unmap  = unmap\n\n\n\n\n#    00000000  000   000  00000000    0000000   00000000   000000000\n#    000        000 000   000   000  000   000  000   000     000   \n#    0000000     00000    00000000   000   000  0000000       000   \n#    000        000 000   000        000   000  000   000     000   \n#    00000000  000   000  000         0000000   000   000     000   \n\nif typeof module != 'undefined'\n    module.exports = ViewNode\nif typeof window != 'undefined'\n    window.ViewNode = ViewNode\nelse\n    this.ViewNode = ViewNode"]}},{"offset":{"line":2003,"column":0},"map":{"version":3,"file":"../../src/js/utils.js","sourceRoot":"","sources":["../../src/coffee/utils.coffee"],"names":[],"mappings":";AAAA;AAAA,MAAA;;EAAA,SAAA,GAAc,SAAC,KAAD;IAAW,IAAG,MAAA,CAAO,KAAP,CAAH;aAAsB,KAAA,CAAA,EAAtB;KAAA,MAAA;aAAmC,MAAnC;;EAAX;;EACd,MAAA,GAAc,SAAC,KAAD;WAAW,OAAO,KAAP,KAAgB;EAA3B;;EACd,QAAA,GAAc,SAAC,KAAD;WAAW,OAAO,KAAP,KAAgB;EAA3B;;EACd,QAAA,GAAc,SAAC,KAAD;WAAW,OAAO,KAAP,KAAgB,QAAhB,IAA4B,KAAA,KAAS,KAAA,GAAQ;EAAxD;;EACd,QAAA,GAAc,SAAC,KAAD;WAAW,OAAO,KAAP,KAAgB;EAA3B;;EACd,MAAA,GAAc,SAAC,KAAD;WAAW,OAAO,KAAP,KAAgB;EAA3B;;EACd,KAAA,GAAc,SAAC,KAAD;WAAW,KAAA,YAAiB;EAA5B;;EACd,SAAA,GAAc,SAAC,KAAD;WAAW,KAAA,YAAiB;EAA5B;;EACd,KAAA,GAAc,SAAC,KAAD;WAAW,KAAA,KAAS,IAAT,IAAiB,KAAA,KAAS;EAArC;;EACd,QAAA,GAAc,SAAC,KAAD;AAAW,QAAA;WAAA,CAAC,CAAA,GAAI,OAAO,KAAZ,CAAA,KAAsB,QAAtB,IAAkC,CAAA,KAAK,QAAvC,IAAmD,CAAA,KAAK;EAAnE;;EACd,WAAA,GAAc,SAAC,KAAD;WAAW,MAAA,CAAO,KAAP,CAAA,IAAkB,CAAC,CAAC,KAAK,CAAC,SAAN,YAA2B,QAA5B,CAAA,IAAyC,KAAA,KAAS,QAAnD;EAA7B;;EAGd,aAAA,GAAgB,SAAC,IAAD;WACZ,IAAI,CAAC,OAAL,CAAa,QAAb,EAAuB,SAAC,IAAD;aACnB,GAAA,GAAM,IAAI,CAAC,WAAL,CAAA;IADa,CAAvB;EADY;;EAKhB,cAAA,GAAiB,SAAC,IAAD;IACb,IAAA,GAAO,IAAI,CAAC,KAAL,CAAW,CAAX;WACP,IAAI,CAAC,MAAL,CAAY,CAAZ,CAAc,CAAC,WAAf,CAAA,CAAA,GAA+B,aAAA,CAAc,IAAI,CAAC,KAAL,CAAW,CAAX,CAAd;EAFlB;;EAKjB,MAAM,CAAC,OAAP,GACI;IAAA,SAAA,EAAgB,SAAhB;IACA,MAAA,EAAgB,MADhB;IAEA,QAAA,EAAgB,QAFhB;IAGA,QAAA,EAAgB,QAHhB;IAIA,QAAA,EAAgB,QAJhB;IAKA,MAAA,EAAgB,MALhB;IAMA,KAAA,EAAgB,KANhB;IAOA,SAAA,EAAgB,SAPhB;IAQA,KAAA,EAAgB,KARhB;IASA,QAAA,EAAgB,QAThB;IAUA,WAAA,EAAgB,WAVhB;IAWA,aAAA,EAAgB,aAXhB;IAYA,cAAA,EAAgB,cAZhB;;AAxBJ","sourcesContent":["getOrCall   = (value) -> if isFunc(value) then value() else value\nisBool      = (value) -> typeof value == 'boolean'\nisNumber    = (value) -> typeof value == 'number'\nisString    = (value) -> typeof value == 'string' or value == value + ''\nisObject    = (value) -> typeof value == 'object'\nisFunc      = (value) -> typeof value == 'function'\nisDom       = (value) -> value instanceof HTMLElement\nisDomText   = (value) -> value instanceof Text\nisNot       = (value) -> value == null or value == undefined\nisSimple    = (value) -> (t = typeof value) == 'string' or t == 'number' or t == 'boolean'\nextendsNode = (value) -> isFunc(value) and ((value.prototype instanceof ViewNode) or value == ViewNode)\n\n\nnormalizeName = (name) ->\n    name.replace /[A-Z]/g, (name) ->\n        '-' + name.toLowerCase()\n\n\nnormalizeEvent = (type) ->\n    type = type.slice 2\n    type.charAt(0).toLowerCase() + normalizeName type.slice(1)\n    \n    \nmodule.exports = \n    getOrCall:      getOrCall\n    isBool:         isBool\n    isNumber:       isNumber\n    isString:       isString\n    isObject:       isObject\n    isFunc:         isFunc\n    isDom:          isDom\n    isDomText:      isDomText\n    isNot:          isNot\n    isSimple:       isSimple\n    extendsNode:    extendsNode\n    normalizeName:  normalizeName\n    normalizeEvent: normalizeEvent\n"]}}]}