// Generated by CoffeeScript 1.12.6
(function() {
  var ViewNode, _, __id__, classMap, create, dirty, dirtyMap, map, nodeMap, performUpdate, rafTimeout, unmap, update;

  _ = require('./utils');

  __id__ = 0;

  nodeMap = {};

  dirtyMap = {};

  classMap = {};

  dirty = false;

  rafTimeout = null;

  ViewNode = (function() {
    function ViewNode(cfg) {
      this.parent = null;
      this.depths = 0;
      this.__id__ = ++__id__;
      nodeMap[this.__id__] = this;
      this.updateCfg(cfg);
      this.populate();
    }

    ViewNode.prototype.appendTo = function(dom) {
      dom.appendChild(this.view);
      return this;
    };

    ViewNode.prototype.updateCfg = function(cfg1) {
      this.cfg = cfg1;
      return true;
    };

    ViewNode.prototype.update = function() {
      return update(this);
    };

    ViewNode.prototype.render = function() {
      return this.cfg;
    };

    ViewNode.prototype.populate = function() {
      var cfg, tag, text;
      cfg = this.render();
      if (_.isSimple(cfg)) {
        this.text = cfg + '';
        this.view = document.createTextNode(cfg);
      } else if (_.isString(tag = cfg.tag)) {
        this.tag = tag;
        this.view = document.createElement(tag);
        this.updateProps(cfg);
      } else if (_.isSimple(text = cfg.text)) {
        this.text = text + '';
        this.view = document.createTextNode(text);
      } else if (_.isFunc(text)) {
        this.text = text() + '';
        this.view = document.createTextNode(this.text);
      }
      return this;
    };

    ViewNode.prototype.updateNow = function() {
      var cfg;
      cfg = this.render();
      if (_.isString(this.tag)) {
        this.updateProps(cfg);
      } else {
        this.updateText(cfg);
      }
      return this;
    };

    ViewNode.prototype.updateText = function(cfg) {
      var text;
      if (!_.isString(text = cfg)) {
        if (!_.isString(text = cfg.text)) {
          if (_.isFunc(text)) {
            text = text();
          }
        }
      }
      text += '';
      if (this.text !== text) {
        this.text = this.view.nodeValue = text;
      }
      return this;
    };

    ViewNode.prototype.updateProps = function(cfg) {
      this.attrs = this.attrs || {};
      this.events = this.events || {};
      this.children = this.children || [];
      if (cfg.text !== void 0) {
        this.updateChildren([cfg.text]);
      } else if (cfg.child !== void 0) {
        this.updateChildren([cfg.child]);
      } else if (cfg.children !== void 0) {
        if (_.isFunc(cfg.children)) {
          this.updateChildren(cfg.children());
        } else {
          this.updateChildren(cfg.children);
        }
      } else if (this.children.length) {
        this.updateChildren([]);
      }
      if (cfg.className !== void 0 || this.attrs.className !== void 0) {
        this.updateClassName(cfg.className);
      }
      if (cfg.style !== void 0 || this.attrs.style !== void 0) {
        this.updateStyle(cfg.style);
      }
      return this;
    };

    ViewNode.prototype.updateClassName = function(value) {
      if (_.isFunc(value)) {
        value = value();
      }
      if (this.attrs.className === value) {
        return;
      }
      if (value) {
        this.view.className = value;
        this.attrs.className = value;
      } else {
        this.view.className = void 0;
        delete this.attrs.className;
      }
      return this;
    };

    ViewNode.prototype.updateStyle = function(value) {
      var attrs, changed, css, name, prop, propMap, style, v, view;
      view = this.view;
      attrs = this.attrs;
      style = attrs.style;
      if (_.isFunc(value)) {
        value = value();
      }
      if (_.isNot(value)) {
        if (attrs.style !== value) {
          view.style.cssText = null;
          delete attrs.style;
        }
      } else if (_.isString(value)) {
        if (attrs.style !== value) {
          view.style.cssText = value;
          attrs.style = value;
        }
      } else {
        css = '';
        style = _.isObject(style) ? style : {};
        changed = false;
        propMap = Object.assign({}, style, value);
        for (name in propMap) {
          v = value[name];
          changed = changed || v !== style[name];
          style[name] = v;
          if (_.isNot(v)) {
            delete style[name];
          } else {
            prop = _.normalizeName(name);
            css += prop + ': ' + v + '; ';
          }
        }
        if (changed) {
          if (css.length) {
            css = css.slice(0, -1);
            view.style.cssText = css;
          } else {
            view.style.cssText = null;
            delete attrs.style;
          }
        }
      }
      return this;
    };

    ViewNode.prototype.updateEvent = function(callback, name) {
      var listener, type;
      type = _.normalizeEvent(name);
      listener = this.events[name];
      if (_.isString(callback)) {
        callback = this[name];
      }
      if (listener !== callback) {
        if (listener) {
          this.view.removeEventListener(type, listener);
          delete this.events[name];
        }
        if (callback) {
          this.view.addEventListener(type, callback);
          this.events[name] = callback;
        }
      }
      return this;
    };

    ViewNode.prototype.removeEvents = function() {
      var events, listener, name, type, view;
      events = this.events;
      if (!events) {
        return null;
      }
      view = this.view;
      for (name in events) {
        listener = events[name];
        type = _.normalizeEvent(name);
        if (listener) {
          view.removeEventListener(type, listener);
        }
        delete events[name];
      }
      return this;
    };

    ViewNode.prototype.updateChildren = function(cfgs) {
      var cfg, child, children, hasCfg, i, j, l, newL, oldL, ref;
      children = this.children;
      oldL = children.length;
      newL = cfgs.length;
      l = oldL > newL ? oldL : newL;
      for (i = j = 0, ref = l; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        child = children[i];
        cfg = cfgs[i];
        if (_.isFunc(cfg)) {
          cfg = cfg();
        }
        hasCfg = cfg !== void 0 && cfg !== null;
        if (!child && hasCfg) {
          this.addChild(cfg);
        } else if (child && !hasCfg) {
          this.removeChild(child);
        } else {
          this.changeChild(child, cfg);
        }
      }
      return this;
    };

    ViewNode.prototype.addChild = function(cfg) {
      var child, keep;
      if (_.isNodeInstance(cfg)) {
        child = cfg;
        if (child.parent) {
          keep = child.keep;
          child.keep = true;
          child.parent.removeChild(child);
          child.keep = keep;
        }
      } else {
        child = create(cfg);
      }
      child.parent = this;
      child.depths = this.depths + 1;
      this.children.push(child);
      this.view.appendChild(child.view);
      return this;
    };

    ViewNode.prototype.removeChild = function(child) {};

    ViewNode.prototype.changeChild = function(child, cfg) {
      if (_.isNodeInstance(cfg)) {
        if (child === cfg) {
          child.updateNow();
        } else {
          this.replaceChild(child, cfg);
        }
      } else if (_.isString(child.tag)) {
        if (child.tag === cfg.tag || child.constructor === cfg.tag) {
          if (child.updateCfg(cfg)) {
            child.updateProps(child.render());
          }
        } else {
          this.replaceChild(child, cfg);
        }
      } else if (_.isSimple(child.text)) {
        if (_.isSimple(cfg) || _.isSimple(cfg.text)) {
          if (child.updateCfg(cfg)) {
            child.updateText(child.render());
          }
        } else {
          this.replaceChild(child, cfg);
        }
      } else {
        this.replaceChild(child, cfg);
      }
      return this;
    };

    ViewNode.prototype.replaceChild = function(child, cfg) {
      var children, i, keep, view;
      throw new Error('REPLACE!!!');
      children = this.children;
      i = children.indexOf(child);
      view = child.view;
      this.disposeNode(child);
      if (_.isNodeInstance(cfg)) {
        child = cfg;
        if (child.parent) {
          keep = child.keep;
          child.keep = true;
          child.parent.removeChild(child);
          child.keep = keep;
        }
      } else {
        child = create(cfg);
      }
      children[i] = child;
      child.parent = this;
      child.depth = this.depth + 1;
      this.view.replaceChild(child.view, view);
      return this;
    };

    return ViewNode;

  })();

  create = function(cfg) {
    var clazz;
    if (!_.extendsNode(clazz = cfg.clazz || cfg.tag)) {
      clazz = ViewNode;
    }
    clazz = clazz || ViewNode;
    return new clazz(cfg);
  };

  update = function(node) {
    var id;
    id = node != null ? node.__id__ : void 0;
    if (!id) {
      throw new Error("Can't update node. ViewNode doesn't exist.");
    }
    if (!dirty) {
      window.cancelAnimationFrame(rafTimeout);
      rafTimeout = window.requestAnimationFrame(performUpdate);
    }
    dirtyMap[id] = true;
    dirty = true;
    return null;
  };

  performUpdate = function() {
    var id, j, len, n, node, nodes;
    window.cancelAnimationFrame(rafTimeout);
    dirty = false;
    nodes = [];
    for (id in dirtyMap) {
      if (n = nodeMap[id]) {
        nodes.push(n);
      }
    }
    nodes.sort(function(a, b) {
      return a.depth - b.depth;
    });
    for (j = 0, len = nodes.length; j < len; j++) {
      node = nodes[j];
      if (!node.view || !nodeMap[node.__id__] || !dirtyMap[node.__id__]) {
        continue;
      }
      node.updateNow();
    }
    dirtyMap = {};
    return null;
  };

  map = function(tag, clazz, overwrite) {
    if (overwrite == null) {
      overwrite = false;
    }
    if (_.isNot(classMap[tag]) || overwrite) {
      classMap[tag] = clazz;
    }
    return null;
  };

  unmap = function(tag) {
    delete classMap[tag];
    return null;
  };

  ViewNode.create = create;

  ViewNode.map = map;

  ViewNode.unmap = unmap;

  module.exports = ViewNode;

}).call(this);

//# sourceMappingURL=view-node-small.js.map
