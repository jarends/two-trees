// Generated by CoffeeScript 1.12.6
(function() {
  var Comp, ViewTree,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ViewTree = require('./view-tree');

  Comp = (function(superClass) {
    extend(Comp, superClass);

    Comp.TREE_NAME = 'tree';

    function Comp(cfg) {
      Comp.__super__.constructor.call(this, cfg);
    }

    Comp.prototype.getTree = function() {
      var tree;
      tree = this[Comp.TREE_NAME];
      if (!tree) {
        throw new Error("Tree not set on property '" + Comp.TREE_NAME + "'.");
      }
      return tree;
    };

    Comp.prototype.bind = function(obj, name, callback) {
      return this.paths.push(getTree().bind(obj, name, callback));
    };

    Comp.prototype.unbind = function(paths) {
      var index;
      index = this.paths.indexOf(paths);
      if (index === -1) {
        console.error('Paths not bound by this comp. paths = ', paths);
        throw new Error('Paths not bound by this comp.');
      }
      this.paths.splice(index, 1);
      return getTree().unbind(paths);
    };

    Comp.prototype.unbindAll = function() {
      var allUnbound, i, len, paths, ref, tree;
      tree = getTree();
      allUnbound = true;
      ref = this.paths;
      for (i = 0, len = ref.length; i < len; i++) {
        paths = ref[i];
        allUnbound = allUnbound && tree.unbind(paths);
      }
      this.paths = [];
      return allUnbound;
    };

    Comp.prototype.register = function(cfg) {
      return Comp.__super__.register.call(this, cfg);
    };

    Comp.prototype.onUnmount = function() {
      this.unbindAll();
      return Comp.__super__.onUnmount.call(this);
    };

    return Comp;

  })(ViewTree.Node);

}).call(this);

//# sourceMappingURL=comp.js.map
