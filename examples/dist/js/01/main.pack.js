(function(pack)
{
    var win = window,
        process = win.process || (win.process = {}),
        env     = process.env || (process.env = {}),
        cfg     = {
        index:      0,
        total:      1,
        startIndex: 0,
        type:       'register::0.6459527982768012_1501684670751',
        path:       '/Users/JOA/Projects/workspaces/my/two-trees/examples/dist/js/01/main.js',
        pack:       pack
    };
    env.NODE_ENV = env.NODE_ENV || 'development'
    var packer = // Generated by CoffeeScript 1.12.6
(function() {
  var Pack;

  Pack = (function() {
    function Pack() {}

    Pack.prototype.init = function(cfg) {
      this.cfg = cfg;
      this.mainIndex = this.cfg.startIndex;
      this.map = {};
      this.chunks = {};
      this.prepare();
      if (this.cfg.total === 1) {
        this.start();
      }
      return null;
    };

    Pack.prototype.prepare = function() {
      var pack;
      this.startTime = Date.now();
      this.registered = 1;
      pack = this.cfg.pack;
      this.getModule = (function(_this) {
        return function(index, chunk) {
          var m, r;
          if (chunk) {
            return _this.getChunk(index, chunk);
          }
          m = _this.map[index];
          if (m) {
            return m.exports;
          }
          m = _this.map[index] = {
            require: _this.getModule,
            exports: {}
          };
          r = pack[index];
          if (r) {
            r(m, m.exports, m.require);
            return m.exports;
          } else {
            console.log("Error requiring '" + index + "': module doesn't exist");
          }
          return null;
        };
      })(this);
      document.addEventListener(this.cfg.type, (function(_this) {
        return function(e) {
          return _this.handleEvent(e);
        };
      })(this));
      return null;
    };

    Pack.prototype.getChunk = function(index, chunk) {
      var chunks, loader, resolve, resolver, script;
      chunks = this.chunks[chunk];
      if (this.map[index]) {
        resolver = (function(_this) {
          return function(clazz) {
            return new Promise(function(r) {
              var m;
              m = _this.getModule(index);
              if (clazz) {
                r(m[clazz]);
              } else {
                r(m);
              }
              return null;
            });
          };
        })(this);
      } else {
        if (!chunks) {
          chunks = this.chunks[chunk] = [];
          script = document.createElement('script');
          script.src = chunk;
          document.body.appendChild(script);
        }
        loader = {};
        resolve = (function(_this) {
          return function() {
            var clazz, m;
            clazz = loader.clazz;
            m = _this.getModule(index);
            if (clazz) {
              return loader.r(m[clazz]);
            } else {
              return loader.r(m);
            }
          };
        })(this);
        loader.resolve = resolve;
        chunks.push(loader);
        resolver = function(clazz) {
          loader.clazz = clazz;
          return new Promise(function(r) {
            return loader.r = r;
          });
        };
      }
      return resolver;
    };

    Pack.prototype.start = function() {
      this.getModule(this.mainIndex);
      return null;
    };

    Pack.prototype.addPack = function(pack) {
      var key, value;
      for (key in pack) {
        value = pack[key];
        if (!this.cfg.pack[key]) {
          this.cfg.pack[key] = value;
        } else {
          console.log("Error adding module: module '" + key + "' already exists");
        }
      }
      return null;
    };

    Pack.prototype.handleEvent = function(e) {
      var chunk, chunks, detail, i, len, loader, pack;
      detail = e.detail;
      if (detail) {
        detail.registered = true;
        pack = detail.pack;
        if (pack) {
          null;
          this.addPack(pack);
        } else {
          console.log("Error adding pack: pack doesn't exists in details: ", detail);
        }
      } else {
        console.log("Error adding pack: detail doesn't exist in event: ", event);
      }
      chunk = detail.chunk;
      if (!chunk) {
        if (detail.index === 0) {
          this.mainIndex = detail.startIndex;
        }
        if (++this.registered === this.cfg.total) {
          this.start();
        }
      } else {
        chunks = this.chunks[chunk];
        if (chunks) {
          for (i = 0, len = chunks.length; i < len; i++) {
            loader = chunks[i];
            loader.resolve();
          }
        }
      }
      return null;
    };

    return Pack;

  })();

  return new Pack();

}).call(this);

    packer.init(cfg);
})({
// /Users/JOA/Projects/workspaces/my/two-trees/examples/dist/js/01/main.js
0: function(module, exports, require) {
module.id = 'js/01/main.js';
// Generated by CoffeeScript 1.12.6
(function() {
  var AppView, DataTree, ViewNode, app, model, trees;

  trees = require(1);

  AppView = require(2);

  ViewNode = trees.ViewNode;

  DataTree = trees.DataTree;

  model = new DataTree({
    title: 'hello two-trees!',
    bgGreen: 255
  });

  app = ViewNode.create({
    tag: AppView,
    model: model
  });

  app.appendTo(document.querySelector('.app'));

}).call(this);


},
// /Users/JOA/Projects/workspaces/my/two-trees/examples/dist/js/two-trees/index.js
1: function(module, exports, require) {
module.id = 'js/two-trees/index.js';
// Generated by CoffeeScript 1.12.6
(function() {
  module.exports = require(3);

}).call(this);


},
// /Users/JOA/Projects/workspaces/my/two-trees/src/js/index.js
3: function(module, exports, require) {
module.id = '../../src/js/index.js';
// Generated by CoffeeScript 1.12.6
(function() {
  module.exports = {
    DataTree: require(5),
    ViewNode: require(8),
    CompNode: require(6)
  };

}).call(this);


},
// /Users/JOA/Projects/workspaces/my/two-trees/src/js/data-tree.js
5: function(module, exports, require) {
module.id = '../../src/js/data-tree.js';
// Generated by CoffeeScript 1.12.6
(function() {
  var TreeTwo, __id__, addOwner, removeOwner;

  __id__ = 0;

  TreeTwo = (function() {
    function TreeTwo(root) {
      this.nodeMap = {};
      this.bindings = {};
      this.history = [];
      this.historyIndex = 0;
      if (root) {
        this.setRoot(root);
      }
    }

    TreeTwo.prototype.setRoot = function(obj) {
      this.rootNode = this.createNode(null, '/', obj);
      return this.root = obj;
    };

    TreeTwo.prototype.getRoot = function() {
      if (!this.rootNode) {
        return null;
      }
      return this.rootNode.value;
    };

    TreeTwo.prototype.has = function(obj) {
      return typeof obj === 'object' && this.nodeMap[obj.__node_id__] !== void 0;
    };

    TreeTwo.prototype.bind = function(obj, name, callback) {
      var error, node, paths;
      node = typeof obj === 'object' ? this.nodeMap[obj.__node_id__] : null;
      if (!node) {
        console.error(error = 'Error: object not part of this tree: ', obj);
        throw new Error(error);
      }
      paths = {};
      this.addPaths(node, name, null, (function(_this) {
        return function(path) {
          var callbacks;
          callbacks = _this.bindings[path] || (_this.bindings[path] = []);
          if (callbacks.indexOf(callback) === -1) {
            callbacks.push(callback);
            return paths[path] = callback;
          }
        };
      })(this));
      return paths;
    };

    TreeTwo.prototype.unbind = function(paths) {
      var callback, callbacks, index, path, total, unbound;
      unbound = total = 0;
      for (path in paths) {
        callback = paths[path];
        callbacks = this.bindings[path];
        ++total;
        if (callbacks) {
          index = callbacks.indexOf(callback);
          if (index > -1) {
            ++unbound;
            callbacks.splice(index, 1);
          }
          if (callbacks.length === 0) {
            delete this.bindings[path];
          }
        }
      }
      return unbound === total;
    };

    TreeTwo.prototype.update = function(obj, name) {
      var error, node;
      node = typeof obj === 'object' ? this.nodeMap[obj.__node_id__] : this.rootNode;
      if (!node) {
        console.error(error = 'Error: object not part of this tree: ', obj);
        throw new Error(error);
      }
      this.currentActions = [];
      this.currentPaths = {};
      this.updatedMap = {};
      if (name !== void 0) {
        this.updateProp(node, name);
      } else {
        this.updateNode(node);
      }
      if (this.currentActions.length) {
        if (this.historyIndex < this.history.length) {
          this.history.length = this.historyIndex;
        }
        this.history.push(this.currentActions);
        ++this.historyIndex;
        this.currentActions.paths = this.currentPaths;
        this.dispatchBindings(this.currentPaths);
      }
      this.currentPaths = null;
      return false;
    };

    TreeTwo.prototype.undo = function() {
      var action, actions, j, len;
      if (this.historyIndex > 0) {
        actions = this.history[--this.historyIndex];
        for (j = 0, len = actions.length; j < len; j++) {
          action = actions[j];
          action.undo();
        }
        this.dispatchBindings(actions.paths);
      } else {
        console.log('undo not possible!!! ', this.historyIndex);
      }
      return null;
    };

    TreeTwo.prototype.redo = function() {
      var action, actions, j, len;
      if (this.historyIndex < this.history.length) {
        actions = this.history[this.historyIndex++];
        for (j = 0, len = actions.length; j < len; j++) {
          action = actions[j];
          action.redo();
        }
        this.dispatchBindings(actions.paths);
      } else {
        console.log('redo not possible!!! ', this.historyIndex);
      }
      return null;
    };

    TreeTwo.prototype.dispatchBindings = function(paths) {
      var callback, callbacks, called, dispatched, j, k, len, len1, name, node, parts, path, pcallbacks, ppath, value;
      called = [];
      dispatched = false;
      for (path in paths) {
        node = paths[path];
        parts = path.split('/');
        name = parts.pop() || '';
        ppath = parts.join('/') + '/*';
        callbacks = this.bindings[path];
        pcallbacks = this.bindings[ppath];
        value = node.value;
        if (callbacks) {
          for (j = 0, len = callbacks.length; j < len; j++) {
            callback = callbacks[j];
            if (called.indexOf(callback) === -1) {
              callback(value[name], value, name, path);
              dispatched = true;
              called.push(callback);
            }
          }
        }
        if (pcallbacks) {
          for (k = 0, len1 = pcallbacks.length; k < len1; k++) {
            callback = pcallbacks[k];
            callback(value);
            dispatched = true;
          }
        }
      }
      return dispatched;
    };

    TreeTwo.prototype.createNode = function(owner, name, value) {
      var i, id, j, key, l, node, props, ref;
      if (value) {
        node = this.nodeMap[value.__node_id__];
      }
      if (!node) {
        id = ++__id__;
        node = {
          id: id,
          value: value,
          type: 'value',
          owners: {}
        };
        this.nodeMap[node.id] = node;
        if (owner) {
          this.addPaths(owner, name, this.currentPaths);
        }
        if (value) {
          if (value.constructor.name === 'Array') {
            Object.defineProperty(value, '__node_id__', {
              value: node.id,
              enumerable: false
            });
            node.type = 'array';
            node.props = props = [];
            l = value.length;
            for (i = j = 0, ref = l; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
              props[i] = this.createNode(node, i, value[i]);
            }
          } else if (value.constructor.name === 'Object') {
            Object.defineProperty(value, '__node_id__', {
              value: node.id,
              enumerable: false
            });
            node.type = 'object';
            node.props = props = {};
            for (key in value) {
              props[key] = this.createNode(node, key, value[key]);
            }
          }
        }
      }
      if (owner) {
        addOwner(node, owner, name);
      }
      return node;
    };

    TreeTwo.prototype.updateNode = function(node) {
      var i, j, key, keys, l, pl, props, ref, value, vl;
      if (this.updatedMap[node.id]) {
        return true;
      }
      this.updatedMap[node.id] = true;
      value = node.value;
      props = node.props;
      if (node.type === 'array') {
        pl = props.length;
        vl = value.length;
        l = pl > vl ? pl : vl;
        for (i = j = 0, ref = l; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
          this.updateProp(node, i);
        }
        if (pl !== vl) {
          this.addChangeLengthAction(node, pl, vl);
          props.length = vl;
        }
      } else if (node.type === 'object') {
        keys = Object.assign({}, props, value);
        for (key in keys) {
          this.updateProp(node, key);
        }
      }
      return null;
    };

    TreeTwo.prototype.updateProp = function(node, name) {
      var child, next, type, value;
      child = node.props[name];
      value = node.value[name];
      if (!child && value === void 0) {
        console.error("Error: either old or new value must exist for property \"" + name + "\" of node: ", node);
        return false;
      }
      if (!child) {
        child = this.createNode(node, name, value);
        this.addCreateAction(child, node, name);
      } else if (value === void 0) {
        if (child.type !== 'value') {
          this.updateNode(child);
        }
        removeOwner(child, node, name);
        this.addRemoveAction(child, node, name);
      } else {
        if (child.value === value) {
          if (child.type !== 'value') {
            if (!this.updatedMap[child.id]) {
              this.updateNode(child);
            }
          } else {
            return false;
          }
        } else {
          type = 'value';
          if (value) {
            if (value.constructor.name === 'Array') {
              type = 'array';
            } else if (value.constructor.name === 'Object') {
              type = 'object';
            }
          }
          if (type !== 'value' || type !== child.type) {
            removeOwner(child, node, name);
            next = this.createNode(node, name, value);
            this.addSwapAction(child, node, name, next);
          } else {
            this.addChangeValueAction(child, node, name, value);
            child.value = value;
          }
        }
      }
      return null;
    };

    TreeTwo.prototype.addCreateAction = function(node, owner, name) {
      this.addPaths(owner, name, this.currentPaths);
      this.currentActions.push({
        type: 'create',
        undo: function() {
          return removeOwner(node, owner, name);
        },
        redo: function() {
          return addOwner(node, owner, name);
        }
      });
      return null;
    };

    TreeTwo.prototype.addRemoveAction = function(node, owner, name) {
      this.addPaths(owner, name, this.currentPaths);
      this.currentActions.push({
        type: 'remove',
        undo: function() {
          return addOwner(node, owner, name);
        },
        redo: function() {
          return removeOwner(node, owner, name);
        }
      });
      return null;
    };

    TreeTwo.prototype.addSwapAction = function(node, owner, name, next) {
      this.addPaths(owner, name, this.currentPaths);
      this.currentActions.push({
        type: 'swap',
        undo: function() {
          removeOwner(next, owner, name);
          return addOwner(node, owner, name);
        },
        redo: function() {
          removeOwner(node, owner, name);
          return addOwner(next, owner, name);
        }
      });
      return null;
    };

    TreeTwo.prototype.addChangeValueAction = function(node, owner, name, newValue) {
      this.addPaths(owner, name, this.currentPaths);
      this.currentActions.push({
        type: 'changeValue',
        oldValue: node.value,
        undo: function() {
          node.value = this.oldValue;
          return owner.value[name] = this.oldValue;
        },
        redo: function() {
          node.value = newValue;
          return owner.value[name] = newValue;
        }
      });
      return null;
    };

    TreeTwo.prototype.addChangeLengthAction = function(node, oldLength, newLength) {
      this.currentActions.push({
        type: 'changeLength',
        undo: function() {
          return node.value.length = node.props.length = oldLength;
        },
        redo: function() {
          return node.value.length = node.props.length = newLength;
        }
      });
      return null;
    };

    TreeTwo.prototype.addPaths = function(node, path, paths, callback, root) {
      var id, n, names, owner, ref;
      path = path === null || path === void 0 ? '' : path + '';
      if (path) {
        path = '/' + path;
      }
      paths = paths || {};
      root = root || node;
      if (node === this.rootNode) {
        paths[path] = root;
        if (callback) {
          callback(path);
        }
      } else {
        ref = node.owners;
        for (id in ref) {
          names = ref[id];
          owner = this.nodeMap[id];
          for (n in names) {
            this.addPaths(owner, n + path, paths, callback, root);
          }
        }
      }
      return paths;
    };

    return TreeTwo;

  })();

  addOwner = function(node, owner, name) {
    var names, owners;
    owners = node.owners;
    names = owners[owner.id] || (owners[owner.id] = {});
    if (names[name]) {
      return null;
    }
    names[name] = true;
    owner.props[name] = node;
    owner.value[name] = node.value;
    return null;
  };

  removeOwner = function(node, owner, name) {
    var names, owners;
    owners = node.owners;
    names = owners[owner.id];
    if (!names || !names[name]) {
      return null;
    }
    delete names[name];
    delete owner.props[name];
    delete owner.value[name];
    return null;
  };

  if (Object.defineProperty === void 0) {
    Object.defineProperty = function(obj, name, data) {
      return obj[name] = data.value;
    };
  }

  if (typeof module !== 'undefined') {
    module.exports = TreeTwo;
  }

  if (typeof window !== 'undefined') {
    window.TreeTwo = TreeTwo;
  } else {
    this.TreeTwo = TreeTwo;
  }

}).call(this);


},
// /Users/JOA/Projects/workspaces/my/two-trees/src/js/view-node.js
8: function(module, exports, require) {
module.id = '../../src/js/view-node.js';
// Generated by CoffeeScript 1.12.6
(function() {
  var ViewNode, _, __id__, addChild, addChildAt, addChildNode, appendTo, before, behind, change, checkDom, classMap, cleanMap, create, createTagFromDom, createTagView, createTextFromDom, createTextView, createView, dirty, dirtyMap, disposeNode, domList, injectNode, j, lastTime, len, map, nodeMap, performUpdate, rafTimeout, register, remove, removeChild, removeChildAt, removeChildNode, removeEvents, replace, replaceChildNode, unmap, update, updateAttr, updateBool, updateChildren, updateClass, updateEvent, updateNow, updateProperties, updateStyle, updateText, vendor, vendors,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    slice = [].slice;

  _ = require(9);

  __id__ = 0;

  ViewNode = (function() {
    ViewNode.DEBUG = true;

    ViewNode.CHECK_DOM = true;

    ViewNode.DEFAULT_CLASS = ViewNode;

    ViewNode.create = create;

    ViewNode.map = map;

    ViewNode.unmap = unmap;

    function ViewNode(cfg) {
      this.update = bind(this.update, this);
      this.register(cfg);
      this.updateCfg(cfg);
      this.updateNow();
    }

    ViewNode.prototype.register = function(cfg) {
      return register(this, cfg);
    };

    ViewNode.prototype.updateNow = function(cfg) {
      return updateNow(this, cfg);
    };

    ViewNode.prototype.createView = function(cfg) {
      return createView(this, cfg);
    };

    ViewNode.prototype.appendTo = function(dom) {
      return appendTo(this, dom);
    };

    ViewNode.prototype.behind = function(dom) {
      return behind(this, dom);
    };

    ViewNode.prototype.before = function(dom) {
      return before(this, dom);
    };

    ViewNode.prototype.replace = function(dom) {
      return replace(this, dom);
    };

    ViewNode.prototype.remove = function(dom) {
      return remove(this, dom);
    };

    ViewNode.prototype.addChild = function(child) {
      return addChild(this, child);
    };

    ViewNode.prototype.addChildAt = function(child, index) {
      return addChildAt(this, child, index);
    };

    ViewNode.prototype.removeChild = function(child) {
      return removeChild(this, child);
    };

    ViewNode.prototype.removeChildAt = function(index) {
      return removeChildAt(this, index);
    };

    ViewNode.prototype.updateCfg = function(cfg) {
      return (this.cfg = cfg) || true;
    };

    ViewNode.prototype.update = function() {
      return update(this);
    };

    ViewNode.prototype.render = function() {
      return this.cfg;
    };

    ViewNode.prototype.dispose = function() {};

    ViewNode.prototype.onMount = function() {};

    ViewNode.prototype.onUnmount = function() {
      return this.keep;
    };

    ViewNode.prototype.onAdded = function() {};

    ViewNode.prototype.onRemoved = function() {};

    return ViewNode;

  })();

  classMap = {};

  nodeMap = {};

  dirtyMap = {};

  cleanMap = {};

  domList = [];

  dirty = false;

  rafTimeout = null;

  create = function(cfg, root) {
    var clazz, tag;
    if (root == null) {
      root = null;
    }
    if (_.isNot(cfg)) {
      throw new Error("A node can't be created from empty cfg.");
    }
    if (!_.extendsNode(clazz = cfg.clazz)) {
      if (!_.extendsNode(clazz = cfg.tag)) {
        clazz = null;
        if (_.isDom(cfg)) {
          tag = cfg.nodeName.toLowerCase();
        }
        if (_.isString(tag = tag || cfg.tag)) {
          clazz = classMap[tag];
        }
      }
    }
    clazz = clazz || ViewNode.DEFAULT_CLASS;
    return new clazz(cfg);
  };

  register = function(node, cfg) {
    node.parent = null;
    node.depth = 0;
    node.keep = false;
    if (!node.__id__) {
      node.__id__ = ++__id__;
      nodeMap[node.__id__] = node;
    }
    node.__id__;
    return injectNode(node, cfg);
  };

  injectNode = function(node, cfg) {
    var inject, key, value;
    if (_.isNot(node.__i__) && cfg && cfg.__i__) {
      inject = node.__i__ = cfg.__i__;
      for (key in inject) {
        value = inject[key];
        node[key] = value;
      }
    }
    return node;
  };

  createView = function(node, cfg) {
    var tag;
    if (node.view) {
      throw new Error("View already exists");
    }
    if (_.isNot(cfg = node.render())) {
      throw new Error("A view for an empty cfg can't be created.");
    }
    switch (true) {
      case _.isSimple(cfg):
        createTextView(node, node.cfg = {
          text: cfg + ''
        });
        break;
      case _.isDom(cfg):
        createTagFromDom(node, null, cfg);
        break;
      case _.isDomText(cfg):
        createTextFromDom(node, null, cfg);
        break;
      default:
        tag = cfg.tag;
        switch (true) {
          case _.isNot(tag):
            createTextView(node, cfg);
            break;
          case _.isString(tag):
            createTagView(node, cfg);
            break;
          case _.isDom(tag):
            createTagFromDom(node, cfg, tag);
            break;
          case _.isDomText(tag):
            createTextFromDom(node, cfg, tag);
            break;
          default:
            if (_.extendsNode(tag)) {
              throw new Error("A tag must be a string or a HTMLElement, you specified a ViewNode class.");
            }
            throw new Error("A tag must be a string or a HTMLElement.");
        }
    }
    if (ViewNode.CHECK_DOM) {
      domList.push(node.view);
    }
    return node;
  };

  createTextView = function(node, cfg) {
    var text;
    text = cfg.text;
    if (_.isFunc(text)) {
      text = text();
    }
    if (!_.isSimple(text)) {
      throw new Error("The text for a text node must be a string, number or bool.");
    }
    node.text = text;
    node.tag = cfg.tag = void 0;
    node.kind = ViewNode.TEXT_KIND;
    return node.view = document.createTextNode(text);
  };

  createTextFromDom = function(node, cfg, dom) {
    var text;
    if (ViewNode.CHECK_DOM) {
      checkDom(dom);
    }
    node.text = dom.nodeValue;
    node.tag = null;
    node.kind = ViewNode.TEXT_KIND;
    node.view = dom;
    if (cfg) {
      text = cfg.text;
      if (_.isNot(text)) {
        cfg.text = node.text;
      } else {
        if (_.isFunc(text)) {
          text = text();
        }
        if (!_.isSimple(text)) {
          throw new Error("The text for a text node must be a string, number or bool.");
        }
        node.text = dom.nodeValue = text;
      }
    } else {
      cfg = node.cfg = {
        text: node.text
      };
    }
    cfg.tag = void 0;
    return node;
  };

  createTagView = function(node, cfg) {
    var tag;
    node.tag = tag = cfg.tag;
    node.kind = ViewNode.TAG_KIND;
    node.view = document.createElement(tag);
    return node;
  };

  createTagFromDom = function(node, cfg, dom) {
    if (ViewNode.CHECK_DOM) {
      checkDom(dom);
    }
    node.tag = dom.nodeName.toLowerCase();
    node.kind = ViewNode.TAG_KIND;
    node.view = dom;
    cfg = cfg || (node.cfg = {});
    cfg.tag = node.tag;
    return node;
  };

  updateNow = function(node, cfg) {
    cfg = cfg || node.render();
    if (_.isNot(node.view)) {
      node.createView(cfg);
    }
    if (_.isSimple(cfg) || (!cfg.tag && (_.isSimple(cfg.text) || _.isFunc(cfg.text)))) {
      updateText(node, cfg);
    } else {
      updateProperties(node, cfg);
    }
    return node;
  };

  update = function(node) {
    var id;
    id = node != null ? node.__id__ : void 0;
    if (!id) {
      throw new Error("Can't update node. ViewNode doesn't exist.");
    }
    if (!dirty) {
      window.cancelAnimationFrame(rafTimeout);
      rafTimeout = window.requestAnimationFrame(performUpdate);
    }
    dirtyMap[id] = true;
    dirty = true;
    return null;
  };

  performUpdate = function() {
    var cfg, id, j, len, n, node, nodes;
    window.cancelAnimationFrame(rafTimeout);
    dirty = false;
    cleanMap = {};
    nodes = [];
    for (id in dirtyMap) {
      if (n = nodeMap[id]) {
        nodes.push(n);
      }
    }
    nodes.sort(function(a, b) {
      return a.depth - b.depth;
    });
    for (j = 0, len = nodes.length; j < len; j++) {
      node = nodes[j];
      if (!node.view || !nodeMap[node.__id__] || cleanMap[node.__id__]) {
        continue;
      }
      cfg = node.render();
      if (_.isNot(node.tag) && _.isNot(cfg.tag)) {
        updateText(node, cfg);
      } else if (!(node.tag === cfg.tag || node.constructor === cfg.tag)) {
        replaceChildNode(node, cfg);
      } else {
        updateProperties(node, cfg);
      }
    }
    dirtyMap = {};
    return null;
  };

  updateText = function(node, cfg) {
    var text;
    cleanMap[node.__id__] = true;
    text = _.isFunc(cfg.text) ? cfg.text() : _.isString(cfg) ? cfg : cfg.text;
    if (node.text !== text) {
      node.cfg = cfg;
      node.text = text;
      node.view.nodeValue = text;
    }
    return null;
  };

  updateProperties = function(node, cfg) {
    var attr, attrs, child, name, propMap, text, value;
    cleanMap[node.__id__] = true;
    if (cfg instanceof ViewNode) {
      cfg = cfg.render();
    }
    attrs = node.attrs || (node.attrs = {});
    propMap = Object.assign({}, attrs, node.events, cfg);
    if (propMap.hasOwnProperty('className')) {
      updateClass(node, cfg.className);
    }
    if (propMap.hasOwnProperty('style')) {
      updateStyle(node, cfg.style);
    }
    if (propMap.hasOwnProperty('text')) {
      if (_.isFunc(text = cfg.text)) {
        text = text();
      }
      if (_.isSimple(text)) {
        updateChildren(node, [text]);
      } else if (_.isDomText(text)) {
        updateChildren(node, [text]);
      }
      if (ViewNode.DEBUG) {
        if (cfg.hasOwnProperty('child')) {
          console.warn('child specified while text exists: ', cfg);
        }
        if (cfg.hasOwnProperty('children')) {
          console.warn('children specified while text exists', cfg);
        }
      }
    } else if (propMap.hasOwnProperty('child')) {
      if (_.isFunc(child = cfg.child)) {
        child = child();
      }
      updateChildren(node, [child]);
      if (ViewNode.DEBUG) {
        if (cfg.hasOwnProperty('children')) {
          console.warn('children specified while text exists', cfg);
        }
      }
    } else if (propMap.hasOwnProperty('children')) {
      updateChildren(node, cfg.children);
    }
    delete propMap.tag;
    delete propMap.clazz;
    delete propMap.__i__;
    delete propMap.keep;
    delete propMap.text;
    delete propMap.child;
    delete propMap.className;
    delete propMap.style;
    delete propMap.children;
    delete propMap.bindings;
    for (name in propMap) {
      attr = attrs[name];
      value = cfg[name];
      if (_.isBool(value) || (_.isNot(value) && _.isBool(attr))) {
        updateBool(node, value, name);
      } else {
        if (/^on/.test(name)) {
          updateEvent(node, value, name);
        } else {
          if (_.isFunc(value)) {
            value = value();
          }
          if (_.isBool(value)) {
            updateBool(node, value, name);
          } else {
            updateAttr(node, value, name);
          }
        }
      }
    }
    return null;
  };

  updateAttr = function(node, value, name) {
    var view;
    node.attrs[name] = node.view.getAttribute(name);
    if (node.attrs[name] === value) {
      return;
    }
    view = node.view;
    if (value !== null && value !== void 0) {
      view.setAttribute(name, value);
      view[name] = value;
      node.attrs[name] = value;
    } else {
      view.removeAttribute(name);
      delete view[name];
      delete node.attrs[name];
    }
    return null;
  };

  updateBool = function(node, value, name) {
    var view;
    node.attrs[name] = node.view[name];
    if (node.attrs[name] === value) {
      return;
    }
    view = node.view;
    if (_.isNot(value)) {
      view.removeAttribute(name);
      view[name] = false;
      delete node.attrs[name];
    } else if (value === false) {
      view.removeAttribute(name);
      view[name] = false;
      node.attrs[name] = false;
    } else {
      view.setAttribute(name, '');
      view[name] = true;
      node.attrs[name] = true;
    }
    return null;
  };

  updateClass = function(node, value) {
    if (_.isFunc(value)) {
      value = value();
    }
    node.attrs.className = node.view.className;
    if (node.attrs.className === value) {
      return;
    }
    if (value) {
      node.view.className = value;
      node.attrs.className = value;
    } else {
      node.view.className = void 0;
      delete node.attrs.className;
    }
    return null;
  };

  updateStyle = function(node, style) {
    var attrs, changed, css, name, prop, propMap, sobj, value, view;
    view = node.view;
    attrs = node.attrs;
    sobj = attrs.style;
    if (!view) {
      return;
    }
    if (_.isFunc(style)) {
      style = style();
    }
    if (_.isNot(style)) {
      view.style.cssText = null;
      delete attrs.style;
    } else if (_.isString(style)) {
      view.style.cssText = style;
      attrs.style = style;
    } else {
      css = '';
      sobj = _.isObject(sobj) ? sobj : {};
      changed = false;
      propMap = Object.assign({}, style, sobj);
      for (name in propMap) {
        value = style[name];
        if (value !== sobj[name]) {
          changed = true;
        }
        sobj[name] = value;
        if (_.isNot(value)) {
          delete sobj[name];
        } else {
          prop = _.normalizeName(name);
          css += prop + ': ' + value + '; ';
        }
      }
      if (changed) {
        if (css.length) {
          css = css.slice(0, -1);
          view.style.cssText = css;
          attrs.style = sobj;
        } else {
          view.style.cssText = null;
          delete attrs.style;
        }
      }
    }
    return null;
  };

  updateEvent = function(node, callback, name) {
    var events, listener, type, view;
    events = node.events || (node.events = {});
    view = node.view;
    type = _.normalizeEvent(name);
    listener = events[name];
    if (_.isString(callback)) {
      callback = node[name];
    }
    if (listener !== callback) {
      if (listener) {
        view.removeEventListener(type, listener);
        delete events[name];
      }
      if (callback) {
        view.addEventListener(type, callback);
        events[name] = callback;
      }
    }
    return null;
  };

  removeEvents = function(node) {
    var events, listener, name, type, view;
    events = node.events;
    if (!events) {
      return null;
    }
    view = node.view;
    for (name in events) {
      listener = events[name];
      type = _.normalizeEvent(name);
      if (listener) {
        view.removeEventListener(type, listener);
      }
      delete events[name];
    }
    node.events = null;
    return null;
  };

  updateChildren = function(node, cfgs) {
    var cfg, child, children, i, j, l, ref;
    children = node.children || (node.children = []);
    if (_.isFunc(cfgs)) {
      cfgs = cfgs();
    }
    cfgs = _.isString(cfgs) ? [cfgs] : cfgs || [];
    l = children.length > cfgs.length ? children.length : cfgs.length;
    for (i = j = 0, ref = l; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      child = children[i];
      cfg = cfgs[i];
      if (_.isFunc(cfg)) {
        cfg = cfg();
      }
      if (!child && !cfg) {
        throw new Error(("DOM ERROR: either child or cfg at index " + i + " must be defined. Got ") + child + ', ' + cfg);
      }
      if (!child) {
        addChildNode(node, cfg);
      } else if (!cfg) {
        removeChildNode(child);
      } else {
        change(child, cfg);
      }
    }
    children.length = cfgs.length;
    return null;
  };

  change = function(node, cfg) {
    var needsUpdate;
    needsUpdate = node.updateCfg(cfg);
    if (node === cfg || node.constructor === cfg.tag) {
      if (needsUpdate) {
        updateProperties(node, node.render());
      }
    } else if (node.tag !== cfg.tag && (node.tag || cfg.tag) || cfg instanceof ViewNode) {
      replaceChildNode(node, cfg);
    } else if (_.isNot(node.tag)) {
      updateText(node, cfg);
    } else if (needsUpdate) {
      updateProperties(node, cfg);
    }
    return false;
  };

  addChildNode = function(node, cfg) {
    var child;
    if (cfg instanceof ViewNode) {
      child = cfg;
    } else {
      if (!cfg.__i__) {
        cfg.__i__ = node.__i__;
      }
      child = create(cfg);
    }
    node.children.push(child);
    node.view.appendChild(child.view);
    child.parent = node;
    child.depth = node.depth + 1;
    child.onMount();
    return null;
  };

  removeChildNode = function(child) {
    var node, view;
    node = child.parent;
    view = child.view;
    disposeNode(child);
    node.view.removeChild(view);
    return null;
  };

  replaceChildNode = function(child, cfg) {
    var children, i, node, view;
    node = child.parent;
    children = node.children;
    i = children.indexOf(child);
    view = child.view;
    disposeNode(child);
    if (cfg instanceof ViewNode) {
      child = cfg;
      cfg = child.render();
    } else {
      if (!cfg.__i__) {
        cfg.__i__ = node.__i__;
      }
      child = create(cfg);
    }
    children[i] = child;
    child.parent = node;
    child.depth = node.depth + 1;
    node.view.replaceChild(child.view, view);
    if (_.isSimple(cfg) || (!cfg.tag && (_.isSimple(cfg.text) || _.isFunc(cfg.text)))) {
      updateText(child, cfg);
    } else {
      updateProperties(child, cfg);
    }
    child.onMount();
    return null;
  };

  disposeNode = function(node) {
    var child, j, len, ref;
    if (node.onUnmount() !== true) {
      removeEvents(node);
      if (node.children && node.children.length) {
        ref = node.children;
        for (j = 0, len = ref.length; j < len; j++) {
          child = ref[j];
          disposeNode(child);
        }
      }
      delete node.children;
      delete node.view;
      delete nodeMap[node.__id__];
    }
    node.parent = null;
    node.depth = void 0;
    return null;
  };

  checkDom = function(dom) {
    if (domList.indexOf(dom) > -1) {
      throw new Error('Dom element already controlled by another node.');
    }
  };

  appendTo = function(node, dom) {
    if (ViewNode.CHECK_DOM) {
      checkDom(dom);
    }
    return dom.appendChild(node.view);
  };

  behind = function(node, dom) {
    var next, parent;
    parent = dom.parentNode;
    next = dom.nextSibling;
    if (ViewNode.CHECK_DOM) {
      checkDom(parent);
    }
    if (next) {
      return parent.insertBefore(node.view, next);
    } else {
      return parent.appendChild(node.view);
    }
  };

  before = function(node, dom) {
    var parent;
    parent = dom.parentNode;
    if (ViewNode.CHECK_DOM) {
      checkDom(parent);
    }
    return parent.insertBefore(node.view, dom);
  };

  replace = function(node, dom) {
    var parent;
    parent = dom.parentNode;
    if (ViewNode.CHECK_DOM) {
      checkDom(parent);
      checkDom(dom);
    }
    return parent.replaceChild(node.view, dom);
  };

  remove = function(node) {
    var parent;
    parent = node.view.parentNode;
    if (ViewNode.CHECK_DOM) {
      checkDom(parent);
    }
    return parent.removeChild(node.view);
  };

  addChild = function(node, child) {};

  addChildAt = function(node, child, index) {};

  removeChild = function(node, child) {};

  removeChildAt = function(node, index) {};

  map = function(tag, clazz, overwrite) {
    if (overwrite == null) {
      overwrite = false;
    }
    if (_.isNot(classMap[tag]) || overwrite) {
      classMap[tag] = clazz;
    }
    return null;
  };

  unmap = function(tag) {
    delete classMap[tag];
    return null;
  };

  if (typeof window !== 'undefined') {
    lastTime = 0;
    vendors = ['webkit', 'moz'];
    for (j = 0, len = vendors.length; j < len; j++) {
      vendor = vendors[j];
      if (window.requestAnimationFrame) {
        break;
      }
      window.requestAnimationFrame = window[vendor + 'RequestAnimationFrame'];
      window.cancelAnimationFrame = window[vendor + 'CancelAnimationFrame'] || window[vendor + 'CancelRequestAnimationFrame'];
    }
    if (!window.requestAnimationFrame) {
      window.requestAnimationFrame = function(callback) {
        var currTime, id, rAF, timeToCall;
        currTime = Date.now();
        timeToCall = Math.max(0, 16 - currTime + lastTime);
        rAF = function() {
          return callback(currTime + timeToCall);
        };
        id = window.setTimeout(rAF, timeToCall);
        lastTime = currTime + timeToCall;
        return id;
      };
    }
    if (!window.cancelAnimationFrame) {
      window.cancelAnimationFrame = function(id) {
        clearTimeout(id);
        return null;
      };
    }
  }

  if (typeof Object.assign === 'undefined') {
    Object.assign = function() {
      var args, k, key, len1, src, target;
      target = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      for (k = 0, len1 = args.length; k < len1; k++) {
        src = args[k];
        for (key in src) {
          target[key] = src[key];
        }
      }
      return target;
    };
  }

  ViewNode.create = create;

  ViewNode.map = map;

  ViewNode.unmap = unmap;

  if (typeof module !== 'undefined') {
    module.exports = ViewNode;
  }

  if (typeof window !== 'undefined') {
    window.ViewNode = ViewNode;
  } else {
    this.ViewNode = ViewNode;
  }

}).call(this);


},
// /Users/JOA/Projects/workspaces/my/two-trees/src/js/utils.js
9: function(module, exports, require) {
module.id = '../../src/js/utils.js';
// Generated by CoffeeScript 1.12.6
(function() {
  var extendsNode, getOrCall, isBool, isDom, isDomText, isFunc, isNot, isNumber, isObject, isSimple, isString, normalizeEvent, normalizeName;

  getOrCall = function(value) {
    if (isFunc(value)) {
      return value();
    } else {
      return value;
    }
  };

  isBool = function(value) {
    return typeof value === 'boolean';
  };

  isNumber = function(value) {
    return typeof value === 'number';
  };

  isString = function(value) {
    return typeof value === 'string' || value === value + '';
  };

  isObject = function(value) {
    return typeof value === 'object';
  };

  isFunc = function(value) {
    return typeof value === 'function';
  };

  isDom = function(value) {
    return value instanceof HTMLElement;
  };

  isDomText = function(value) {
    return value instanceof Text;
  };

  isNot = function(value) {
    return value === null || value === void 0;
  };

  isSimple = function(value) {
    var t;
    return (t = typeof value) === 'string' || t === 'number' || t === 'boolean';
  };

  extendsNode = function(value) {
    return isFunc(value) && ((value.prototype instanceof ViewNode) || value === ViewNode);
  };

  normalizeName = function(name) {
    return name.replace(/[A-Z]/g, function(name) {
      return '-' + name.toLowerCase();
    });
  };

  normalizeEvent = function(type) {
    type = type.slice(2);
    return type.charAt(0).toLowerCase() + normalizeName(type.slice(1));
  };

  module.exports = {
    getOrCall: getOrCall,
    isBool: isBool,
    isNumber: isNumber,
    isString: isString,
    isObject: isObject,
    isFunc: isFunc,
    isDom: isDom,
    isDomText: isDomText,
    isNot: isNot,
    isSimple: isSimple,
    extendsNode: extendsNode,
    normalizeName: normalizeName,
    normalizeEvent: normalizeEvent
  };

}).call(this);


},
// /Users/JOA/Projects/workspaces/my/two-trees/src/js/comp-node.js
6: function(module, exports, require) {
module.id = '../../src/js/comp-node.js';
// Generated by CoffeeScript 1.12.6
(function() {
  var CompNode, ViewNode,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ViewNode = require(8);

  CompNode = (function(superClass) {
    extend(CompNode, superClass);

    function CompNode() {
      return CompNode.__super__.constructor.apply(this, arguments);
    }

    CompNode.prototype.register = function(cfg) {
      var binding, bindings, i, len;
      CompNode.__super__.register.call(this, cfg);
      this.paths = [];
      if (typeof cfg === 'object') {
        if (!this.tree) {
          throw new Error("Tree not injected.");
        }
        if (bindings = cfg.bindings) {
          for (i = 0, len = bindings.length; i < len; i++) {
            binding = bindings[i];
            if (Array.isArray(binding)) {
              this.bind(binding[0], binding[1]);
            } else {
              this.bind(binding);
            }
          }
        }
      }
      return this;
    };

    CompNode.prototype.onUnmount = function() {
      this.unbindAll();
      return CompNode.__super__.onUnmount.call(this);
    };

    CompNode.prototype.bind = function(obj, name, callback) {
      return this.paths.push(this.tree.bind(obj, name, callback || this.update));
    };

    CompNode.prototype.unbind = function(paths) {
      var index;
      index = this.paths.indexOf(paths);
      if (index === -1) {
        console.error('Paths not bound by this comp. paths = ', paths);
        throw new Error('Paths not bound by this comp.');
      }
      this.paths.splice(index, 1);
      return this.tree.unbind(paths);
    };

    CompNode.prototype.unbindAll = function() {
      var allUnbound, i, len, paths, ref;
      allUnbound = true;
      ref = this.paths;
      for (i = 0, len = ref.length; i < len; i++) {
        paths = ref[i];
        allUnbound = allUnbound && this.tree.unbind(paths);
      }
      this.paths = [];
      return allUnbound;
    };

    return CompNode;

  })(ViewNode);

  module.exports = CompNode;

}).call(this);


},
// /Users/JOA/Projects/workspaces/my/two-trees/examples/dist/js/01/app-view.js
2: function(module, exports, require) {
module.id = 'js/01/app-view.js';
// Generated by CoffeeScript 1.12.6
(function() {
  var AppView, ViewNode,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ViewNode = require(1).ViewNode;

  AppView = (function(superClass) {
    extend(AppView, superClass);

    function AppView(cfg) {
      this.redo = bind(this.redo, this);
      this.undo = bind(this.undo, this);
      this.onClick = bind(this.onClick, this);
      AppView.__super__.constructor.call(this, cfg);
    }

    AppView.prototype.updateCfg = function(cfg) {
      AppView.__super__.updateCfg.call(this, cfg);
      this.model = cfg.model;
      this.data = cfg.model.root;
      this.title = this.data.title;
      return this.data.title = this.title + " click me!";
    };

    AppView.prototype.onClick = function() {
      this.data.bgGreen = (Math.random() * 100 + 155) >> 0;
      this.data.title = this.title + (" clicks: " + (this.model.historyIndex + 1));
      this.model.update();
      this.update();
      return null;
    };

    AppView.prototype.undo = function() {
      this.model.undo();
      return this.update();
    };

    AppView.prototype.redo = function() {
      this.model.redo();
      return this.update();
    };

    AppView.prototype.render = function() {
      return {
        tag: 'div',
        children: [
          {
            tag: 'h1',
            className: 'my-class',
            style: "background-color: rgb(0," + this.data.bgGreen + ",0);",
            onClick: this.onClick,
            children: [
              {
                tag: 'div',
                style: 'padding: 20px;',
                children: this.data.title
              }
            ]
          }, {
            tag: 'button',
            disabled: this.model.historyIndex < 1,
            onClick: this.undo,
            children: 'undo'
          }, {
            tag: 'button',
            disabled: this.model.historyIndex >= this.model.history.length,
            onClick: this.redo,
            children: 'redo'
          }
        ]
      };
    };

    return AppView;

  })(ViewNode);

  module.exports = AppView;

}).call(this);


}
});
//# sourceMappingURL=main.pack.js.map