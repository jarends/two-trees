{"version":3,"file":"main.pack.js","sourceRoot":"","sources":["main.pack.js"],"sections":[{"offset":{"line":186,"column":0},"map":{"version":3,"file":"main.js","sourceRoot":"","sources":["../../../03-bindings/main.coffee"],"names":[],"mappings":";AAAA;AAAA,MAAA;;EAAA,KAAA,GAAW,OAAA,CAAQ,cAAR;;EACX,OAAA,GAAW,OAAA,CAAQ,YAAR;;EACX,QAAA,GAAW,KAAK,CAAC;;EACjB,QAAA,GAAW,KAAK,CAAC;;EACjB,QAAA,GAAW,KAAK,CAAC;;EAGjB,QAAQ,CAAC,aAAT,GAAyB;;EAGzB,KAAA,GAAQ,IAAI,QAAJ,CACJ;IAAA,KAAA,EAAS,kBAAT;IACA,OAAA,EAAS,GADT;IAEA,MAAA,EAAS,CAFT;GADI;;EAMR,GAAA,GAAM,QAAQ,CAAC,MAAT,CACF;IAAA,GAAA,EAAK,OAAL;IACA,KAAA,EACI;MAAA,IAAA,EAAM,KAAN;KAFJ;GADE;;EAMN,GAAG,CAAC,QAAJ,CAAa,QAAQ,CAAC,aAAT,CAAuB,MAAvB,CAAb;;EAIA,MAAM,CAAC,KAAP,GAAe;;EACf,MAAM,CAAC,IAAP,GAAe,KAAK,CAAC;AA3BrB","sourcesContent":["trees    = require '../two-trees'\nAppView  = require './app-view'\nDataTree = trees.DataTree\nViewNode = trees.ViewNode\nCompNode = trees.CompNode\n\n# set CompNode as default class for each node to enable bindings\nViewNode.DEFAULT_CLASS = CompNode\n\n\nmodel = new DataTree\n    title:   'hello two-trees!'\n    bgGreen: 255\n    clicks:  0\n\n\napp = ViewNode.create\n    tag: AppView\n    __i__:\n        tree: model\n\n\napp.appendTo document.querySelector '.app'\n\n\n# expose model for testing bindings in console\nwindow.model = model\nwindow.data  = model.root\n\n\n# in console type:\n#\n# data.clicks = 1\n# model.update()\n"]}},{"offset":{"line":228,"column":0},"map":{"version":3,"file":"../two-trees/index.js","sourceRoot":"","sources":["../../../two-trees/index.coffee"],"names":[],"mappings":";AAAA;EAAA,MAAM,CAAC,OAAP,GAAiB,OAAA,CAAQ,oBAAR;AAAjB","sourcesContent":["module.exports = require '../../../../src/js'"]}},{"offset":{"line":239,"column":0},"map":{"version":3,"file":"../../../../src/js/index.js","sourceRoot":"","sources":["../../../../../../../../../../src/coffee/index.coffee"],"names":[],"mappings":";AAAA;EAAA,MAAM,CAAC,OAAP,GACI;IAAA,QAAA,EAAU,OAAA,CAAQ,aAAR,CAAV;IACA,QAAA,EAAU,OAAA,CAAQ,aAAR,CADV;IAEA,QAAA,EAAU,OAAA,CAAQ,aAAR,CAFV;;AADJ","sourcesContent":["module.exports =\n    DataTree: require './data-tree'\n    ViewNode: require './view-node'\n    CompNode: require './comp-node'"]}},{"offset":{"line":254,"column":0},"map":{"version":3,"file":"../../../../src/js/data-tree.js","sourceRoot":"","sources":["../../../../../../../../../../src/coffee/data-tree.coffee"],"names":[],"mappings":"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","sourcesContent":["__id__ = 0\n\n\nclass TreeTwo\n\n\n    constructor: (root) ->\n        @nodeMap      = {}\n        @bindings     = {}\n        @history      = []\n        @historyIndex = 0\n        @setRoot(root) if root\n\n\n\n\n    setRoot: (obj) ->\n        #TODO: add disposement for existing root\n        @rootNode = @createNode null, '/', obj\n        @root     = obj\n\n\n    getRoot: () ->\n        return null if not @rootNode\n        @rootNode.value\n\n\n    has: (obj) ->\n       typeof obj == 'object' and @nodeMap[obj.__node_id__] != undefined\n\n\n\n\n    bind: (obj, name, callback) ->\n        node  = if typeof obj == 'object' then @nodeMap[obj.__node_id__] else null\n        if not node\n            console.error error = 'Error: object not part of this tree: ', obj\n            throw new Error error\n\n        paths = {}\n        @addPaths node, name, null, (path) =>\n            callbacks = @bindings[path] or @bindings[path] = []\n            if callbacks.indexOf(callback) == -1\n                #console.log 'add binding: ', path\n                callbacks.push callback\n                paths[path] = callback\n        #console.log 'bind to: ', paths\n        paths\n\n\n\n\n    unbind: (paths) ->\n        unbound = total = 0\n        for path, callback of paths\n            callbacks = @bindings[path]\n            ++total\n            if callbacks\n                index = callbacks.indexOf callback\n                if index > -1\n                    ++unbound\n                    callbacks.splice index, 1\n                delete @bindings[path] if callbacks.length == 0\n        unbound == total\n\n\n\n\n    update: (obj, name) ->\n        node = if typeof obj == 'object' then @nodeMap[obj.__node_id__] else @rootNode\n        if not node\n            console.error error = 'Error: object not part of this tree: ', obj\n            throw new Error error\n\n        @currentActions = []\n        @currentPaths   = {}\n        @updatedMap     = {}\n        if name != undefined\n            @updateProp node, name\n        else\n            @updateNode node\n\n        if @currentActions.length\n            if @historyIndex < @history.length\n                #TODO: !!! add disposement\n                @history.length = @historyIndex\n            @history.push @currentActions\n            ++@historyIndex\n            #console.log 'changed paths: ', @currentPaths\n            @currentActions.paths = @currentPaths\n            @dispatchBindings @currentPaths\n        @currentPaths = null\n        false\n\n\n\n\n    undo: () ->\n        if @historyIndex > 0\n            actions = @history[--@historyIndex]\n            action.undo() for action in actions\n            #console.log 'undo: ', actions\n            @dispatchBindings actions.paths\n        else\n            console.log 'undo not possible!!! ', @historyIndex\n        null\n\n\n\n\n    redo: () ->\n        if @historyIndex < @history.length   \n            actions = @history[@historyIndex++]\n            action.redo() for action in actions\n            #console.log 'redo: ', actions\n            @dispatchBindings actions.paths\n        else\n            console.log 'redo not possible!!! ', @historyIndex\n        null\n\n\n\n\n    dispatchBindings: (paths) ->\n        called     = []\n        dispatched = false\n        for path, node of paths\n            parts      = path.split '/'\n            name       = parts.pop() or ''\n            ppath      = parts.join('/') + '/*'\n            callbacks  = @bindings[path]\n            pcallbacks = @bindings[ppath]\n            value      = node.value\n            #console.log 'dispatch path: ', path, node.value[name]\n            if callbacks\n                for callback in callbacks\n                    if called.indexOf(callback) == -1\n                        callback value[name], value, name, path\n                        dispatched = true\n                        called.push callback\n\n            if pcallbacks\n                for callback in pcallbacks\n                    #if called.indexOf(callback) == -1\n                    callback value\n                    dispatched = true\n                    #called.push callback\n        dispatched\n\n\n\n\n    createNode: (owner, name, value) ->\n        node = @nodeMap[value.__node_id__] if value\n        if not node\n            id = ++__id__\n            node =\n                id:     id\n                value:  value\n                type:   'value'\n                owners: {}\n\n            @nodeMap[node.id] = node\n            if owner\n                #console.log 'add path: ', name, owner, node\n                @addPaths owner, name, @currentPaths\n\n            if value\n                if value.constructor.name == 'Array'\n                    Object.defineProperty value, '__node_id__',\n                        value:      node.id\n                        enumerable: false\n\n                    node.type  = 'array'\n                    node.props = props = []\n                    l          = value.length\n                    for i in [0 ... l]\n                        props[i] = @createNode node, i, value[i]\n\n                else if value.constructor.name == 'Object'\n                    Object.defineProperty value, '__node_id__',\n                        value:      node.id\n                        enumerable: false\n\n                    node.type  = 'object'\n                    node.props = props = {}\n                    for key of value\n                        props[key] = @createNode node, key, value[key]\n\n        addOwner(node, owner, name) if owner\n        node\n\n\n\n\n    updateNode: (node) ->\n        return true if @updatedMap[node.id]\n        @updatedMap[node.id] = true\n\n        value = node.value\n        props = node.props\n        if node.type == 'array'\n            pl = props.length\n            vl = value.length\n            l  = if pl > vl then pl else vl\n            for i in [0...l]\n                @updateProp node, i\n            if pl != vl\n                @addChangeLengthAction node, pl, vl\n                props.length = vl\n\n        else if node.type == 'object'\n            keys = Object.assign {}, props, value\n            for key of keys\n                @updateProp node, key\n        null\n\n\n\n\n    updateProp: (node, name) ->\n        child = node.props[name]\n        value = node.value[name]\n\n        if not child and value == undefined\n            console.error \"Error: either old or new value must exist for property \\\"#{name}\\\" of node: \", node\n            return false\n\n        # value != undefined but no child, so create a new child\n        if not child\n            child = @createNode node, name, value\n            @addCreateAction child, node, name\n\n        # child exists but no value, so remove the child\n        else if value == undefined\n            @updateNode child if child.type != 'value'\n            removeOwner child, node, name\n            @addRemoveAction child, node, name\n\n        else\n            # not changed\n            if child.value == value\n\n                # the child's value hasn't changed, so update the child\n                if child.type != 'value'\n                    @updateNode(child) if not @updatedMap[child.id]\n\n                # no change of simple node\n                else\n                    return false\n            # changed\n            else\n                type = 'value'\n                if value\n                    if value.constructor.name == 'Array'\n                        type = 'array'\n                    else if value.constructor.name == 'Object'\n                        type = 'object'\n\n                # value changed from simple to complex or reverse or instance changed, so replace the child\n                if type != 'value' or type != child.type\n                    #@updateNode child if child.type != 'value'\n                    removeOwner child, node, name\n                    next = @createNode node, name, value\n                    @addSwapAction child, node, name, next\n                    #console.log 'change node: ', name, child, next, node\n\n                # skip unnecessary creation of simple nodes, because they are unique to their owner\n                else\n                    #console.log 'CHANGE VALUE: ', name, value\n                    @addChangeValueAction child, node, name, value\n                    child.value = value\n        null\n\n\n\n\n    addCreateAction: (node, owner, name) ->\n        @addPaths owner, name, @currentPaths\n        @currentActions.push\n            type:  'create'\n            undo: () -> removeOwner node, owner, name\n            redo: () -> addOwner    node, owner, name\n        null\n\n\n    addRemoveAction: (node, owner, name) ->\n        @addPaths owner, name, @currentPaths\n        @currentActions.push\n            type:  'remove'\n            undo: () -> addOwner    node, owner, name\n            redo: () -> removeOwner node, owner, name\n        null\n\n\n    addSwapAction: (node, owner, name, next) ->\n        @addPaths owner, name, @currentPaths\n        @currentActions.push\n            type:  'swap'\n            undo: () ->\n                removeOwner next, owner, name\n                addOwner    node, owner, name\n            redo: () ->\n                removeOwner node, owner, name\n                addOwner    next, owner, name\n        null\n\n\n    addChangeValueAction: (node, owner, name, newValue) ->\n        @addPaths owner, name, @currentPaths\n        @currentActions.push\n            type:  'changeValue'\n            oldValue: node.value\n            undo: () ->\n                node.value        = this.oldValue\n                owner.value[name] = this.oldValue\n            redo: () ->\n                node.value        = newValue\n                owner.value[name] = newValue\n        null\n\n\n    addChangeLengthAction: (node, oldLength, newLength) ->\n        @currentActions.push\n            type:  'changeLength'\n            undo: () -> node.value.length = node.props.length = oldLength\n            redo: () -> node.value.length = node.props.length = newLength\n        null\n\n\n\n\n    addPaths: (node, path, paths, callback, root) ->\n        path  = if path == null or path == undefined then '' else path + ''\n        path  = '/' + path if path\n        paths = paths or {}\n        root  = root or node\n        #console.log 'addPaths: ', path\n        if node == @rootNode\n            #console.log 'add path: ', path\n            paths[path] = root\n            callback path if callback\n        else\n            for id, names of node.owners\n                owner = @nodeMap[id]\n                for n of names\n                    @addPaths owner, n + path, paths, callback, root\n        paths\n\n\n\n\naddOwner = (node, owner, name) ->\n    owners = node.owners\n    names  = owners[owner.id] || owners[owner.id] = {}\n    if names[name]\n        return null\n    names[name]       = true\n    owner.props[name] = node\n    owner.value[name] = node.value\n    null\n\n\n\n\nremoveOwner = (node, owner, name) ->\n    owners = node.owners\n    names  = owners[owner.id]\n    if not names or not names[name]\n        return null\n    delete names[name]\n    delete owner.props[name]\n    delete owner.value[name]\n    null\n\n\n\n#    0000000    00000000  00000000  000  000   000  00000000        00000000   00000000    0000000   00000000\n#    000   000  000       000       000  0000  000  000             000   000  000   000  000   000  000   000\n#    000   000  0000000   000000    000  000 0 000  0000000         00000000   0000000    000   000  00000000\n#    000   000  000       000       000  000  0000  000             000        000   000  000   000  000\n#    0000000    00000000  000       000  000   000  00000000        000        000   000   0000000   000\n\n\nif Object.defineProperty == undefined\n    Object.defineProperty = (obj, name, data) ->\n        obj[name] = data.value\n\n\n\n\nif typeof module != 'undefined'\n    module.exports = TreeTwo\nif typeof window != 'undefined'\n    window.TreeTwo = TreeTwo\nelse\n    this.TreeTwo = TreeTwo"]}},{"offset":{"line":697,"column":0},"map":{"version":3,"file":"../../../../src/js/view-node.js","sourceRoot":"","sources":["../../../../../../src/coffee/view-node.coffee"],"names":[],"mappings":"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","sourcesContent":["_      = require '../../src/js/utils'\n__id__ = 0\n\n\n\n\n\n#    000   000  000  00000000  000   000        000   000   0000000   0000000    00000000\n#    000   000  000  000       000 0 000        0000  000  000   000  000   000  000     \n#     000 000   000  0000000   000000000        000 0 000  000   000  000   000  0000000 \n#       000     000  000       000   000        000  0000  000   000  000   000  000     \n#        0      000  00000000  00     00        000   000   0000000   0000000    00000000\n\nclass ViewNode\n\n    @DEBUG         = true\n    @CHECK_DOM     = true\n    @DEFAULT_CLASS = @\n\n    @create = create\n    @map    = map\n    @unmap  = unmap\n\n    constructor: (cfg) ->\n        @register  cfg\n        @updateCfg cfg\n        @updateNow()\n\n    register:   (cfg) -> register   @, cfg\n    updateNow:  (cfg) -> updateNow  @, cfg\n    createView: (cfg) -> createView @, cfg\n\n    # add nodes view to dom\n    appendTo: (dom) -> appendTo @, dom\n    behind:   (dom) -> behind   @, dom\n    before:   (dom) -> before   @, dom\n    replace:  (dom) -> replace  @, dom\n    remove:   (dom) -> remove   @, dom\n\n    # direct dom manipulation\n    addChild:      (child) ->        addChild      @, child\n    addChildAt:    (child, index) -> addChildAt    @, child, index\n    removeChild:   (child) ->        removeChild   @, child\n    removeChildAt: (index) ->        removeChildAt @, index\n\n    # timed dom manipulation\n    updateCfg: (cfg) -> (@cfg = cfg) or true\n    update:    () => update @\n    render:    () -> @cfg\n\n    dispose: () ->\n\n    onMount:   () ->\n    onUnmount: () -> @keep\n    onAdded:   () ->\n    onRemoved: () ->\n\n\n\n\n\n\n\n\n#    00000000   00000000    0000000   00000000    0000000\n#    000   000  000   000  000   000  000   000  000     \n#    00000000   0000000    000   000  00000000   0000000 \n#    000        000   000  000   000  000             000\n#    000        000   000   0000000   000        0000000 \n\nclassMap   = {}\nnodeMap    = {}\ndirtyMap   = {}\ncleanMap   = {}\ndomList    = []\ndirty      = false\nrafTimeout = null\n\n\n\n\n#     0000000  00000000   00000000   0000000   000000000  00000000\n#    000       000   000  000       000   000     000     000     \n#    000       0000000    0000000   000000000     000     0000000 \n#    000       000   000  000       000   000     000     000     \n#     0000000  000   000  00000000  000   000     000     00000000\n\ncreate = (cfg, root = null) ->\n    if _.isNot cfg\n        throw new Error \"A node can't be created from empty cfg.\"\n        \n    if not _.extendsNode clazz = cfg.clazz\n        if not _.extendsNode clazz = cfg.tag\n            clazz = null\n            tag   = cfg.nodeName.toLowerCase() if _.isDom cfg\n            clazz = classMap[tag] if _.isString tag = tag or cfg.tag\n\n    clazz = clazz or ViewNode.DEFAULT_CLASS\n    node  = new clazz cfg\n\n    if root != null #TODO: node.render() is called twice in this case - bad!!!\n        render(node, root)\n    node\n\n\n\n\n#    00000000   00000000   0000000   000   0000000  000000000  00000000  00000000 \n#    000   000  000       000        000  000          000     000       000   000\n#    0000000    0000000   000  0000  000  0000000      000     0000000   0000000  \n#    000   000  000       000   000  000       000     000     000       000   000\n#    000   000  00000000   0000000   000  0000000      000     00000000  000   000\n\nregister = (node, cfg) ->\n        node.parent = null\n        node.depth  = 0\n        node.keep   = false\n        if not node.__id__\n            node.__id__ = ++__id__\n            nodeMap[node.__id__] = node\n        node.__id__\n        injectNode node, cfg\n\n\n\n\n#    000  000   000        000  00000000   0000000  000000000        000   000   0000000   0000000    00000000\n#    000  0000  000        000  000       000          000           0000  000  000   000  000   000  000     \n#    000  000 0 000        000  0000000   000          000           000 0 000  000   000  000   000  0000000 \n#    000  000  0000  000   000  000       000          000           000  0000  000   000  000   000  000     \n#    000  000   000   0000000   00000000   0000000     000           000   000   0000000   0000000    00000000\n\ninjectNode = (node, cfg) ->\n    if _.isNot(node.__i__) and cfg and cfg.__i__\n        inject    = node.__i__ = cfg.__i__\n        node[key] = value for key, value of inject\n    node\n\n\n\n\n#     0000000  00000000   00000000   0000000   000000000  00000000        000   000  000  00000000  000   000\n#    000       000   000  000       000   000     000     000             000   000  000  000       000 0 000\n#    000       0000000    0000000   000000000     000     0000000          000 000   000  0000000   000000000\n#    000       000   000  000       000   000     000     000                000     000  000       000   000\n#     0000000  000   000  00000000  000   000     000     00000000            0      000  00000000  00     00\n\ncreateView = (node, cfg) ->\n    if node.view\n        throw new Error \"View already exists\"\n    if _.isNot cfg = node.render()\n        throw new Error \"A view for an empty cfg can't be created.\"\n    switch true\n        when _.isSimple  cfg then createTextView    node, node.cfg = text: cfg + ''\n        when _.isDom     cfg then createTagFromDom  node, null, cfg\n        when _.isDomText cfg then createTextFromDom node, null, cfg\n        else\n            tag = cfg.tag\n            switch true\n                when _.isNot     tag then createTextView    node, cfg\n                when _.isString  tag then createTagView     node, cfg\n                when _.isDom     tag then createTagFromDom  node, cfg, tag\n                when _.isDomText tag then createTextFromDom node, cfg, tag\n                else\n                    if _.extendsNode tag\n                        throw new Error \"A tag must be a string or a HTMLElement, you specified a ViewNode class.\"\n                    throw new Error \"A tag must be a string or a HTMLElement.\"\n\n    domList.push node.view if ViewNode.CHECK_DOM\n    node\n\n\n\n\ncreateTextView = (node, cfg) ->\n    text = cfg.text\n    text = text() if _.isFunc text\n    if not _.isSimple text\n        throw new Error \"The text for a text node must be a string, number or bool.\"\n    node.text = text\n    node.tag  = cfg.tag  = undefined\n    node.kind = ViewNode.TEXT_KIND\n    node.view = document.createTextNode text\n\n\ncreateTextFromDom = (node, cfg, dom) ->\n    checkDom dom if ViewNode.CHECK_DOM\n    node.text = dom.nodeValue\n    node.tag  = null\n    node.kind = ViewNode.TEXT_KIND\n    node.view = dom\n    if cfg\n        text = cfg.text\n        if _.isNot text\n            cfg.text = node.text\n        else\n            text = text() if _.isFunc text\n            if not _.isSimple text\n                throw new Error \"The text for a text node must be a string, number or bool.\"\n            node.text = dom.nodeValue = text\n    else\n        cfg = node.cfg = text: node.text\n    cfg.tag = undefined\n    node\n\n\ncreateTagView = (node, cfg) ->\n    node.tag  = tag = cfg.tag\n    node.kind = ViewNode.TAG_KIND\n    node.view = document.createElement tag\n    node\n\n\ncreateTagFromDom = (node, cfg, dom) ->\n    checkDom dom if ViewNode.CHECK_DOM\n    node.tag  = dom.nodeName.toLowerCase()\n    node.kind = ViewNode.TAG_KIND\n    node.view = dom\n    cfg       = cfg or node.cfg = {}\n    cfg.tag   = node.tag\n    node\n\n\n\n\n#    000   000  00000000   0000000     0000000   000000000  00000000        000   000   0000000   000   000\n#    000   000  000   000  000   000  000   000     000     000             0000  000  000   000  000 0 000\n#    000   000  00000000   000   000  000000000     000     0000000         000 0 000  000   000  000000000\n#    000   000  000        000   000  000   000     000     000             000  0000  000   000  000   000\n#     0000000   000        0000000    000   000     000     00000000        000   000   0000000   00     00\n\nupdateNow = (node, cfg) ->\n    cfg = cfg or node.render()\n    node.createView cfg if _.isNot node.view\n    if _.isSimple(cfg) or (not cfg.tag and (_.isSimple(cfg.text) or _.isFunc(cfg.text)))\n        updateText node, cfg\n    else\n        updateProperties node, cfg\n    node\n\n\n\n\n#    000   000  00000000   0000000     0000000   000000000  00000000\n#    000   000  000   000  000   000  000   000     000     000     \n#    000   000  00000000   000   000  000000000     000     0000000 \n#    000   000  000        000   000  000   000     000     000     \n#     0000000   000        0000000    000   000     000     00000000\n\nupdate = (node) ->\n    id = node?.__id__\n    if not id\n        throw new Error \"Can't update node. ViewNode doesn't exist.\"\n\n    if not dirty\n        window.cancelAnimationFrame rafTimeout\n        rafTimeout = window.requestAnimationFrame performUpdate\n\n    dirtyMap[id] = true\n    dirty        = true\n    null\n\n\n\n\n#    00000000   00000000  00000000   00000000   0000000   00000000   00     00  000   000  00000000   0000000     0000000   000000000  00000000\n#    000   000  000       000   000  000       000   000  000   000  000   000  000   000  000   000  000   000  000   000     000     000     \n#    00000000   0000000   0000000    000000    000   000  0000000    000000000  000   000  00000000   000   000  000000000     000     0000000 \n#    000        000       000   000  000       000   000  000   000  000 0 000  000   000  000        000   000  000   000     000     000     \n#    000        00000000  000   000  000        0000000   000   000  000   000   0000000   000        0000000    000   000     000     00000000\n\nperformUpdate = () ->\n    window.cancelAnimationFrame rafTimeout\n    dirty    = false\n    cleanMap = {}\n    nodes    = []\n    #TODO: sort by depth to update top down\n    (nodes.push(n) if n = nodeMap[id]) for id of dirtyMap\n    nodes.sort (a, b) -> a.depth - b.depth\n    for node in nodes\n        continue if not node.view or not nodeMap[node.__id__] or cleanMap[node.__id__]\n        cfg = node.render()\n\n        if _.isNot(node.tag) and _.isNot(cfg.tag)\n            updateText node, cfg\n        else if not (node.tag == cfg.tag or node.constructor == cfg.tag)\n            replaceChildNode node, cfg\n        else\n            updateProperties node, cfg\n    dirtyMap = {}\n    null\n\n\n\n\n#    000   000  00000000   0000000     0000000   000000000  00000000        000000000  00000000  000   000  000000000\n#    000   000  000   000  000   000  000   000     000     000                000     000        000 000      000   \n#    000   000  00000000   000   000  000000000     000     0000000            000     0000000     00000       000   \n#    000   000  000        000   000  000   000     000     000                000     000        000 000      000   \n#     0000000   000        0000000    000   000     000     00000000           000     00000000  000   000     000   \n\nupdateText = (node, cfg) ->\n    cleanMap[node.__id__] = true\n    text = if _.isFunc(cfg.text) then cfg.text() else if _.isString(cfg) then cfg else cfg.text\n    if node.text != text\n        node.cfg            = cfg\n        node.text           = text\n        node.view.nodeValue = text\n    null\n\n\n\n\n#    000   000  00000000   0000000     0000000   000000000  00000000        00000000   00000000    0000000   00000000    0000000\n#    000   000  000   000  000   000  000   000     000     000             000   000  000   000  000   000  000   000  000     \n#    000   000  00000000   000   000  000000000     000     0000000         00000000   0000000    000   000  00000000   0000000 \n#    000   000  000        000   000  000   000     000     000             000        000   000  000   000  000             000\n#     0000000   000        0000000    000   000     000     00000000        000        000   000   0000000   000        0000000 \n\nupdateProperties = (node, cfg) ->\n    cleanMap[node.__id__] = true\n\n    cfg     = cfg.render() if cfg instanceof ViewNode\n    attrs   = node.attrs or node.attrs = {}\n    propMap = Object.assign {}, attrs, node.events, cfg\n\n    if propMap.hasOwnProperty 'className'\n        updateClass node, cfg.className\n\n    if propMap.hasOwnProperty 'style'\n        updateStyle node, cfg.style\n\n    if propMap.hasOwnProperty 'text'\n        text = text() if _.isFunc text = cfg.text\n        if _.isSimple text\n            updateChildren node, [text]\n        else if _.isDomText text\n            updateChildren node, [text]\n\n        if ViewNode.DEBUG\n            if cfg.hasOwnProperty 'child'\n                console.warn 'child specified while text exists: ', cfg\n            if cfg.hasOwnProperty 'children'\n                console.warn 'children specified while text exists', cfg\n\n    else if propMap.hasOwnProperty 'child'\n        child = child() if _.isFunc child = cfg.child\n        updateChildren node, [child]\n\n        if ViewNode.DEBUG\n            if cfg.hasOwnProperty 'children'\n                console.warn 'children specified while text exists', cfg\n\n    else if propMap.hasOwnProperty 'children'\n        updateChildren node, cfg.children\n\n    delete propMap.tag\n    delete propMap.clazz\n    delete propMap.__i__\n    delete propMap.keep\n    delete propMap.text\n    delete propMap.child\n    delete propMap.className\n    delete propMap.style\n    delete propMap.children\n    delete propMap.bindings\n\n    for name of propMap\n        attr  = attrs[name]\n        value = cfg[name]\n\n        if _.isBool(value) or (_.isNot(value) and _.isBool(attr))\n            updateBool node, value, name\n        else\n            if /^on/.test name\n                updateEvent node, value, name\n            else\n                value = value() if _.isFunc value\n                if _.isBool value\n                    updateBool node, value, name\n                else\n                    updateAttr node, value, name\n    null\n\n\n\n\n\n\n\n\n#     0000000   000000000  000000000  00000000    0000000\n#    000   000     000        000     000   000  000\n#    000000000     000        000     0000000    0000000\n#    000   000     000        000     000   000       000\n#    000   000     000        000     000   000  0000000\n\nupdateAttr = (node, value, name) ->\n    node.attrs[name] = node.view.getAttribute name\n    return if node.attrs[name] == value\n    view = node.view\n    if value != null and value != undefined\n        view.setAttribute name, value\n        view[name]       = value\n        node.attrs[name] = value\n    else\n        view.removeAttribute name\n        delete view[name]\n        delete node.attrs[name]\n    null\n\n\n\n\n#    0000000     0000000    0000000   000\n#    000   000  000   000  000   000  000\n#    0000000    000   000  000   000  000\n#    000   000  000   000  000   000  000\n#    0000000     0000000    0000000   0000000\n\nupdateBool = (node, value, name) ->\n    node.attrs[name] = node.view[name]\n    return if node.attrs[name] == value\n    view = node.view\n    if _.isNot value\n        view.removeAttribute name\n        view[name] = false\n        delete node.attrs[name]\n    else if  value == false\n        view.removeAttribute name\n        view[name]       = false\n        node.attrs[name] = false\n    else\n        view.setAttribute name, ''\n        view[name]       = true\n        node.attrs[name] = true\n    null\n\n\n\n\n#     0000000  000       0000000    0000000   0000000\n#    000       000      000   000  000       000\n#    000       000      000000000  0000000   0000000\n#    000       000      000   000       000       000\n#     0000000  0000000  000   000  0000000   0000000\n\nupdateClass = (node, value) ->\n    value = value() if _.isFunc value\n\n    node.attrs.className = node.view.className\n    return if node.attrs.className == value\n    if value\n        node.view.className  = value\n        node.attrs.className = value\n    else\n        node.view.className  = undefined\n        delete node.attrs.className\n    null\n\n\n\n\n#     0000000  000000000  000   000  000      00000000\n#    000          000      000 000   000      000\n#    0000000      000       00000    000      0000000\n#         000     000        000     000      000\n#    0000000      000        000     0000000  00000000\n\nupdateStyle = (node, style) ->\n    view  = node.view\n    attrs = node.attrs\n    sobj  = attrs.style\n\n    return if not view\n\n    style = style() if _.isFunc style\n\n    if _.isNot style\n        view.style.cssText = null\n        delete attrs.style\n\n    else if _.isString style\n        view.style.cssText = style\n        attrs.style        = style\n    else\n        css     = ''\n        sobj    = if _.isObject(sobj) then sobj else {}\n        changed = false\n        propMap = Object.assign {}, style, sobj\n        for name of propMap\n            value = style[name]\n            if value != sobj[name]\n                changed = true\n            sobj[name] = value\n            if _.isNot value\n                delete sobj[name]\n            else\n                prop  = _.normalizeName name\n                css  += prop + ': ' + value + '; '\n\n        if changed\n            if css.length\n                css                = css.slice 0, -1\n                view.style.cssText = css\n                attrs.style        = sobj\n            else\n                view.style.cssText = null\n                delete attrs.style\n    null\n\n\n\n\n#    00000000  000   000  00000000  000   000  000000000   0000000\n#    000       000   000  000       0000  000     000     000\n#    0000000    000 000   0000000   000 0 000     000     0000000\n#    000          000     000       000  0000     000          000\n#    00000000      0      00000000  000   000     000     0000000\n\nupdateEvent = (node, callback, name) ->\n    events    = node.events or node.events = {}\n    view      = node.view\n    type      = _.normalizeEvent name\n    listener  = events[name]\n\n    if _.isString callback\n        callback = node[name]\n\n    if listener != callback\n        if listener\n            view.removeEventListener(type, listener)\n            delete events[name]\n        if callback\n            view.addEventListener(type, callback)\n            events[name] = callback\n    null\n\n\nremoveEvents = (node) ->\n    events = node.events\n    return null if not events\n\n    view = node.view\n    for name, listener of events\n        type = _.normalizeEvent name\n        view.removeEventListener(type, listener) if listener\n        delete events[name]\n    node.events = null\n    null\n\n\n\n\n#     0000000  000   000  000  000      0000000    00000000   00000000  000   000\n#    000       000   000  000  000      000   000  000   000  000       0000  000\n#    000       000000000  000  000      000   000  0000000    0000000   000 0 000\n#    000       000   000  000  000      000   000  000   000  000       000  0000\n#     0000000  000   000  000  0000000  0000000    000   000  00000000  000   000\n\nupdateChildren = (node, cfgs) ->\n    #TODO: allow object as only child\n    children = node.children or node.children = []\n    cfgs     = cfgs() if _.isFunc cfgs\n    cfgs     = if _.isString(cfgs) then [cfgs] else cfgs or []\n    l        = if children.length > cfgs.length then children.length else cfgs.length\n    for i in [0...l]\n        child = children[i]\n        cfg   = cfgs[i]\n        cfg   = cfg() if _.isFunc cfg\n\n        if not child and not cfg\n            throw new Error \"DOM ERROR: either child or cfg at index #{i} must be defined. Got \" + child + ', ' + cfg\n        if not child\n            addChildNode node, cfg\n        else if not cfg\n            removeChildNode child\n        else\n            change child, cfg\n    children.length = cfgs.length\n    null\n\n\n\n\n#     0000000  000   000   0000000   000   000   0000000   00000000\n#    000       000   000  000   000  0000  000  000        000\n#    000       000000000  000000000  000 0 000  000  0000  0000000\n#    000       000   000  000   000  000  0000  000   000  000\n#     0000000  000   000  000   000  000   000   0000000   00000000\n\nchange = (node, cfg) ->\n\n    needsUpdate = node.updateCfg cfg\n    if node == cfg or node.constructor == cfg.tag\n        updateProperties node, node.render() if needsUpdate\n\n    else if node.tag != cfg.tag and (node.tag or cfg.tag) or cfg instanceof ViewNode\n        replaceChildNode node, cfg\n\n    else if _.isNot node.tag        # text node\n        updateText node, cfg\n\n    else if needsUpdate           # tag node\n        updateProperties node, cfg\n\n    false\n\n\n\n\n#     0000000   0000000    0000000\n#    000   000  000   000  000   000\n#    000000000  000   000  000   000\n#    000   000  000   000  000   000\n#    000   000  0000000    0000000\n\naddChildNode = (node, cfg) ->\n    if cfg instanceof ViewNode\n        child = cfg\n    else\n        cfg.__i__ = node.__i__ if not cfg.__i__\n        child = create cfg\n\n    node.children.push child\n    node.view.appendChild child.view\n    child.parent = node\n    child.depth  = node.depth + 1\n    child.onMount()\n    null\n\n\n\n\n#    00000000   00000000  00     00   0000000   000   000  00000000\n#    000   000  000       000   000  000   000  000   000  000\n#    0000000    0000000   000000000  000   000   000 000   0000000\n#    000   000  000       000 0 000  000   000     000     000\n#    000   000  00000000  000   000   0000000       0      00000000\n\nremoveChildNode = (child) ->\n    node = child.parent\n    view = child.view\n    disposeNode child\n    node.view.removeChild view\n    null\n\n\n\n\n#    00000000   00000000  00000000   000       0000000    0000000  00000000\n#    000   000  000       000   000  000      000   000  000       000\n#    0000000    0000000   00000000   000      000000000  000       0000000\n#    000   000  000       000        000      000   000  000       000\n#    000   000  00000000  000        0000000  000   000   0000000  00000000\n\nreplaceChildNode = (child, cfg) ->\n    node     = child.parent\n    children = node.children\n    i        = children.indexOf child\n    view     = child.view\n\n    disposeNode child\n\n    if cfg instanceof ViewNode\n        child = cfg\n        cfg   = child.render()\n    else\n        cfg.__i__ = node.__i__ if not cfg.__i__\n        child = create cfg\n\n    children[i]  = child\n    child.parent = node\n    child.depth  = node.depth + 1\n    node.view.replaceChild child.view, view\n\n    if _.isSimple(cfg) or (not cfg.tag and (_.isSimple(cfg.text) or _.isFunc(cfg.text)))\n        updateText child, cfg\n    else\n        updateProperties child, cfg\n\n    child.onMount()\n    null\n\n\n\n\n#    0000000    000   0000000  00000000    0000000    0000000  00000000\n#    000   000  000  000       000   000  000   000  000       000\n#    000   000  000  0000000   00000000   000   000  0000000   0000000\n#    000   000  000       000  000        000   000       000  000\n#    0000000    000  0000000   000         0000000   0000000   00000000\n\ndisposeNode = (node) ->\n    if node.onUnmount() != true\n        removeEvents node\n\n        if node.children and node.children.length\n            disposeNode child for child in node.children\n\n        delete node.children\n        delete node.view\n        delete nodeMap[node.__id__]\n\n    node.parent = null\n    node.depth  = undefined\n    null\n\n\n\n\n#    0000000     0000000   00     00\n#    000   000  000   000  000   000\n#    000   000  000   000  000000000\n#    000   000  000   000  000 0 000\n#    0000000     0000000   000   000\n\ncheckDom = (dom) ->\n    if domList.indexOf(dom) > -1\n        throw new Error 'Dom element already controlled by another node.'\n\n\nappendTo = (node, dom) ->\n    checkDom dom if ViewNode.CHECK_DOM\n    dom.appendChild node.view\n\n\n\nbehind = (node, dom) ->\n    parent = dom.parentNode\n    next   = dom.nextSibling\n    checkDom parent if ViewNode.CHECK_DOM\n    if next\n        parent.insertBefore node.view, next\n    else\n        parent.appendChild node.view\n\n\nbefore = (node, dom) ->\n    parent = dom.parentNode\n    checkDom parent if ViewNode.CHECK_DOM\n    parent.insertBefore node.view, dom\n\n\nreplace = (node, dom) ->\n    parent = dom.parentNode\n    if ViewNode.CHECK_DOM\n        checkDom parent\n        checkDom dom\n    parent.replaceChild node.view, dom\n\n\nremove = (node) ->\n    parent = node.view.parentNode\n    checkDom parent if ViewNode.CHECK_DOM\n    parent.removeChild node.view\n\n\n\n\n#    0000000     0000000   00     00        000  000   000  000000000  00000000  00000000   000   000   0000000   000    \n#    000   000  000   000  000   000        000  0000  000     000     000       000   000  0000  000  000   000  000    \n#    000   000  000   000  000000000        000  000 0 000     000     0000000   0000000    000 0 000  000000000  000    \n#    000   000  000   000  000 0 000        000  000  0000     000     000       000   000  000  0000  000   000  000    \n#    0000000     0000000   000   000        000  000   000     000     00000000  000   000  000   000  000   000  0000000\n\naddChild      = (node, child) ->\naddChildAt    = (node, child, index) ->\nremoveChild   = (node, child) ->\nremoveChildAt = (node, index) ->\n\n\n#    00     00   0000000   00000000\n#    000   000  000   000  000   000\n#    000000000  000000000  00000000\n#    000 0 000  000   000  000\n#    000   000  000   000  000\n\nmap = (tag, clazz, overwrite = false) ->\n    if _.isNot(classMap[tag]) or overwrite\n        classMap[tag] = clazz\n    null\n\n\n\n\n#    000   000  000   000  00     00   0000000   00000000\n#    000   000  0000  000  000   000  000   000  000   000\n#    000   000  000 0 000  000000000  000000000  00000000\n#    000   000  000  0000  000 0 000  000   000  000\n#     0000000   000   000  000   000  000   000  000\n\nunmap = (tag) ->\n    delete classMap[tag]\n    null\n\n\n\n\n\n\n\n\n#    00000000    0000000   00000000\n#    000   000  000   000  000\n#    0000000    000000000  000000\n#    000   000  000   000  000\n#    000   000  000   000  000\n\nif typeof window != 'undefined'\n    lastTime = 0\n    vendors  = ['webkit', 'moz']\n    for vendor in vendors\n        break if window.requestAnimationFrame\n        window.requestAnimationFrame = window[vendor + 'RequestAnimationFrame']\n        window.cancelAnimationFrame  = window[vendor + 'CancelAnimationFrame' ] or window[vendor + 'CancelRequestAnimationFrame']\n\n\n    if not window.requestAnimationFrame\n        window.requestAnimationFrame = (callback) ->\n            currTime   = Date.now()\n            timeToCall = Math.max 0, 16 - currTime + lastTime\n            rAF        = () -> callback currTime + timeToCall\n            id         = window.setTimeout rAF, timeToCall\n            lastTime   = currTime + timeToCall\n            id\n\n\n    if not window.cancelAnimationFrame\n        window.cancelAnimationFrame = (id) ->\n            clearTimeout id\n            null\n\n\n\n\n#     0000000    0000000   0000000  000   0000000   000   000\n#    000   000  000       000       000  000        0000  000\n#    000000000  0000000   0000000   000  000  0000  000 0 000\n#    000   000       000       000  000  000   000  000  0000\n#    000   000  0000000   0000000   000   0000000   000   000\n\nif typeof Object.assign == 'undefined'\n    Object.assign = (target, args...) ->\n        for src in args\n            for key of src\n                target[key] = src[key];\n        target\n\n\n\n\nViewNode.create = create\nViewNode.map    = map\nViewNode.unmap  = unmap\n\n\n\n\n#    00000000  000   000  00000000    0000000   00000000   000000000\n#    000        000 000   000   000  000   000  000   000     000   \n#    0000000     00000    00000000   000   000  0000000       000   \n#    000        000 000   000        000   000  000   000     000   \n#    00000000  000   000  000         0000000   000   000     000   \n\nif typeof module != 'undefined'\n    module.exports = ViewNode\nif typeof window != 'undefined'\n    window.ViewNode = ViewNode\nelse\n    this.ViewNode = ViewNode"]}},{"offset":{"line":1550,"column":0},"map":{"version":3,"file":"../../../../src/js/utils.js","sourceRoot":"","sources":["../../../../src/coffee/utils.coffee"],"names":[],"mappings":";AAAA;AAAA,MAAA;;EAAA,SAAA,GAAc,SAAC,KAAD;IAAW,IAAG,MAAA,CAAO,KAAP,CAAH;aAAsB,KAAA,CAAA,EAAtB;KAAA,MAAA;aAAmC,MAAnC;;EAAX;;EACd,MAAA,GAAc,SAAC,KAAD;WAAW,OAAO,KAAP,KAAgB;EAA3B;;EACd,QAAA,GAAc,SAAC,KAAD;WAAW,OAAO,KAAP,KAAgB;EAA3B;;EACd,QAAA,GAAc,SAAC,KAAD;WAAW,OAAO,KAAP,KAAgB,QAAhB,IAA4B,KAAA,KAAS,KAAA,GAAQ;EAAxD;;EACd,QAAA,GAAc,SAAC,KAAD;WAAW,OAAO,KAAP,KAAgB;EAA3B;;EACd,MAAA,GAAc,SAAC,KAAD;WAAW,OAAO,KAAP,KAAgB;EAA3B;;EACd,KAAA,GAAc,SAAC,KAAD;WAAW,KAAA,YAAiB;EAA5B;;EACd,SAAA,GAAc,SAAC,KAAD;WAAW,KAAA,YAAiB;EAA5B;;EACd,KAAA,GAAc,SAAC,KAAD;WAAW,KAAA,KAAS,IAAT,IAAiB,KAAA,KAAS;EAArC;;EACd,QAAA,GAAc,SAAC,KAAD;AAAW,QAAA;WAAA,CAAC,CAAA,GAAI,OAAO,KAAZ,CAAA,KAAsB,QAAtB,IAAkC,CAAA,KAAK,QAAvC,IAAmD,CAAA,KAAK;EAAnE;;EACd,WAAA,GAAc,SAAC,KAAD;WAAW,MAAA,CAAO,KAAP,CAAA,IAAkB,CAAC,CAAC,KAAK,CAAC,SAAN,YAA2B,QAA5B,CAAA,IAAyC,KAAA,KAAS,QAAnD;EAA7B;;EAGd,aAAA,GAAgB,SAAC,IAAD;WACZ,IAAI,CAAC,OAAL,CAAa,QAAb,EAAuB,SAAC,IAAD;aACnB,GAAA,GAAM,IAAI,CAAC,WAAL,CAAA;IADa,CAAvB;EADY;;EAKhB,cAAA,GAAiB,SAAC,IAAD;IACb,IAAA,GAAO,IAAI,CAAC,KAAL,CAAW,CAAX;WACP,IAAI,CAAC,MAAL,CAAY,CAAZ,CAAc,CAAC,WAAf,CAAA,CAAA,GAA+B,aAAA,CAAc,IAAI,CAAC,KAAL,CAAW,CAAX,CAAd;EAFlB;;EAKjB,MAAM,CAAC,OAAP,GACI;IAAA,SAAA,EAAgB,SAAhB;IACA,MAAA,EAAgB,MADhB;IAEA,QAAA,EAAgB,QAFhB;IAGA,QAAA,EAAgB,QAHhB;IAIA,QAAA,EAAgB,QAJhB;IAKA,MAAA,EAAgB,MALhB;IAMA,KAAA,EAAgB,KANhB;IAOA,SAAA,EAAgB,SAPhB;IAQA,KAAA,EAAgB,KARhB;IASA,QAAA,EAAgB,QAThB;IAUA,WAAA,EAAgB,WAVhB;IAWA,aAAA,EAAgB,aAXhB;IAYA,cAAA,EAAgB,cAZhB;;AAxBJ","sourcesContent":["getOrCall   = (value) -> if isFunc(value) then value() else value\nisBool      = (value) -> typeof value == 'boolean'\nisNumber    = (value) -> typeof value == 'number'\nisString    = (value) -> typeof value == 'string' or value == value + ''\nisObject    = (value) -> typeof value == 'object'\nisFunc      = (value) -> typeof value == 'function'\nisDom       = (value) -> value instanceof HTMLElement\nisDomText   = (value) -> value instanceof Text\nisNot       = (value) -> value == null or value == undefined\nisSimple    = (value) -> (t = typeof value) == 'string' or t == 'number' or t == 'boolean'\nextendsNode = (value) -> isFunc(value) and ((value.prototype instanceof ViewNode) or value == ViewNode)\n\n\nnormalizeName = (name) ->\n    name.replace /[A-Z]/g, (name) ->\n        '-' + name.toLowerCase()\n\n\nnormalizeEvent = (type) ->\n    type = type.slice 2\n    type.charAt(0).toLowerCase() + normalizeName type.slice(1)\n    \n    \nmodule.exports = \n    getOrCall:      getOrCall\n    isBool:         isBool\n    isNumber:       isNumber\n    isString:       isString\n    isObject:       isObject\n    isFunc:         isFunc\n    isDom:          isDom\n    isDomText:      isDomText\n    isNot:          isNot\n    isSimple:       isSimple\n    extendsNode:    extendsNode\n    normalizeName:  normalizeName\n    normalizeEvent: normalizeEvent\n"]}},{"offset":{"line":1637,"column":0},"map":{"version":3,"file":"../../../../src/js/comp-node.js","sourceRoot":"","sources":["../../../../src/coffee/comp-node.coffee"],"names":[],"mappings":";AAAA;AAAA,MAAA,kBAAA;IAAA;;;EAAA,QAAA,GAAW,OAAA,CAAQ,aAAR;;EAGL;;;;;;;uBAGF,QAAA,GAAU,SAAC,GAAD;AACN,UAAA;MAAA,uCAAM,GAAN;MAEA,IAAC,CAAA,KAAD,GAAS;MACT,IAAG,OAAO,GAAP,KAAc,QAAjB;QACI,IAAwC,CAAI,IAAC,CAAA,IAA7C;AAAA,gBAAM,IAAI,KAAJ,CAAU,oBAAV,EAAN;;QAEA,IAAG,QAAA,GAAW,GAAG,CAAC,QAAlB;AACI,eAAA,0CAAA;;YACI,IAAG,KAAK,CAAC,OAAN,CAAc,OAAd,CAAH;cACI,IAAC,CAAA,IAAD,CAAM,OAAQ,CAAA,CAAA,CAAd,EAAkB,OAAQ,CAAA,CAAA,CAA1B,EADJ;aAAA,MAAA;cAGI,IAAC,CAAA,IAAD,CAAM,OAAN,EAHJ;;AADJ,WADJ;SAHJ;;aASA;IAbM;;uBAgBV,SAAA,GAAW,SAAA;MACP,IAAC,CAAA,SAAD,CAAA;aACA,sCAAA;IAFO;;uBAKX,IAAA,GAAM,SAAC,GAAD,EAAM,IAAN,EAAY,QAAZ;aACF,IAAC,CAAA,KAAK,CAAC,IAAP,CAAY,IAAC,CAAA,IAAI,CAAC,IAAN,CAAW,GAAX,EAAgB,IAAhB,EAAsB,QAAA,IAAY,IAAC,CAAA,MAAnC,CAAZ;IADE;;uBAIN,MAAA,GAAQ,SAAC,KAAD;AACJ,UAAA;MAAA,KAAA,GAAQ,IAAC,CAAA,KAAK,CAAC,OAAP,CAAe,KAAf;MACR,IAAG,KAAA,KAAS,CAAC,CAAb;QACI,OAAO,CAAC,KAAR,CAAc,wCAAd,EAAwD,KAAxD;AACA,cAAM,IAAI,KAAJ,CAAU,+BAAV,EAFV;;MAGA,IAAC,CAAA,KAAK,CAAC,MAAP,CAAc,KAAd,EAAqB,CAArB;aACA,IAAC,CAAA,IAAI,CAAC,MAAN,CAAa,KAAb;IANI;;uBASR,SAAA,GAAW,SAAA;AACP,UAAA;MAAA,UAAA,GAAc;AACd;AAAA,WAAA,qCAAA;;QAAC,UAAA,GAAa,UAAA,IAAc,IAAC,CAAA,IAAI,CAAC,MAAN,CAAa,KAAb;AAA5B;MACA,IAAC,CAAA,KAAD,GAAc;aACd;IAJO;;;;KArCQ;;EA8CvB,MAAM,CAAC,OAAP,GAAiB;AAjDjB","sourcesContent":["ViewNode = require './view-node'\n\n\nclass CompNode extends ViewNode\n\n\n    register: (cfg) ->\n        super cfg\n\n        @paths = []\n        if typeof cfg == 'object'\n            throw new Error \"Tree not injected.\" if not @tree\n\n            if bindings = cfg.bindings\n                for binding in bindings\n                    if Array.isArray binding\n                        @bind binding[0], binding[1]\n                    else\n                        @bind binding\n        @\n\n\n    onUnmount: () ->\n        @unbindAll()\n        super()\n\n\n    bind: (obj, name, callback) ->\n        @paths.push @tree.bind(obj, name, callback or @update)\n\n\n    unbind: (paths) ->\n        index = @paths.indexOf paths\n        if index == -1\n            console.error 'Paths not bound by this comp. paths = ', paths\n            throw new Error 'Paths not bound by this comp.'\n        @paths.splice index, 1\n        @tree.unbind paths\n\n\n    unbindAll: () ->\n        allUnbound  = true\n        (allUnbound = allUnbound && @tree.unbind paths) for paths in @paths\n        @paths      = []\n        allUnbound\n\n\n\n\nmodule.exports = CompNode"]}},{"offset":{"line":1719,"column":0},"map":{"version":3,"file":"app-view.js","sourceRoot":"","sources":["../../../03-bindings/app-view.coffee"],"names":[],"mappings":";AAAA;AAAA,MAAA,iBAAA;IAAA;;;EAAA,QAAA,GAAW,OAAA,CAAQ,cAAR,CAAuB,CAAC;;EAG7B;;;IAGW,iBAAC,GAAD;MACT,yCAAM,GAAN;IADS;;sBAIb,SAAA,GAAW,SAAC,GAAD;MACP,uCAAM,GAAN;aACA,IAAC,CAAA,IAAD,GAAQ,IAAC,CAAA,IAAI,CAAC;IAFP;;sBAKX,MAAA,GAAQ,SAAA;aACJ;QAAA,GAAA,EAAK,KAAL;QACA,QAAA,EAAU;UACN;YAAA,GAAA,EAAW,IAAX;YACA,SAAA,EAAW,UADX;YAEA,OAAA,EAAS,CAAA,SAAA,KAAA;qBAAA,SAAA;gBACL,EAAE,KAAC,CAAA,IAAI,CAAC;gBACR,KAAC,CAAA,IAAI,CAAC,OAAN,GAAgB,CAAC,IAAI,CAAC,MAAL,CAAA,CAAA,GAAgB,GAAhB,GAAsB,GAAvB,CAAA,IAA+B;uBAC/C,KAAC,CAAA,IAAI,CAAC,MAAN,CAAA;cAHK;YAAA,CAAA,CAAA,CAAA,IAAA,CAFT;YAMA,QAAA,EAAW;cACP;gBAAA,GAAA,EAAU,KAAV;gBACA,KAAA,EAAU,CAAA,SAAA,KAAA;yBAAA,SAAA;2BAAM,yCAAA,GAA0C,KAAC,CAAA,IAAI,CAAC,OAAhD,GAAwD;kBAA9D;gBAAA,CAAA,CAAA,CAAA,IAAA,CADV;gBAEA,QAAA,EAAU,CACN,CAAC,IAAC,CAAA,IAAF,EAAQ,SAAR,CADM,EAEN,CAAC,IAAC,CAAA,IAAF,EAAQ,QAAR,CAFM,CAFV;gBAMA,QAAA,EAAU,CAAA,SAAA,KAAA;yBAAA,SAAA;oBACN,IAAG,KAAC,CAAA,IAAI,CAAC,MAAT;6BACI,KAAC,CAAA,IAAI,CAAC,KAAN,GAAc,CAAA,WAAA,GAAY,KAAC,CAAA,IAAI,CAAC,MAAlB,EADlB;qBAAA,MAAA;6BAGI,KAAC,CAAA,IAAI,CAAC,KAAN,GAAc,aAHlB;;kBADM;gBAAA,CAAA,CAAA,CAAA,IAAA,CANV;eADO;aANX;WADM,EAqBN;YAAA,GAAA,EAAU,QAAV;YACA,QAAA,EAAW,CAAA,SAAA,KAAA;qBAAA,SAAA;uBAAM,KAAC,CAAA,IAAI,CAAC,MAAN,KAAgB;cAAtB;YAAA,CAAA,CAAA,CAAA,IAAA,CADX;YAEA,OAAA,EAAW,CAAA,SAAA,KAAA;qBAAA,SAAA;uBAAM,KAAC,CAAA,IAAI,CAAC,IAAN,CAAA;cAAN;YAAA,CAAA,CAAA,CAAA,IAAA,CAFX;YAGA,QAAA,EAAU,CACN,CAAC,IAAC,CAAA,IAAF,EAAQ,QAAR,CADM,CAHV;YAMA,QAAA,EAAU,MANV;WArBM,EA6BN;YAAA,GAAA,EAAU,QAAV;YACA,QAAA,EAAU,CAAA,SAAA,KAAA;qBAAA,SAAA;uBAAM,KAAC,CAAA,IAAI,CAAC,MAAN,IAAgB,KAAC,CAAA,IAAI,CAAC,OAAO,CAAC;cAApC;YAAA,CAAA,CAAA,CAAA,IAAA,CADV;YAEA,OAAA,EAAU,CAAA,SAAA,KAAA;qBAAA,SAAA;uBAAM,KAAC,CAAA,IAAI,CAAC,IAAN,CAAA;cAAN;YAAA,CAAA,CAAA,CAAA,IAAA,CAFV;YAGA,QAAA,EAAU,CACN,CAAC,IAAC,CAAA,IAAF,EAAQ,QAAR,CADM,CAHV;YAMA,QAAA,EAAU,MANV;WA7BM;SADV;;IADI;;;;KAZU;;EAuDtB,MAAM,CAAC,OAAP,GAAiB;AA1DjB","sourcesContent":["ViewNode = require('../two-trees').ViewNode\n\n\nclass AppView extends ViewNode\n\n\n    constructor: (cfg) ->\n        super cfg\n\n\n    updateCfg: (cfg) ->\n        super cfg\n        @data = @tree.root\n\n\n    render: () ->\n        tag: 'div'\n        children: [\n            tag:       'h1'\n            className: 'my-class'\n            onClick: () =>\n                ++@data.clicks\n                @data.bgGreen = (Math.random() * 100 + 155) >> 0\n                @tree.update()\n            children:  [\n                tag:      'div'\n                style:    () => \"padding: 20px; background-color: rgb(0,#{@data.bgGreen},0);\"\n                bindings: [\n                    [@data, 'bgGreen']\n                    [@data, 'clicks']\n                ]\n                children: () =>\n                    if @data.clicks\n                        @data.title + \" clicks: #{@data.clicks}\"\n                    else\n                        @data.title + ' click me!'\n            ]\n        ,\n            tag:      'button'\n            disabled:  () => @data.clicks == 0\n            onClick:   () => @tree.undo()\n            bindings: [\n                [@data, 'clicks']\n            ]\n            children: 'undo'\n        ,\n            tag:      'button'\n            disabled: () => @data.clicks >= @tree.history.length\n            onClick:  () => @tree.redo()\n            bindings: [\n                [@data, 'clicks']\n            ]\n            children: 'redo'\n        ]\n\n\n\n\nmodule.exports = AppView"]}}]}