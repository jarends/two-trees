// Generated by CoffeeScript 1.12.6
(function() {
  var AppView, ViewTree,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ViewTree = require('../two-trees').ViewTree;

  AppView = (function(superClass) {
    extend(AppView, superClass);

    function AppView(cfg) {
      AppView.__super__.constructor.call(this, cfg);
      this.model = cfg.model;
      this.data = cfg.model.root;
    }

    AppView.prototype.render = function() {
      var cfg;
      cfg = {
        tag: 'div',
        children: [
          {
            tag: 'h1',
            className: 'my-class',
            onClick: (function(_this) {
              return function() {
                ++_this.data.clicks;
                _this.data.bgGreen = (Math.random() * 100 + 155) >> 0;
                return _this.model.update();
              };
            })(this),
            children: [
              {
                tag: 'div',
                style: (function(_this) {
                  return function() {
                    return "padding: 20px; background-color: rgb(0," + _this.data.bgGreen + ",0);";
                  };
                })(this),
                bindings: [[this.data, 'bgGreen'], [this.data, 'clicks']],
                children: (function(_this) {
                  return function() {
                    if (_this.data.clicks) {
                      return _this.data.title.replace(' click me!', '') + (" clicks: " + _this.data.clicks);
                    } else {
                      return _this.data.title;
                    }
                  };
                })(this)
              }
            ]
          }, {
            tag: 'button',
            disabled: (function(_this) {
              return function() {
                return _this.data.clicks === 0;
              };
            })(this),
            onClick: (function(_this) {
              return function() {
                return _this.model.undo();
              };
            })(this),
            bindings: [[this.data, 'clicks']],
            children: 'undo'
          }, {
            tag: 'button',
            disabled: (function(_this) {
              return function() {
                return _this.data.clicks >= _this.model.history.length;
              };
            })(this),
            onClick: (function(_this) {
              return function() {
                return _this.model.redo();
              };
            })(this),
            bindings: [[this.data, 'clicks']],
            children: 'redo'
          }
        ]
      };
      return cfg;
    };

    return AppView;

  })(ViewTree.Node);

  module.exports = AppView;

}).call(this);

//# sourceMappingURL=app-view.js.map
