// Generated by CoffeeScript 1.12.6
(function() {
  var AppView, ViewTree,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ViewTree = require('../two-trees').ViewTree;

  AppView = (function(superClass) {
    extend(AppView, superClass);

    function AppView(cfg) {
      this.redo = bind(this.redo, this);
      this.undo = bind(this.undo, this);
      this.onClick = bind(this.onClick, this);
      AppView.__super__.constructor.call(this, cfg);
      this.model = cfg.model;
      this.data = cfg.model.root;
      this.title = this.data.title;
      this.data.title = this.title + " click me!";
    }

    AppView.prototype.onClick = function() {
      this.data.bgGreen = (Math.random() * 100 + 155) >> 0;
      this.data.title = this.title + (" clicks: " + (this.model.historyIndex + 1));
      this.model.update();
      return null;
    };

    AppView.prototype.undo = function() {
      return this.model.undo();
    };

    AppView.prototype.redo = function() {
      return this.model.redo();
    };

    AppView.prototype.render = function() {
      return {
        tag: 'div',
        children: [
          {
            tag: 'h1',
            className: 'my-class',
            onClick: this.onClick,
            children: [
              {
                tag: 'div',
                style: (function(_this) {
                  return function() {
                    return "padding: 20px; background-color: rgb(0," + _this.data.bgGreen + ",0);";
                  };
                })(this),
                bindings: [[this.data, 'bgGreen'], [this.data, 'title']],
                children: (function(_this) {
                  return function() {
                    return _this.data.title;
                  };
                })(this)
              }
            ]
          }, {
            tag: 'button',
            disabled: this.model.historyIndex < 1 && false,
            onClick: this.undo,
            children: 'undo'
          }, {
            tag: 'button',
            disabled: this.model.historyIndex >= this.model.history.length && false,
            onClick: this.redo,
            children: 'redo'
          }
        ]
      };
    };

    return AppView;

  })(ViewTree.Node);

  module.exports = AppView;

}).call(this);

//# sourceMappingURL=app-view.js.map
