{"version":3,"file":"main.pack.js","sourceRoot":"","sources":["main.pack.js"],"sections":[{"offset":{"line":186,"column":0},"map":{"version":3,"file":"main.js","sourceRoot":"","sources":["../../../00-hello-world/main.coffee"],"names":[],"mappings":";AAAA;AAAA,MAAA;;EAAA,QAAA,GAAW,OAAA,CAAQ,cAAR,CAAuB,CAAC;;EAEnC,GAAA,GAAM,QAAQ,CAAC,MAAT,CAAgB,iBAAhB;;EAEN,GAAG,CAAC,QAAJ,CAAa,QAAQ,CAAC,aAAT,CAAuB,MAAvB,CAAb;AAJA","sourcesContent":["ViewNode = require('../two-trees').ViewNode\n\napp = ViewNode.create 'Hello World ;-)'\n\napp.appendTo document.querySelector '.app'\n\n"]}},{"offset":{"line":203,"column":0},"map":{"version":3,"file":"../two-trees/index.js","sourceRoot":"","sources":["../../../two-trees/index.coffee"],"names":[],"mappings":";AAAA;EAAA,MAAM,CAAC,OAAP,GAAiB,OAAA,CAAQ,oBAAR;AAAjB","sourcesContent":["module.exports = require '../../../../src/js'"]}},{"offset":{"line":214,"column":0},"map":{"version":3,"file":"../../../../src/js/index.js","sourceRoot":"","sources":["../../../../../../../../../../src/coffee/index.coffee"],"names":[],"mappings":";AAAA;EAAA,MAAM,CAAC,OAAP,GACI;IAAA,QAAA,EAAU,OAAA,CAAQ,aAAR,CAAV;IACA,QAAA,EAAU,OAAA,CAAQ,aAAR,CADV;IAEA,QAAA,EAAU,OAAA,CAAQ,aAAR,CAFV;;AADJ","sourcesContent":["module.exports =\n    DataTree: require './data-tree'\n    ViewNode: require './view-node'\n    CompNode: require './comp-node'"]}},{"offset":{"line":229,"column":0},"map":{"version":3,"file":"../../../../src/js/data-tree.js","sourceRoot":"","sources":["../../../../../../../../../../src/coffee/data-tree.coffee"],"names":[],"mappings":";AAAA;AAAA,MAAA;;EAAA,MAAA,GAAS;;EAGH;IAGW,iBAAC,IAAD;MACT,IAAC,CAAA,OAAD,GAAgB;MAChB,IAAC,CAAA,QAAD,GAAgB;MAChB,IAAC,CAAA,OAAD,GAAgB;MAChB,IAAC,CAAA,YAAD,GAAgB;MAChB,IAAkB,IAAlB;QAAA,IAAC,CAAA,OAAD,CAAS,IAAT,EAAA;;IALS;;sBAUb,OAAA,GAAS,SAAC,GAAD;MAEL,IAAC,CAAA,QAAD,GAAY,IAAC,CAAA,UAAD,CAAY,IAAZ,EAAkB,GAAlB,EAAuB,GAAvB;aACZ,IAAC,CAAA,IAAD,GAAY;IAHP;;sBAMT,OAAA,GAAS,SAAA;MACL,IAAe,CAAI,IAAC,CAAA,QAApB;AAAA,eAAO,KAAP;;aACA,IAAC,CAAA,QAAQ,CAAC;IAFL;;sBAKT,GAAA,GAAK,SAAC,GAAD;aACF,OAAO,GAAP,KAAc,QAAd,IAA2B,IAAC,CAAA,OAAQ,CAAA,GAAG,CAAC,WAAJ,CAAT,KAA6B;IADtD;;sBAML,IAAA,GAAM,SAAC,GAAD,EAAM,IAAN,EAAY,QAAZ;AACF,UAAA;MAAA,IAAA,GAAW,OAAO,GAAP,KAAc,QAAjB,GAA+B,IAAC,CAAA,OAAQ,CAAA,GAAG,CAAC,WAAJ,CAAxC,GAA8D;MACtE,IAAG,CAAI,IAAP;QACI,OAAO,CAAC,KAAR,CAAc,KAAA,GAAQ,uCAAtB,EAA+D,GAA/D;AACA,cAAM,IAAI,KAAJ,CAAU,KAAV,EAFV;;MAIA,KAAA,GAAQ;MACR,IAAC,CAAA,QAAD,CAAU,IAAV,EAAgB,IAAhB,EAAsB,IAAtB,EAA4B,CAAA,SAAA,KAAA;eAAA,SAAC,IAAD;AACxB,cAAA;UAAA,SAAA,GAAY,KAAC,CAAA,QAAS,CAAA,IAAA,CAAV,IAAmB,CAAA,KAAC,CAAA,QAAS,CAAA,IAAA,CAAV,GAAkB,EAAlB;UAC/B,IAAG,SAAS,CAAC,OAAV,CAAkB,QAAlB,CAAA,KAA+B,CAAC,CAAnC;YAEI,SAAS,CAAC,IAAV,CAAe,QAAf;mBACA,KAAM,CAAA,IAAA,CAAN,GAAc,SAHlB;;QAFwB;MAAA,CAAA,CAAA,CAAA,IAAA,CAA5B;aAOA;IAdE;;sBAmBN,MAAA,GAAQ,SAAC,KAAD;AACJ,UAAA;MAAA,OAAA,GAAU,KAAA,GAAQ;AAClB,WAAA,aAAA;;QACI,SAAA,GAAY,IAAC,CAAA,QAAS,CAAA,IAAA;QACtB,EAAE;QACF,IAAG,SAAH;UACI,KAAA,GAAQ,SAAS,CAAC,OAAV,CAAkB,QAAlB;UACR,IAAG,KAAA,GAAQ,CAAC,CAAZ;YACI,EAAE;YACF,SAAS,CAAC,MAAV,CAAiB,KAAjB,EAAwB,CAAxB,EAFJ;;UAGA,IAA0B,SAAS,CAAC,MAAV,KAAoB,CAA9C;YAAA,OAAO,IAAC,CAAA,QAAS,CAAA,IAAA,EAAjB;WALJ;;AAHJ;aASA,OAAA,KAAW;IAXP;;sBAgBR,MAAA,GAAQ,SAAC,GAAD,EAAM,IAAN;AACJ,UAAA;MAAA,IAAA,GAAU,OAAO,GAAP,KAAc,QAAjB,GAA+B,IAAC,CAAA,OAAQ,CAAA,GAAG,CAAC,WAAJ,CAAxC,GAA8D,IAAC,CAAA;MACtE,IAAG,CAAI,IAAP;QACI,OAAO,CAAC,KAAR,CAAc,KAAA,GAAQ,uCAAtB,EAA+D,GAA/D;AACA,cAAM,IAAI,KAAJ,CAAU,KAAV,EAFV;;MAIA,IAAC,CAAA,cAAD,GAAkB;MAClB,IAAC,CAAA,YAAD,GAAkB;MAClB,IAAC,CAAA,UAAD,GAAkB;MAClB,IAAG,IAAA,KAAQ,MAAX;QACI,IAAC,CAAA,UAAD,CAAY,IAAZ,EAAkB,IAAlB,EADJ;OAAA,MAAA;QAGI,IAAC,CAAA,UAAD,CAAY,IAAZ,EAHJ;;MAKA,IAAG,IAAC,CAAA,cAAc,CAAC,MAAnB;QACI,IAAG,IAAC,CAAA,YAAD,GAAgB,IAAC,CAAA,OAAO,CAAC,MAA5B;UAEI,IAAC,CAAA,OAAO,CAAC,MAAT,GAAkB,IAAC,CAAA,aAFvB;;QAGA,IAAC,CAAA,OAAO,CAAC,IAAT,CAAc,IAAC,CAAA,cAAf;QACA,EAAE,IAAC,CAAA;QAEH,IAAC,CAAA,cAAc,CAAC,KAAhB,GAAwB,IAAC,CAAA;QACzB,IAAC,CAAA,gBAAD,CAAkB,IAAC,CAAA,YAAnB,EARJ;;MASA,IAAC,CAAA,YAAD,GAAgB;aAChB;IAxBI;;sBA6BR,IAAA,GAAM,SAAA;AACF,UAAA;MAAA,IAAG,IAAC,CAAA,YAAD,GAAgB,CAAnB;QACI,OAAA,GAAU,IAAC,CAAA,OAAQ,CAAA,EAAE,IAAC,CAAA,YAAH;AACnB,aAAA,yCAAA;;UAAA,MAAM,CAAC,IAAP,CAAA;AAAA;QAEA,IAAC,CAAA,gBAAD,CAAkB,OAAO,CAAC,KAA1B,EAJJ;OAAA,MAAA;QAMI,OAAO,CAAC,GAAR,CAAY,uBAAZ,EAAqC,IAAC,CAAA,YAAtC,EANJ;;aAOA;IARE;;sBAaN,IAAA,GAAM,SAAA;AACF,UAAA;MAAA,IAAG,IAAC,CAAA,YAAD,GAAgB,IAAC,CAAA,OAAO,CAAC,MAA5B;QACI,OAAA,GAAU,IAAC,CAAA,OAAQ,CAAA,IAAC,CAAA,YAAD,EAAA;AACnB,aAAA,yCAAA;;UAAA,MAAM,CAAC,IAAP,CAAA;AAAA;QAEA,IAAC,CAAA,gBAAD,CAAkB,OAAO,CAAC,KAA1B,EAJJ;OAAA,MAAA;QAMI,OAAO,CAAC,GAAR,CAAY,uBAAZ,EAAqC,IAAC,CAAA,YAAtC,EANJ;;aAOA;IARE;;sBAaN,gBAAA,GAAkB,SAAC,KAAD;AACd,UAAA;MAAA,MAAA,GAAa;MACb,UAAA,GAAa;AACb,WAAA,aAAA;;QACI,KAAA,GAAa,IAAI,CAAC,KAAL,CAAW,GAAX;QACb,IAAA,GAAa,KAAK,CAAC,GAAN,CAAA,CAAA,IAAe;QAC5B,KAAA,GAAa,KAAK,CAAC,IAAN,CAAW,GAAX,CAAA,GAAkB;QAC/B,SAAA,GAAa,IAAC,CAAA,QAAS,CAAA,IAAA;QACvB,UAAA,GAAa,IAAC,CAAA,QAAS,CAAA,KAAA;QACvB,KAAA,GAAa,IAAI,CAAC;QAElB,IAAG,SAAH;AACI,eAAA,2CAAA;;YACI,IAAG,MAAM,CAAC,OAAP,CAAe,QAAf,CAAA,KAA4B,CAAC,CAAhC;cACI,QAAA,CAAS,KAAM,CAAA,IAAA,CAAf,EAAsB,KAAtB,EAA6B,IAA7B,EAAmC,IAAnC;cACA,UAAA,GAAa;cACb,MAAM,CAAC,IAAP,CAAY,QAAZ,EAHJ;;AADJ,WADJ;;QAOA,IAAG,UAAH;AACI,eAAA,8CAAA;;YAEI,QAAA,CAAS,KAAT;YACA,UAAA,GAAa;AAHjB,WADJ;;AAfJ;aAqBA;IAxBc;;sBA6BlB,UAAA,GAAY,SAAC,KAAD,EAAQ,IAAR,EAAc,KAAd;AACR,UAAA;MAAA,IAAsC,KAAtC;QAAA,IAAA,GAAO,IAAC,CAAA,OAAQ,CAAA,KAAK,CAAC,WAAN,EAAhB;;MACA,IAAG,CAAI,IAAP;QACI,EAAA,GAAK,EAAE;QACP,IAAA,GACI;UAAA,EAAA,EAAQ,EAAR;UACA,KAAA,EAAQ,KADR;UAEA,IAAA,EAAQ,OAFR;UAGA,MAAA,EAAQ,EAHR;;QAKJ,IAAC,CAAA,OAAQ,CAAA,IAAI,CAAC,EAAL,CAAT,GAAoB;QACpB,IAAG,KAAH;UAEI,IAAC,CAAA,QAAD,CAAU,KAAV,EAAiB,IAAjB,EAAuB,IAAC,CAAA,YAAxB,EAFJ;;QAIA,IAAG,KAAH;UACI,IAAG,KAAK,CAAC,WAAW,CAAC,IAAlB,KAA0B,OAA7B;YACI,MAAM,CAAC,cAAP,CAAsB,KAAtB,EAA6B,aAA7B,EACI;cAAA,KAAA,EAAY,IAAI,CAAC,EAAjB;cACA,UAAA,EAAY,KADZ;aADJ;YAIA,IAAI,CAAC,IAAL,GAAa;YACb,IAAI,CAAC,KAAL,GAAa,KAAA,GAAQ;YACrB,CAAA,GAAa,KAAK,CAAC;AACnB,iBAAS,0EAAT;cACI,KAAM,CAAA,CAAA,CAAN,GAAW,IAAC,CAAA,UAAD,CAAY,IAAZ,EAAkB,CAAlB,EAAqB,KAAM,CAAA,CAAA,CAA3B;AADf,aARJ;WAAA,MAWK,IAAG,KAAK,CAAC,WAAW,CAAC,IAAlB,KAA0B,QAA7B;YACD,MAAM,CAAC,cAAP,CAAsB,KAAtB,EAA6B,aAA7B,EACI;cAAA,KAAA,EAAY,IAAI,CAAC,EAAjB;cACA,UAAA,EAAY,KADZ;aADJ;YAIA,IAAI,CAAC,IAAL,GAAa;YACb,IAAI,CAAC,KAAL,GAAa,KAAA,GAAQ;AACrB,iBAAA,YAAA;cACI,KAAM,CAAA,GAAA,CAAN,GAAa,IAAC,CAAA,UAAD,CAAY,IAAZ,EAAkB,GAAlB,EAAuB,KAAM,CAAA,GAAA,CAA7B;AADjB,aAPC;WAZT;SAbJ;;MAmCA,IAA+B,KAA/B;QAAA,QAAA,CAAS,IAAT,EAAe,KAAf,EAAsB,IAAtB,EAAA;;aACA;IAtCQ;;sBA2CZ,UAAA,GAAY,SAAC,IAAD;AACR,UAAA;MAAA,IAAe,IAAC,CAAA,UAAW,CAAA,IAAI,CAAC,EAAL,CAA3B;AAAA,eAAO,KAAP;;MACA,IAAC,CAAA,UAAW,CAAA,IAAI,CAAC,EAAL,CAAZ,GAAuB;MAEvB,KAAA,GAAQ,IAAI,CAAC;MACb,KAAA,GAAQ,IAAI,CAAC;MACb,IAAG,IAAI,CAAC,IAAL,KAAa,OAAhB;QACI,EAAA,GAAK,KAAK,CAAC;QACX,EAAA,GAAK,KAAK,CAAC;QACX,CAAA,GAAQ,EAAA,GAAK,EAAR,GAAgB,EAAhB,GAAwB;AAC7B,aAAS,0EAAT;UACI,IAAC,CAAA,UAAD,CAAY,IAAZ,EAAkB,CAAlB;AADJ;QAEA,IAAG,EAAA,KAAM,EAAT;UACI,IAAC,CAAA,qBAAD,CAAuB,IAAvB,EAA6B,EAA7B,EAAiC,EAAjC;UACA,KAAK,CAAC,MAAN,GAAe,GAFnB;SANJ;OAAA,MAUK,IAAG,IAAI,CAAC,IAAL,KAAa,QAAhB;QACD,IAAA,GAAO,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAlB,EAAyB,KAAzB;AACP,aAAA,WAAA;UACI,IAAC,CAAA,UAAD,CAAY,IAAZ,EAAkB,GAAlB;AADJ,SAFC;;aAIL;IApBQ;;sBAyBZ,UAAA,GAAY,SAAC,IAAD,EAAO,IAAP;AACR,UAAA;MAAA,KAAA,GAAQ,IAAI,CAAC,KAAM,CAAA,IAAA;MACnB,KAAA,GAAQ,IAAI,CAAC,KAAM,CAAA,IAAA;MAEnB,IAAG,CAAI,KAAJ,IAAc,KAAA,KAAS,MAA1B;QACI,OAAO,CAAC,KAAR,CAAc,2DAAA,GAA4D,IAA5D,GAAiE,cAA/E,EAA8F,IAA9F;AACA,eAAO,MAFX;;MAKA,IAAG,CAAI,KAAP;QACI,KAAA,GAAQ,IAAC,CAAA,UAAD,CAAY,IAAZ,EAAkB,IAAlB,EAAwB,KAAxB;QACR,IAAC,CAAA,eAAD,CAAiB,KAAjB,EAAwB,IAAxB,EAA8B,IAA9B,EAFJ;OAAA,MAKK,IAAG,KAAA,KAAS,MAAZ;QACD,IAAqB,KAAK,CAAC,IAAN,KAAc,OAAnC;UAAA,IAAC,CAAA,UAAD,CAAY,KAAZ,EAAA;;QACA,WAAA,CAAY,KAAZ,EAAmB,IAAnB,EAAyB,IAAzB;QACA,IAAC,CAAA,eAAD,CAAiB,KAAjB,EAAwB,IAAxB,EAA8B,IAA9B,EAHC;OAAA,MAAA;QAOD,IAAG,KAAK,CAAC,KAAN,KAAe,KAAlB;UAGI,IAAG,KAAK,CAAC,IAAN,KAAc,OAAjB;YACI,IAAsB,CAAI,IAAC,CAAA,UAAW,CAAA,KAAK,CAAC,EAAN,CAAtC;cAAA,IAAC,CAAA,UAAD,CAAY,KAAZ,EAAA;aADJ;WAAA,MAAA;AAKI,mBAAO,MALX;WAHJ;SAAA,MAAA;UAWI,IAAA,GAAO;UACP,IAAG,KAAH;YACI,IAAG,KAAK,CAAC,WAAW,CAAC,IAAlB,KAA0B,OAA7B;cACI,IAAA,GAAO,QADX;aAAA,MAEK,IAAG,KAAK,CAAC,WAAW,CAAC,IAAlB,KAA0B,QAA7B;cACD,IAAA,GAAO,SADN;aAHT;;UAOA,IAAG,IAAA,KAAQ,OAAR,IAAmB,IAAA,KAAQ,KAAK,CAAC,IAApC;YAEI,WAAA,CAAY,KAAZ,EAAmB,IAAnB,EAAyB,IAAzB;YACA,IAAA,GAAO,IAAC,CAAA,UAAD,CAAY,IAAZ,EAAkB,IAAlB,EAAwB,KAAxB;YACP,IAAC,CAAA,aAAD,CAAe,KAAf,EAAsB,IAAtB,EAA4B,IAA5B,EAAkC,IAAlC,EAJJ;WAAA,MAAA;YAUI,IAAC,CAAA,oBAAD,CAAsB,KAAtB,EAA6B,IAA7B,EAAmC,IAAnC,EAAyC,KAAzC;YACA,KAAK,CAAC,KAAN,GAAc,MAXlB;WAnBJ;SAPC;;aAsCL;IApDQ;;sBAyDZ,eAAA,GAAiB,SAAC,IAAD,EAAO,KAAP,EAAc,IAAd;MACb,IAAC,CAAA,QAAD,CAAU,KAAV,EAAiB,IAAjB,EAAuB,IAAC,CAAA,YAAxB;MACA,IAAC,CAAA,cAAc,CAAC,IAAhB,CACI;QAAA,IAAA,EAAO,QAAP;QACA,IAAA,EAAM,SAAA;iBAAM,WAAA,CAAY,IAAZ,EAAkB,KAAlB,EAAyB,IAAzB;QAAN,CADN;QAEA,IAAA,EAAM,SAAA;iBAAM,QAAA,CAAY,IAAZ,EAAkB,KAAlB,EAAyB,IAAzB;QAAN,CAFN;OADJ;aAIA;IANa;;sBASjB,eAAA,GAAiB,SAAC,IAAD,EAAO,KAAP,EAAc,IAAd;MACb,IAAC,CAAA,QAAD,CAAU,KAAV,EAAiB,IAAjB,EAAuB,IAAC,CAAA,YAAxB;MACA,IAAC,CAAA,cAAc,CAAC,IAAhB,CACI;QAAA,IAAA,EAAO,QAAP;QACA,IAAA,EAAM,SAAA;iBAAM,QAAA,CAAY,IAAZ,EAAkB,KAAlB,EAAyB,IAAzB;QAAN,CADN;QAEA,IAAA,EAAM,SAAA;iBAAM,WAAA,CAAY,IAAZ,EAAkB,KAAlB,EAAyB,IAAzB;QAAN,CAFN;OADJ;aAIA;IANa;;sBASjB,aAAA,GAAe,SAAC,IAAD,EAAO,KAAP,EAAc,IAAd,EAAoB,IAApB;MACX,IAAC,CAAA,QAAD,CAAU,KAAV,EAAiB,IAAjB,EAAuB,IAAC,CAAA,YAAxB;MACA,IAAC,CAAA,cAAc,CAAC,IAAhB,CACI;QAAA,IAAA,EAAO,MAAP;QACA,IAAA,EAAM,SAAA;UACF,WAAA,CAAY,IAAZ,EAAkB,KAAlB,EAAyB,IAAzB;iBACA,QAAA,CAAY,IAAZ,EAAkB,KAAlB,EAAyB,IAAzB;QAFE,CADN;QAIA,IAAA,EAAM,SAAA;UACF,WAAA,CAAY,IAAZ,EAAkB,KAAlB,EAAyB,IAAzB;iBACA,QAAA,CAAY,IAAZ,EAAkB,KAAlB,EAAyB,IAAzB;QAFE,CAJN;OADJ;aAQA;IAVW;;sBAaf,oBAAA,GAAsB,SAAC,IAAD,EAAO,KAAP,EAAc,IAAd,EAAoB,QAApB;MAClB,IAAC,CAAA,QAAD,CAAU,KAAV,EAAiB,IAAjB,EAAuB,IAAC,CAAA,YAAxB;MACA,IAAC,CAAA,cAAc,CAAC,IAAhB,CACI;QAAA,IAAA,EAAO,aAAP;QACA,QAAA,EAAU,IAAI,CAAC,KADf;QAEA,IAAA,EAAM,SAAA;UACF,IAAI,CAAC,KAAL,GAAoB,IAAI,CAAC;iBACzB,KAAK,CAAC,KAAM,CAAA,IAAA,CAAZ,GAAoB,IAAI,CAAC;QAFvB,CAFN;QAKA,IAAA,EAAM,SAAA;UACF,IAAI,CAAC,KAAL,GAAoB;iBACpB,KAAK,CAAC,KAAM,CAAA,IAAA,CAAZ,GAAoB;QAFlB,CALN;OADJ;aASA;IAXkB;;sBActB,qBAAA,GAAuB,SAAC,IAAD,EAAO,SAAP,EAAkB,SAAlB;MACnB,IAAC,CAAA,cAAc,CAAC,IAAhB,CACI;QAAA,IAAA,EAAO,cAAP;QACA,IAAA,EAAM,SAAA;iBAAM,IAAI,CAAC,KAAK,CAAC,MAAX,GAAoB,IAAI,CAAC,KAAK,CAAC,MAAX,GAAoB;QAA9C,CADN;QAEA,IAAA,EAAM,SAAA;iBAAM,IAAI,CAAC,KAAK,CAAC,MAAX,GAAoB,IAAI,CAAC,KAAK,CAAC,MAAX,GAAoB;QAA9C,CAFN;OADJ;aAIA;IALmB;;sBAUvB,QAAA,GAAU,SAAC,IAAD,EAAO,IAAP,EAAa,KAAb,EAAoB,QAApB,EAA8B,IAA9B;AACN,UAAA;MAAA,IAAA,GAAW,IAAA,KAAQ,IAAR,IAAgB,IAAA,KAAQ,MAA3B,GAA0C,EAA1C,GAAkD,IAAA,GAAO;MACjE,IAAsB,IAAtB;QAAA,IAAA,GAAQ,GAAA,GAAM,KAAd;;MACA,KAAA,GAAQ,KAAA,IAAS;MACjB,IAAA,GAAQ,IAAA,IAAQ;MAEhB,IAAG,IAAA,KAAQ,IAAC,CAAA,QAAZ;QAEI,KAAM,CAAA,IAAA,CAAN,GAAc;QACd,IAAiB,QAAjB;UAAA,QAAA,CAAS,IAAT,EAAA;SAHJ;OAAA,MAAA;AAKI;AAAA,aAAA,SAAA;;UACI,KAAA,GAAQ,IAAC,CAAA,OAAQ,CAAA,EAAA;AACjB,eAAA,UAAA;YACI,IAAC,CAAA,QAAD,CAAU,KAAV,EAAiB,CAAA,GAAI,IAArB,EAA2B,KAA3B,EAAkC,QAAlC,EAA4C,IAA5C;AADJ;AAFJ,SALJ;;aASA;IAfM;;;;;;EAoBd,QAAA,GAAW,SAAC,IAAD,EAAO,KAAP,EAAc,IAAd;AACP,QAAA;IAAA,MAAA,GAAS,IAAI,CAAC;IACd,KAAA,GAAS,MAAO,CAAA,KAAK,CAAC,EAAN,CAAP,IAAoB,CAAA,MAAO,CAAA,KAAK,CAAC,EAAN,CAAP,GAAmB,EAAnB;IAC7B,IAAG,KAAM,CAAA,IAAA,CAAT;AACI,aAAO,KADX;;IAEA,KAAM,CAAA,IAAA,CAAN,GAAoB;IACpB,KAAK,CAAC,KAAM,CAAA,IAAA,CAAZ,GAAoB;IACpB,KAAK,CAAC,KAAM,CAAA,IAAA,CAAZ,GAAoB,IAAI,CAAC;WACzB;EARO;;EAaX,WAAA,GAAc,SAAC,IAAD,EAAO,KAAP,EAAc,IAAd;AACV,QAAA;IAAA,MAAA,GAAS,IAAI,CAAC;IACd,KAAA,GAAS,MAAO,CAAA,KAAK,CAAC,EAAN;IAChB,IAAG,CAAI,KAAJ,IAAa,CAAI,KAAM,CAAA,IAAA,CAA1B;AACI,aAAO,KADX;;IAEA,OAAO,KAAM,CAAA,IAAA;IACb,OAAO,KAAK,CAAC,KAAM,CAAA,IAAA;IACnB,OAAO,KAAK,CAAC,KAAM,CAAA,IAAA;WACnB;EARU;;EAmBd,IAAG,MAAM,CAAC,cAAP,KAAyB,MAA5B;IACI,MAAM,CAAC,cAAP,GAAwB,SAAC,GAAD,EAAM,IAAN,EAAY,IAAZ;aACpB,GAAI,CAAA,IAAA,CAAJ,GAAY,IAAI,CAAC;IADG,EAD5B;;;EAOA,IAAG,OAAO,MAAP,KAAiB,WAApB;IACI,MAAM,CAAC,OAAP,GAAiB,QADrB;;;EAEA,IAAG,OAAO,MAAP,KAAiB,WAApB;IACI,MAAM,CAAC,OAAP,GAAiB,QADrB;GAAA,MAAA;IAGI,IAAI,CAAC,OAAL,GAAe,QAHnB;;AAzYA","sourcesContent":["__id__ = 0\n\n\nclass TreeTwo\n\n\n    constructor: (root) ->\n        @nodeMap      = {}\n        @bindings     = {}\n        @history      = []\n        @historyIndex = 0\n        @setRoot(root) if root\n\n\n\n\n    setRoot: (obj) ->\n        #TODO: add disposement for existing root\n        @rootNode = @createNode null, '/', obj\n        @root     = obj\n\n\n    getRoot: () ->\n        return null if not @rootNode\n        @rootNode.value\n\n\n    has: (obj) ->\n       typeof obj == 'object' and @nodeMap[obj.__node_id__] != undefined\n\n\n\n\n    bind: (obj, name, callback) ->\n        node  = if typeof obj == 'object' then @nodeMap[obj.__node_id__] else null\n        if not node\n            console.error error = 'Error: object not part of this tree: ', obj\n            throw new Error error\n\n        paths = {}\n        @addPaths node, name, null, (path) =>\n            callbacks = @bindings[path] or @bindings[path] = []\n            if callbacks.indexOf(callback) == -1\n                #console.log 'add binding: ', path\n                callbacks.push callback\n                paths[path] = callback\n        #console.log 'bind to: ', paths\n        paths\n\n\n\n\n    unbind: (paths) ->\n        unbound = total = 0\n        for path, callback of paths\n            callbacks = @bindings[path]\n            ++total\n            if callbacks\n                index = callbacks.indexOf callback\n                if index > -1\n                    ++unbound\n                    callbacks.splice index, 1\n                delete @bindings[path] if callbacks.length == 0\n        unbound == total\n\n\n\n\n    update: (obj, name) ->\n        node = if typeof obj == 'object' then @nodeMap[obj.__node_id__] else @rootNode\n        if not node\n            console.error error = 'Error: object not part of this tree: ', obj\n            throw new Error error\n\n        @currentActions = []\n        @currentPaths   = {}\n        @updatedMap     = {}\n        if name != undefined\n            @updateProp node, name\n        else\n            @updateNode node\n\n        if @currentActions.length\n            if @historyIndex < @history.length\n                #TODO: !!! add disposement\n                @history.length = @historyIndex\n            @history.push @currentActions\n            ++@historyIndex\n            #console.log 'changed paths: ', @currentPaths\n            @currentActions.paths = @currentPaths\n            @dispatchBindings @currentPaths\n        @currentPaths = null\n        false\n\n\n\n\n    undo: () ->\n        if @historyIndex > 0\n            actions = @history[--@historyIndex]\n            action.undo() for action in actions\n            #console.log 'undo: ', actions\n            @dispatchBindings actions.paths\n        else\n            console.log 'undo not possible!!! ', @historyIndex\n        null\n\n\n\n\n    redo: () ->\n        if @historyIndex < @history.length   \n            actions = @history[@historyIndex++]\n            action.redo() for action in actions\n            #console.log 'redo: ', actions\n            @dispatchBindings actions.paths\n        else\n            console.log 'redo not possible!!! ', @historyIndex\n        null\n\n\n\n\n    dispatchBindings: (paths) ->\n        called     = []\n        dispatched = false\n        for path, node of paths\n            parts      = path.split '/'\n            name       = parts.pop() or ''\n            ppath      = parts.join('/') + '/*'\n            callbacks  = @bindings[path]\n            pcallbacks = @bindings[ppath]\n            value      = node.value\n            #console.log 'dispatch path: ', path, node.value[name]\n            if callbacks\n                for callback in callbacks\n                    if called.indexOf(callback) == -1\n                        callback value[name], value, name, path\n                        dispatched = true\n                        called.push callback\n\n            if pcallbacks\n                for callback in pcallbacks\n                    #if called.indexOf(callback) == -1\n                    callback value\n                    dispatched = true\n                    #called.push callback\n        dispatched\n\n\n\n\n    createNode: (owner, name, value) ->\n        node = @nodeMap[value.__node_id__] if value\n        if not node\n            id = ++__id__\n            node =\n                id:     id\n                value:  value\n                type:   'value'\n                owners: {}\n\n            @nodeMap[node.id] = node\n            if owner\n                #console.log 'add path: ', name, owner, node\n                @addPaths owner, name, @currentPaths\n\n            if value\n                if value.constructor.name == 'Array'\n                    Object.defineProperty value, '__node_id__',\n                        value:      node.id\n                        enumerable: false\n\n                    node.type  = 'array'\n                    node.props = props = []\n                    l          = value.length\n                    for i in [0 ... l]\n                        props[i] = @createNode node, i, value[i]\n\n                else if value.constructor.name == 'Object'\n                    Object.defineProperty value, '__node_id__',\n                        value:      node.id\n                        enumerable: false\n\n                    node.type  = 'object'\n                    node.props = props = {}\n                    for key of value\n                        props[key] = @createNode node, key, value[key]\n\n        addOwner(node, owner, name) if owner\n        node\n\n\n\n\n    updateNode: (node) ->\n        return true if @updatedMap[node.id]\n        @updatedMap[node.id] = true\n\n        value = node.value\n        props = node.props\n        if node.type == 'array'\n            pl = props.length\n            vl = value.length\n            l  = if pl > vl then pl else vl\n            for i in [0...l]\n                @updateProp node, i\n            if pl != vl\n                @addChangeLengthAction node, pl, vl\n                props.length = vl\n\n        else if node.type == 'object'\n            keys = Object.assign {}, props, value\n            for key of keys\n                @updateProp node, key\n        null\n\n\n\n\n    updateProp: (node, name) ->\n        child = node.props[name]\n        value = node.value[name]\n\n        if not child and value == undefined\n            console.error \"Error: either old or new value must exist for property \\\"#{name}\\\" of node: \", node\n            return false\n\n        # value != undefined but no child, so create a new child\n        if not child\n            child = @createNode node, name, value\n            @addCreateAction child, node, name\n\n        # child exists but no value, so remove the child\n        else if value == undefined\n            @updateNode child if child.type != 'value'\n            removeOwner child, node, name\n            @addRemoveAction child, node, name\n\n        else\n            # not changed\n            if child.value == value\n\n                # the child's value hasn't changed, so update the child\n                if child.type != 'value'\n                    @updateNode(child) if not @updatedMap[child.id]\n\n                # no change of simple node\n                else\n                    return false\n            # changed\n            else\n                type = 'value'\n                if value\n                    if value.constructor.name == 'Array'\n                        type = 'array'\n                    else if value.constructor.name == 'Object'\n                        type = 'object'\n\n                # value changed from simple to complex or reverse or instance changed, so replace the child\n                if type != 'value' or type != child.type\n                    #@updateNode child if child.type != 'value'\n                    removeOwner child, node, name\n                    next = @createNode node, name, value\n                    @addSwapAction child, node, name, next\n                    #console.log 'change node: ', name, child, next, node\n\n                # skip unnecessary creation of simple nodes, because they are unique to their owner\n                else\n                    #console.log 'CHANGE VALUE: ', name, value\n                    @addChangeValueAction child, node, name, value\n                    child.value = value\n        null\n\n\n\n\n    addCreateAction: (node, owner, name) ->\n        @addPaths owner, name, @currentPaths\n        @currentActions.push\n            type:  'create'\n            undo: () -> removeOwner node, owner, name\n            redo: () -> addOwner    node, owner, name\n        null\n\n\n    addRemoveAction: (node, owner, name) ->\n        @addPaths owner, name, @currentPaths\n        @currentActions.push\n            type:  'remove'\n            undo: () -> addOwner    node, owner, name\n            redo: () -> removeOwner node, owner, name\n        null\n\n\n    addSwapAction: (node, owner, name, next) ->\n        @addPaths owner, name, @currentPaths\n        @currentActions.push\n            type:  'swap'\n            undo: () ->\n                removeOwner next, owner, name\n                addOwner    node, owner, name\n            redo: () ->\n                removeOwner node, owner, name\n                addOwner    next, owner, name\n        null\n\n\n    addChangeValueAction: (node, owner, name, newValue) ->\n        @addPaths owner, name, @currentPaths\n        @currentActions.push\n            type:  'changeValue'\n            oldValue: node.value\n            undo: () ->\n                node.value        = this.oldValue\n                owner.value[name] = this.oldValue\n            redo: () ->\n                node.value        = newValue\n                owner.value[name] = newValue\n        null\n\n\n    addChangeLengthAction: (node, oldLength, newLength) ->\n        @currentActions.push\n            type:  'changeLength'\n            undo: () -> node.value.length = node.props.length = oldLength\n            redo: () -> node.value.length = node.props.length = newLength\n        null\n\n\n\n\n    addPaths: (node, path, paths, callback, root) ->\n        path  = if path == null or path == undefined then '' else path + ''\n        path  = '/' + path if path\n        paths = paths or {}\n        root  = root or node\n        #console.log 'addPaths: ', path\n        if node == @rootNode\n            #console.log 'add path: ', path\n            paths[path] = root\n            callback path if callback\n        else\n            for id, names of node.owners\n                owner = @nodeMap[id]\n                for n of names\n                    @addPaths owner, n + path, paths, callback, root\n        paths\n\n\n\n\naddOwner = (node, owner, name) ->\n    owners = node.owners\n    names  = owners[owner.id] || owners[owner.id] = {}\n    if names[name]\n        return null\n    names[name]       = true\n    owner.props[name] = node\n    owner.value[name] = node.value\n    null\n\n\n\n\nremoveOwner = (node, owner, name) ->\n    owners = node.owners\n    names  = owners[owner.id]\n    if not names or not names[name]\n        return null\n    delete names[name]\n    delete owner.props[name]\n    delete owner.value[name]\n    null\n\n\n\n#    0000000    00000000  00000000  000  000   000  00000000        00000000   00000000    0000000   00000000\n#    000   000  000       000       000  0000  000  000             000   000  000   000  000   000  000   000\n#    000   000  0000000   000000    000  000 0 000  0000000         00000000   0000000    000   000  00000000\n#    000   000  000       000       000  000  0000  000             000        000   000  000   000  000\n#    0000000    00000000  000       000  000   000  00000000        000        000   000   0000000   000\n\n\nif Object.defineProperty == undefined\n    Object.defineProperty = (obj, name, data) ->\n        obj[name] = data.value\n\n\n\n\nif typeof module != 'undefined'\n    module.exports = TreeTwo\nif typeof window != 'undefined'\n    window.TreeTwo = TreeTwo\nelse\n    this.TreeTwo = TreeTwo"]}},{"offset":{"line":672,"column":0},"map":{"version":3,"file":"../../../../src/js/view-node.js","sourceRoot":"","sources":["../../../../../../../../../../src/coffee/view-node.coffee"],"names":[],"mappings":"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","sourcesContent":["__id__ = 0\n\n\ngetOrCall   = (value) -> if isFunc(value) then value() else value\nisBool      = (value) -> typeof value == 'boolean'\nisNumber    = (value) -> typeof value == 'number'\nisString    = (value) -> typeof value == 'string' or value == value + ''\nisObject    = (value) -> typeof value == 'object'\nisFunc      = (value) -> typeof value == 'function'\nisDom       = (value) -> value instanceof HTMLElement\nisDomText   = (value) -> value instanceof Text\nisNot       = (value) -> value == null or value == undefined\nisSimple    = (value) -> (t = typeof value) == 'string' or t == 'number' or t == 'boolean'\nextendsNode = (value) -> isFunc(value) and ((value.prototype instanceof ViewNode) or value == ViewNode)\n\n\nnormalizeName = (name) ->\n    name.replace /[A-Z]/g, (name) ->\n        '-' + name.toLowerCase()\n\n\nnormalizeEvent = (type) ->\n    type = type.slice 2\n    type.charAt(0).toLowerCase() + normalizeName type.slice(1)\n\n\n\n\n###\n    cfg as string || boolean || number\n        node is a text node\n\n    cfg as object\n        tag can be\n            string\n                which is mapped to an component class\n                the node name\n            node class\n            node instance\n\n    cfg as node instance # invalid in create\n\n    cfg as func\n\n\n    cfg =\n        tag:\n        text:\n        style:\n        bind\n        clazz:\n        child:\n        children:\n        event handlers starting with 'on', camel case converts to kebab case\n\n\n    update:\n\n        if value == undefined -> no update\n        if value == null      -> remove value\n        else                  -> update\n\n###\n\n\n\n\n\nclass ViewNode\n\n\n    @DEBUG         = true\n    @CHECK_DOM     = true\n    @DEFAULT_CLASS = @\n\n\n\n    constructor: (cfg) ->\n        @register cfg\n        @updateCfg cfg\n        @updateNow()\n\n\n    register: (@cfg) ->\n        @parent = null\n        @depth  = 0\n        @keep   = false\n        if not @__id__\n            @__id__ = ++__id__\n            nodeMap[@__id__] = @\n        @__id__\n        injectNode @, @cfg\n\n\n    updateNow: (cfg) ->\n        cfg = cfg or @render()\n        createView @, cfg if isNot @view\n        if isSimple(cfg) or (not cfg.tag and (isSimple(cfg.text) or isFunc(cfg.text)))\n            updateText @, cfg\n        else\n            updateProperties @, cfg\n        @\n\n\n    # add nodes view to dom\n    appendTo: (dom) -> append  @, dom\n    behind:   (dom) -> behind  @, dom\n    before:   (dom) -> before  @, dom\n    replace:  (dom) -> replace @, dom\n    remove:   (dom) -> replace @, dom\n\n\n    dispose: () -> null\n\n\n    onMount: () -> null\n\n\n    onUnmount: () -> @keep\n\n\n    updateCfg:   (cfg) -> (@cfg = cfg) or true\n    update:      () => update @\n    render:      () -> @cfg\n\n\n    onAdded:   () ->\n\n\n    onRemoved: () ->\n\n\n    addChild:       (child) ->\n    addChildAt:     (child, index) ->\n    removeChild:    (child) ->\n    removeChildAt:  (index) ->\n\n\n\n\n#    00000000   00000000    0000000   00000000    0000000\n#    000   000  000   000  000   000  000   000  000     \n#    00000000   0000000    000   000  00000000   0000000 \n#    000        000   000  000   000  000             000\n#    000        000   000   0000000   000        0000000 \n\nclassMap   = {}\nnodeMap    = {}\ndirtyMap   = {}\ncleanMap   = {}\ndomList    = []\ndirty      = false\nrafTimeout = null\n\n\n\n\n#    00     00   0000000   00000000 \n#    000   000  000   000  000   000\n#    000000000  000000000  00000000 \n#    000 0 000  000   000  000      \n#    000   000  000   000  000      \n\nmap = (tag, clazz, overwrite = false) ->\n    if isNot(classMap[tag]) or overwrite\n        classMap[tag] = clazz\n    null\n\n\n\n\n\n#    000   000  000   000  00     00   0000000   00000000 \n#    000   000  0000  000  000   000  000   000  000   000\n#    000   000  000 0 000  000000000  000000000  00000000 \n#    000   000  000  0000  000 0 000  000   000  000      \n#     0000000   000   000  000   000  000   000  000      \n\nunmap = (tag) ->\n    delete classMap[tag]\n    null\n\n\n\n\n#     0000000  00000000   00000000   0000000   000000000  00000000\n#    000       000   000  000       000   000     000     000     \n#    000       0000000    0000000   000000000     000     0000000 \n#    000       000   000  000       000   000     000     000     \n#     0000000  000   000  00000000  000   000     000     00000000\n\ncreate = (cfg, root = null) ->\n    if isNot cfg\n        throw new Error \"A node can't be created from empty cfg.\"\n        \n    if not extendsNode clazz = cfg.clazz\n        if not extendsNode clazz = cfg.tag\n            clazz = null\n            tag   = cfg.nodeName.toLowerCase() if isDom cfg\n            clazz = classMap[tag] if isString tag = tag or cfg.tag\n\n    clazz = clazz or ViewNode.DEFAULT_CLASS\n    node  = new clazz cfg\n\n    if root != null #TODO: node.render() is called twice in this case - bad!!!\n        render(node, root)\n    node\n\n\n\n\n#    000  000   000        000  00000000   0000000  000000000        000   000   0000000   0000000    00000000\n#    000  0000  000        000  000       000          000           0000  000  000   000  000   000  000     \n#    000  000 0 000        000  0000000   000          000           000 0 000  000   000  000   000  0000000 \n#    000  000  0000  000   000  000       000          000           000  0000  000   000  000   000  000     \n#    000  000   000   0000000   00000000   0000000     000           000   000   0000000   0000000    00000000\n\ninjectNode = (node, cfg) ->\n    if isNot(node.__i__) and cfg and cfg.__i__\n        inject    = node.__i__ = cfg.__i__\n        node[key] = value for key, value of inject\n    node\n\n\n\n\n#     0000000  00000000   00000000   0000000   000000000  00000000        000   000  000  00000000  000   000\n#    000       000   000  000       000   000     000     000             000   000  000  000       000 0 000\n#    000       0000000    0000000   000000000     000     0000000          000 000   000  0000000   000000000\n#    000       000   000  000       000   000     000     000                000     000  000       000   000\n#     0000000  000   000  00000000  000   000     000     00000000            0      000  00000000  00     00\n\ncreateView = (node, cfg) ->\n    if node.view\n        throw new Error \"View already exists\"\n    if isNot cfg = node.render()\n        throw new Error \"A view for an empty cfg can't be created.\"\n    switch true\n        when isSimple  cfg then createTextView    node, node.cfg = text: cfg + ''\n        when isDom     cfg then createTagFromDom  node, null, cfg\n        when isDomText cfg then createTextFromDom node, null, cfg\n        else\n            tag = cfg.tag\n            switch true\n                when isNot     tag then createTextView    node, cfg\n                when isString  tag then createTagView     node, cfg\n                when isDom     tag then createTagFromDom  node, cfg, tag\n                when isDomText tag then createTextFromDom node, cfg, tag\n                else\n                    if extendsNode tag\n                        throw new Error \"A tag must be a string or a HTMLElement, you specified a ViewNode class.\"\n                    throw new Error \"A tag must be a string or a HTMLElement.\"\n\n    domList.push node.view if ViewNode.CHECK_DOM\n    node\n\n\n\n\ncreateTextView = (node, cfg) ->\n    text = cfg.text\n    text = text() if isFunc text\n    if not isSimple text\n        throw new Error \"The text for a text node must be a string, number or bool.\"\n    node.text = text\n    node.tag  = cfg.tag  = null\n    node.kind = ViewNode.TEXT_KIND\n    node.view = document.createTextNode text\n\n\ncreateTextFromDom = (node, cfg, dom) ->\n    checkDom dom if ViewNode.CHECK_DOM\n    node.text = dom.nodeValue\n    node.tag  = null\n    node.kind = ViewNode.TEXT_KIND\n    node.view = dom\n    if cfg\n        text = cfg.text\n        if isNot text\n            cfg.text = node.text\n        else\n            text = text() if isFunc text\n            if not isSimple text\n                throw new Error \"The text for a text node must be a string, number or bool.\"\n            node.text = dom.nodeValue = text\n    else\n        cfg = node.cfg = text: node.text\n    cfg.tag = null\n    node\n\n\ncreateTagView = (node, cfg) ->\n    node.tag  = tag = cfg.tag\n    node.kind = ViewNode.TAG_KIND\n    node.view = document.createElement tag\n    node\n\n\ncreateTagFromDom = (node, cfg, dom) ->\n    checkDom dom if ViewNode.CHECK_DOM\n    node.tag  = dom.nodeName.toLowerCase()\n    node.kind = ViewNode.TAG_KIND\n    node.view = dom\n    cfg       = cfg or node.cfg = {}\n    cfg.tag   = node.tag\n    node\n\n\n\n#    00000000   00000000  000   000  0000000    00000000  00000000 \n#    000   000  000       0000  000  000   000  000       000   000\n#    0000000    0000000   000 0 000  000   000  0000000   0000000  \n#    000   000  000       000  0000  000   000  000       000   000\n#    000   000  00000000  000   000  0000000    00000000  000   000\n\nrender = (node, root) ->\n    cfg = node.render()\n    if not node.view\n        createView node, cfg\n\n    root.appendChild(node.view)\n    node.updateNow()\n    node.onMount()\n    null\n\n\n\n\n#    00000000   00000000  00     00   0000000   000   000  00000000\n#    000   000  000       000   000  000   000  000   000  000     \n#    0000000    0000000   000000000  000   000   000 000   0000000 \n#    000   000  000       000 0 000  000   000     000     000     \n#    000   000  00000000  000   000   0000000       0      00000000\n\nremove = (nodeOrRoot) ->\n\n\n\n\n#    000   000  00000000   0000000     0000000   000000000  00000000\n#    000   000  000   000  000   000  000   000     000     000     \n#    000   000  00000000   000   000  000000000     000     0000000 \n#    000   000  000        000   000  000   000     000     000     \n#     0000000   000        0000000    000   000     000     00000000\n\nupdate = (node) ->\n    #console.log 'UPDATE: ', node.__id__\n    id = node?.__id__\n    if not id\n        throw new Error \"Can't update node. ViewNode doesn't exist.\"\n\n    if not dirty\n        window.cancelAnimationFrame rafTimeout\n        rafTimeout = window.requestAnimationFrame updateNow\n\n    dirtyMap[id] = true\n    dirty        = true\n    null\n\n\n\n\n#    000   000  00000000   0000000     0000000   000000000  00000000        000   000   0000000   000   000\n#    000   000  000   000  000   000  000   000     000     000             0000  000  000   000  000 0 000\n#    000   000  00000000   000   000  000000000     000     0000000         000 0 000  000   000  000000000\n#    000   000  000        000   000  000   000     000     000             000  0000  000   000  000   000\n#     0000000   000        0000000    000   000     000     00000000        000   000   0000000   00     00\n\nupdateNow = () ->\n    #console.log 'UPDATE NOW: '\n    window.cancelAnimationFrame rafTimeout\n    dirty    = false\n    cleanMap = {}\n    nodes    = []\n    #TODO: sort by depth to update top down\n    (nodes.push(n) if n = nodeMap[id]) for id of dirtyMap\n    nodes.sort (a, b) -> a.depth - b.depth\n    for node in nodes\n        continue if not node.view or not nodeMap[node.__id__] or cleanMap[node.__id__]\n        cfg = node.render()\n\n        #if node.constructor.name == 'Check'\n        #console.log 'update node now: ', node.constructor.name, node.depth, node.__id__, node.view, cleanMap\n\n        if isNot(node.tag) and isNot(cfg.tag)\n            updateText node, cfg\n        else if not (node.tag == cfg.tag or node.constructor == cfg.tag)\n            replaceChild node, cfg\n        else\n            updateProperties node, cfg\n    dirtyMap = {}\n    null\n\n\n\n\n#    000   000  00000000   0000000     0000000   000000000  00000000        000000000  00000000  000   000  000000000\n#    000   000  000   000  000   000  000   000     000     000                000     000        000 000      000   \n#    000   000  00000000   000   000  000000000     000     0000000            000     0000000     00000       000   \n#    000   000  000        000   000  000   000     000     000                000     000        000 000      000   \n#     0000000   000        0000000    000   000     000     00000000           000     00000000  000   000     000   \n\nupdateText = (node, cfg) ->\n    cleanMap[node.__id__] = true\n    text = if isFunc(cfg.text) then cfg.text() else if isString(cfg) then cfg else cfg.text\n    if node.text != text\n        node.cfg            = cfg\n        node.text           = text\n        node.view.nodeValue = text\n    null\n\n\n\n\n#    000   000  00000000   0000000     0000000   000000000  00000000        00000000   00000000    0000000   00000000    0000000\n#    000   000  000   000  000   000  000   000     000     000             000   000  000   000  000   000  000   000  000     \n#    000   000  00000000   000   000  000000000     000     0000000         00000000   0000000    000   000  00000000   0000000 \n#    000   000  000        000   000  000   000     000     000             000        000   000  000   000  000             000\n#     0000000   000        0000000    000   000     000     00000000        000        000   000   0000000   000        0000000 \n\nupdateProperties = (node, cfg) ->\n    cleanMap[node.__id__] = true\n    #console.log 'UPDATE PROPS: ', node.__id__, node.view\n\n    cfg     = cfg.render() if cfg instanceof ViewNode\n    attrs   = node.attrs or node.attrs = {}\n    propMap = Object.assign {}, attrs, node.events, cfg\n\n    if propMap.hasOwnProperty 'className'\n        updateClass node, cfg.className\n\n    if propMap.hasOwnProperty 'style'\n        updateStyle node, cfg.style\n\n    if propMap.hasOwnProperty 'text'\n        text = text() if isFunc text = cfg.text\n        if isSimple text\n            updateChildren node, [text]\n        else if isDomText text\n            updateChildren node, [text]\n\n        if ViewNode.DEBUG\n            if cfg.hasOwnProperty 'child'\n                console.warn 'child specified while text exists: ', cfg\n            if cfg.hasOwnProperty 'children'\n                console.warn 'children specified while text exists', cfg\n\n    else if propMap.hasOwnProperty 'child'\n        child = child() if isFunc child = cfg.child\n        updateChildren node, [child]\n\n        if ViewNode.DEBUG\n            if cfg.hasOwnProperty 'children'\n                console.warn 'children specified while text exists', cfg\n\n    else if propMap.hasOwnProperty 'children'\n        updateChildren node, cfg.children\n\n    delete propMap.tag\n    delete propMap.clazz\n    delete propMap.__i__\n    delete propMap.keep\n    delete propMap.text\n    delete propMap.child\n    delete propMap.className\n    delete propMap.style\n    delete propMap.children\n    delete propMap.bindings\n\n    for name of propMap\n        attr  = attrs[name]\n        value = cfg[name]\n\n        if isBool(value) or (isNot(value) and isBool(attr))\n            updateBool node, value, name\n        else\n            if /^on/.test name\n                updateEvent node, value, name\n            else\n                value = value() if isFunc value\n                if isBool value\n                    updateBool node, value, name\n                else\n                    updateAttr node, value, name\n    null\n\n\n\n\n\n\n\n\n#     0000000   000000000  000000000  00000000    0000000\n#    000   000     000        000     000   000  000\n#    000000000     000        000     0000000    0000000\n#    000   000     000        000     000   000       000\n#    000   000     000        000     000   000  0000000\n\nupdateAttr = (node, value, name) ->\n    #console.log 'updateAttr: ', name, value, node.attrs[name], node.__id__\n    node.attrs[name] = node.view.getAttribute name\n    return if node.attrs[name] == value\n    view = node.view\n    if value != null and value != undefined\n        view.setAttribute name, value\n        view[name]       = value\n        node.attrs[name] = value\n    else\n        view.removeAttribute name\n        delete view[name]\n        delete node.attrs[name]\n    null\n\n\n\n\n#    0000000     0000000    0000000   000\n#    000   000  000   000  000   000  000\n#    0000000    000   000  000   000  000\n#    000   000  000   000  000   000  000\n#    0000000     0000000    0000000   0000000\n\nupdateBool = (node, value, name) ->\n    node.attrs[name] = node.view[name]\n    return if node.attrs[name] == value\n    view = node.view\n    if isNot value\n        view.removeAttribute name\n        view[name] = false\n        delete node.attrs[name]\n    else if  value == false\n        view.removeAttribute name\n        view[name]       = false\n        node.attrs[name] = false\n    else\n        view.setAttribute name, ''\n        view[name]       = true\n        node.attrs[name] = true\n    null\n\n\n\n\n#     0000000  000       0000000    0000000   0000000\n#    000       000      000   000  000       000\n#    000       000      000000000  0000000   0000000\n#    000       000      000   000       000       000\n#     0000000  0000000  000   000  0000000   0000000\n\nupdateClass = (node, value) ->\n    value = value() if isFunc value\n\n    node.attrs.className = node.view.className\n    return if node.attrs.className == value\n    if value\n        node.view.className  = value\n        node.attrs.className = value\n    else\n        node.view.className  = undefined\n        delete node.attrs.className\n    null\n\n\n\n\n#     0000000  000000000  000   000  000      00000000\n#    000          000      000 000   000      000\n#    0000000      000       00000    000      0000000\n#         000     000        000     000      000\n#    0000000      000        000     0000000  00000000\n\nupdateStyle = (node, style) ->\n    view  = node.view\n    attrs = node.attrs\n    sobj  = attrs.style\n\n    return if not view\n\n    style = style() if isFunc style\n\n    if isNot style\n        view.style.cssText = null\n        delete attrs.style\n\n    else if isString style\n        view.style.cssText = style\n        attrs.style        = style\n    else\n        css     = ''\n        sobj    = if isObject(sobj) then sobj else {}\n        changed = false\n        propMap = Object.assign {}, style, sobj\n        for name of propMap\n            value = style[name]\n            if value != sobj[name]\n                changed = true\n            sobj[name] = value\n            if isNot value\n                delete sobj[name]\n            else\n                prop  = normalizeName name\n                css  += prop + ': ' + value + '; '\n\n        if changed\n            if css.length\n                css                = css.slice 0, -1\n                view.style.cssText = css\n                attrs.style        = sobj\n            else\n                view.style.cssText = null\n                delete attrs.style\n    null\n\n\n\n\n#    00000000  000   000  00000000  000   000  000000000   0000000\n#    000       000   000  000       0000  000     000     000\n#    0000000    000 000   0000000   000 0 000     000     0000000\n#    000          000     000       000  0000     000          000\n#    00000000      0      00000000  000   000     000     0000000\n\nupdateEvent = (node, callback, name) ->\n    events    = node.events or node.events = {}\n    view      = node.view\n    type      = normalizeEvent name\n    listener  = events[name]\n\n    if isString callback\n        callback = node[name]\n\n    if listener != callback\n        if listener\n            view.removeEventListener(type, listener)\n            delete events[name]\n        if callback\n            view.addEventListener(type, callback)\n            events[name] = callback\n    null\n\n\nremoveEvents = (node) ->\n    events = node.events\n    return null if not events\n\n    view = node.view\n    for name, listener of events\n        type = normalizeEvent name\n        view.removeEventListener(type, listener) if listener\n        delete events[name]\n    node.events = null\n    null\n\n\n\n\n#     0000000  000   000  000  000      0000000    00000000   00000000  000   000\n#    000       000   000  000  000      000   000  000   000  000       0000  000\n#    000       000000000  000  000      000   000  0000000    0000000   000 0 000\n#    000       000   000  000  000      000   000  000   000  000       000  0000\n#     0000000  000   000  000  0000000  0000000    000   000  00000000  000   000\n\nupdateChildren = (node, cfgs) ->\n    #TODO: allow object as only child\n    children = node.children or node.children = []\n    cfgs     = cfgs() if isFunc cfgs\n    cfgs     = if isString(cfgs) then [cfgs] else cfgs or []\n    l        = if children.length > cfgs.length then children.length else cfgs.length\n    for i in [0...l]\n        child = children[i]\n        cfg   = cfgs[i]\n        cfg   = cfg() if isFunc cfg\n\n        if not child and not cfg\n            throw new Error \"DOM ERROR: either child or cfg at index #{i} must be defined. Got \" + child + ', ' + cfg\n        if not child\n            addChild node, cfg\n        else if not cfg\n            removeChild child\n        else\n            change child, cfg\n    children.length = cfgs.length\n    null\n\n\n\n\n#     0000000  000   000   0000000   000   000   0000000   00000000\n#    000       000   000  000   000  0000  000  000        000\n#    000       000000000  000000000  000 0 000  000  0000  0000000\n#    000       000   000  000   000  000  0000  000   000  000\n#     0000000  000   000  000   000  000   000   0000000   00000000\n\nchange = (node, cfg) ->\n\n    needsUpdate = node.updateCfg cfg\n    if node == cfg or node.constructor == cfg.tag\n        updateProperties node, node.render() if needsUpdate\n\n    else if node.tag != cfg.tag or cfg instanceof ViewNode\n        replaceChild node, cfg\n\n    else if isNot node.tag        # text node\n        updateText node, cfg\n\n    else if needsUpdate           # tag node\n        updateProperties node, cfg\n\n    false\n\n\n\n\n#     0000000   0000000    0000000\n#    000   000  000   000  000   000\n#    000000000  000   000  000   000\n#    000   000  000   000  000   000\n#    000   000  0000000    0000000\n\naddChild = (node, cfg) ->\n    if cfg instanceof ViewNode\n        child = cfg\n    else\n        cfg.__i__ = node.__i__ if not cfg.__i__\n        child = create cfg\n\n    node.children.push child\n    node.view.appendChild child.view\n    child.parent = node\n    child.depth  = node.depth + 1\n    child.onMount()\n    null\n\n\n\n\n#    00000000   00000000  00     00   0000000   000   000  00000000\n#    000   000  000       000   000  000   000  000   000  000\n#    0000000    0000000   000000000  000   000   000 000   0000000\n#    000   000  000       000 0 000  000   000     000     000\n#    000   000  00000000  000   000   0000000       0      00000000\n\nremoveChild = (child) ->\n    #TODO: node.children currently not handled -> handled by changing node.children.length in updateChildren\n\n    #console.log 'removeChild: ', child, node\n\n    node = child.parent\n    view = child.view\n    disposeNode child\n    node.view.removeChild view\n    null\n\n\n\n\n#    00000000   00000000  00000000   000       0000000    0000000  00000000\n#    000   000  000       000   000  000      000   000  000       000\n#    0000000    0000000   00000000   000      000000000  000       0000000\n#    000   000  000       000        000      000   000  000       000\n#    000   000  00000000  000        0000000  000   000   0000000  00000000\n\nreplaceChild = (child, cfg) ->\n    node     = child.parent\n    children = node.children\n    i        = children.indexOf child\n    view     = child.view\n\n    disposeNode child\n\n    if cfg instanceof ViewNode\n        child = cfg\n        cfg   = child.render()\n    else\n        cfg.__i__ = node.__i__ if not cfg.__i__\n        child = create cfg\n\n    children[i]  = child\n    child.parent = node\n    child.depth  = node.depth + 1\n    node.view.replaceChild child.view, view\n\n    if isSimple(cfg) or (not cfg.tag and (isSimple(cfg.text) or isFunc(cfg.text)))\n        updateText child, cfg\n    else\n        updateProperties child, cfg\n\n    child.onMount()\n    #console.log 'DOM.replaceChild: create = ', child, cfg\n    null\n\n\n\n\n#    0000000    000   0000000  00000000    0000000    0000000  00000000\n#    000   000  000  000       000   000  000   000  000       000\n#    000   000  000  0000000   00000000   000   000  0000000   0000000\n#    000   000  000       000  000        000   000       000  000\n#    0000000    000  0000000   000         0000000   0000000   00000000\n\ndisposeNode = (node) ->\n    #console.log 'disposeNode: ', node\n    if node.onUnmount() != true\n\n        #console.log 'dispose node now: ', node\n        removeEvents node\n\n        if node.children and node.children.length\n            disposeNode child for child in node.children\n\n        delete node.children\n        delete node.view\n        delete nodeMap[node.__id__]\n\n    node.parent = null\n    node.depth  = undefined\n    null\n\n\n\n\ncheckDom = (dom) ->\n    if domList.indexOf(dom) > -1\n        throw new Error 'Dom element already controlled by another node.'\n\n\nappend = (node, dom) ->\n    checkDom dom if ViewNode.CHECK_DOM\n    dom.appendChild node.view\n\n\n\nbehind = (node, dom) ->\n    parent = dom.parentNode\n    next   = dom.nextSibling\n    checkDom parent if ViewNode.CHECK_DOM\n    if next\n        parent.insertBefore node.view, next\n    else\n        parent.appendChild node.view\n\n\nbefore = (node, dom) ->\n    parent = dom.parentNode\n    checkDom parent if ViewNode.CHECK_DOM\n    parent.insertBefore node.view, dom\n\n\nreplace = (node, dom) ->\n    parent = dom.parentNode\n    if ViewNode.CHECK_DOM\n        checkDom parent\n        checkDom dom\n    parent.replaceChild node.view, dom\n\n\nremove = (node) ->\n    parent = node.view.parentNode\n    checkDom parent if ViewNode.CHECK_DOM\n    parent.removeChild node.view\n\n\n\n\n\n\n\n\n#    00000000    0000000   00000000\n#    000   000  000   000  000\n#    0000000    000000000  000000\n#    000   000  000   000  000\n#    000   000  000   000  000\n\nif typeof window != 'undefined'\n    lastTime = 0\n    vendors  = ['webkit', 'moz']\n    for vendor in vendors\n        break if window.requestAnimationFrame\n        window.requestAnimationFrame = window[vendor + 'RequestAnimationFrame']\n        window.cancelAnimationFrame  = window[vendor + 'CancelAnimationFrame' ] or window[vendor + 'CancelRequestAnimationFrame']\n\n\n    if not window.requestAnimationFrame\n        window.requestAnimationFrame = (callback) ->\n            currTime   = Date.now()\n            timeToCall = Math.max 0, 16 - currTime + lastTime\n            rAF        = () -> callback currTime + timeToCall\n            id         = window.setTimeout rAF, timeToCall\n            lastTime   = currTime + timeToCall\n            id\n\n\n    if not window.cancelAnimationFrame\n        window.cancelAnimationFrame = (id) ->\n            clearTimeout id\n            null\n\n\n\n\n#     0000000    0000000   0000000  000   0000000   000   000\n#    000   000  000       000       000  000        0000  000\n#    000000000  0000000   0000000   000  000  0000  000 0 000\n#    000   000       000       000  000  000   000  000  0000\n#    000   000  0000000   0000000   000   0000000   000   000\n\nif typeof Object.assign == 'undefined'\n    Object.assign = (target, args...) ->\n        for src in args\n            for key of src\n                target[key] = src[key];\n        target\n\n\n\n\nViewNode.create      = create\nViewNode.map         = map\nViewNode.unmap       = unmap\n\nViewNode.append      = append\nViewNode.behind      = behind\nViewNode.before      = before\nViewNode.replace     = replace\nViewNode.remove      = remove\n\nViewNode.getOrCall   = getOrCall\nViewNode.isBool      = isBool\nViewNode.isNumber    = isNumber\nViewNode.isString    = isString\nViewNode.isObject    = isObject\nViewNode.isFunc      = isFunc\nViewNode.isDom       = isDom\nViewNode.isDomText   = isDomText\nViewNode.isNot       = isNot\nViewNode.isSimple    = isSimple\nViewNode.extendsNode = extendsNode\n\n\n\n\n\n\nif typeof module != 'undefined'\n    module.exports = ViewNode\nif typeof window != 'undefined'\n    window.ViewNode = ViewNode\nelse\n    this.ViewNode = ViewNode"]}},{"offset":{"line":1636,"column":0},"map":{"version":3,"file":"../../../../src/js/comp-node.js","sourceRoot":"","sources":["../../../../../../../../../../src/coffee/comp-node.coffee"],"names":[],"mappings":";AAAA;AAAA,MAAA,kBAAA;IAAA;;;EAAA,QAAA,GAAW,OAAA,CAAQ,aAAR;;EAGL;;;IAGW,kBAAC,GAAD;MACT,0CAAM,GAAN;IADS;;uBAIb,QAAA,GAAU,SAAC,GAAD;AACN,UAAA;MAAA,uCAAM,GAAN;MAEA,IAAC,CAAA,KAAD,GAAS;MACT,IAAG,OAAO,GAAP,KAAc,QAAjB;QACI,IAAwC,CAAI,IAAC,CAAA,IAA7C;AAAA,gBAAM,IAAI,KAAJ,CAAU,oBAAV,EAAN;;QAEA,IAAG,QAAA,GAAW,GAAG,CAAC,QAAlB;AACI,eAAA,0CAAA;;YACI,IAAG,KAAK,CAAC,OAAN,CAAc,OAAd,CAAH;cACI,IAAC,CAAA,IAAD,CAAM,OAAQ,CAAA,CAAA,CAAd,EAAkB,OAAQ,CAAA,CAAA,CAA1B,EADJ;aAAA,MAAA;cAGI,IAAC,CAAA,IAAD,CAAM,OAAN,EAHJ;;AADJ,WADJ;SAHJ;;aASA,IAAC,CAAA;IAbK;;uBAgBV,SAAA,GAAW,SAAA;MACP,IAAC,CAAA,SAAD,CAAA;aACA,sCAAA;IAFO;;uBAKX,IAAA,GAAM,SAAC,GAAD,EAAM,IAAN,EAAY,QAAZ;aACF,IAAC,CAAA,KAAK,CAAC,IAAP,CAAY,IAAC,CAAA,IAAI,CAAC,IAAN,CAAW,GAAX,EAAgB,IAAhB,EAAsB,QAAA,IAAY,IAAC,CAAA,MAAnC,CAAZ;IADE;;uBAIN,MAAA,GAAQ,SAAC,KAAD;AACJ,UAAA;MAAA,KAAA,GAAQ,IAAC,CAAA,KAAK,CAAC,OAAP,CAAe,KAAf;MACR,IAAG,KAAA,KAAS,CAAC,CAAb;QACI,OAAO,CAAC,KAAR,CAAc,wCAAd,EAAwD,KAAxD;AACA,cAAM,IAAI,KAAJ,CAAU,+BAAV,EAFV;;MAGA,IAAC,CAAA,KAAK,CAAC,MAAP,CAAc,KAAd,EAAqB,CAArB;aACA,IAAC,CAAA,IAAI,CAAC,MAAN,CAAa,KAAb;IANI;;uBASR,SAAA,GAAW,SAAA;AACP,UAAA;MAAA,UAAA,GAAc;AACd;AAAA,WAAA,qCAAA;;QAAC,UAAA,GAAa,UAAA,IAAc,IAAC,CAAA,IAAI,CAAC,MAAN,CAAa,KAAb;AAA5B;MACA,IAAC,CAAA,KAAD,GAAc;aACd;IAJO;;;;KAzCQ;;EAkDvB,MAAM,CAAC,OAAP,GAAiB;AArDjB","sourcesContent":["ViewNode = require './view-node'\n\n\nclass CompNode extends ViewNode\n\n\n    constructor: (cfg) ->\n        super(cfg)\n\n\n    register: (cfg) ->\n        super(cfg)\n\n        @paths = []\n        if typeof cfg == 'object'\n            throw new Error \"Tree not injected.\" if not @tree\n\n            if bindings = cfg.bindings\n                for binding in bindings\n                    if Array.isArray binding\n                        @bind binding[0], binding[1]\n                    else\n                        @bind binding\n        @__id__\n\n\n    onUnmount: () ->\n        @unbindAll()\n        super()\n\n\n    bind: (obj, name, callback) ->\n        @paths.push @tree.bind(obj, name, callback or @update)\n\n\n    unbind: (paths) ->\n        index = @paths.indexOf paths\n        if index == -1\n            console.error 'Paths not bound by this comp. paths = ', paths\n            throw new Error 'Paths not bound by this comp.'\n        @paths.splice index, 1\n        @tree.unbind paths\n\n\n    unbindAll: () ->\n        allUnbound  = true\n        (allUnbound = allUnbound && @tree.unbind paths) for paths in @paths\n        @paths      = []\n        allUnbound\n\n\n\n\nmodule.exports = CompNode"]}}]}