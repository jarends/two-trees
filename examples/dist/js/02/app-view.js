// Generated by CoffeeScript 1.12.6
(function() {
  var AppView, CompNode, FilterButton, InputView, TaskView,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  CompNode = require('../two-trees').CompNode;

  InputView = (function(superClass) {
    extend(InputView, superClass);

    function InputView() {
      return InputView.__super__.constructor.apply(this, arguments);
    }

    InputView.prototype.render = function() {
      return {
        tag: 'p',
        children: [
          {
            tag: 'input',
            type: 'text',
            placeholder: 'What needs to be done?',
            onKeyup: (function(_this) {
              return function(e) {
                var v;
                if (e.keyCode === 13 && (v = e.target.value)) {
                  e.target.value = '';
                  return _this.cfg.addTask(v);
                }
              };
            })(this)
          }, {
            tag: 'input',
            type: 'checkbox',
            style: (function(_this) {
              return function() {
                return "display: " + (_this.tree.root.numTotal > 0 ? 'inline-block' : 'none') + ";";
              };
            })(this),
            checked: (function(_this) {
              return function() {
                return _this.tree.root.numDone === _this.tree.root.numTotal && _this.tree.root.numTotal > 0;
              };
            })(this),
            onChange: (function(_this) {
              return function(e) {
                return _this.cfg.allDone(e.target.checked);
              };
            })(this),
            bindings: [[this.tree.root, 'numDone'], [this.tree.root, 'numTotal']]
          }
        ]
      };
    };

    return InputView;

  })(CompNode);

  TaskView = (function(superClass) {
    extend(TaskView, superClass);

    function TaskView() {
      return TaskView.__super__.constructor.apply(this, arguments);
    }

    TaskView.prototype.render = function() {
      return {
        tag: 'li',
        children: [
          {
            tag: 'input',
            type: 'checkbox',
            checked: (function(_this) {
              return function() {
                return _this.cfg.task.done;
              };
            })(this),
            onChange: (function(_this) {
              return function(e) {
                return _this.cfg.taskDone(e.target.checked || false, _this.cfg.index);
              };
            })(this),
            bindings: [[this.cfg.task, 'done']]
          }, {
            tag: 'input',
            type: 'text',
            tabIndex: 0,
            readonly: !this.editable,
            value: (function(_this) {
              return function() {
                return _this.cfg.task.text;
              };
            })(this),
            onDblclick: (function(_this) {
              return function() {
                _this.editable = true;
                return _this.update();
              };
            })(this),
            onChange: (function(_this) {
              return function(e) {
                _this.cfg.task.text = e.target.value;
                _this.editable = false;
                _this.tree.update(_this.cfg.task);
                return _this.update();
              };
            })(this),
            onBlur: (function(_this) {
              return function() {
                if (_this.editable) {
                  _this.editable = false;
                  return _this.update();
                }
              };
            })(this),
            bindings: [[this.cfg.task, 'text']]
          }, {
            tag: 'button',
            children: 'x',
            onClick: (function(_this) {
              return function() {
                return _this.cfg.removeTask(_this.cfg.index);
              };
            })(this)
          }
        ]
      };
    };

    return TaskView;

  })(CompNode);

  FilterButton = (function(superClass) {
    extend(FilterButton, superClass);

    function FilterButton(cfg) {
      FilterButton.__super__.constructor.call(this, cfg);
      this.bind(this.cfg.data, 'filter');
    }

    FilterButton.prototype.render = function() {
      return {
        tag: 'button',
        className: (function(_this) {
          return function() {
            if (_this.cfg.data.filter === _this.cfg.name) {
              return 'active';
            } else {
              return null;
            }
          };
        })(this),
        children: this.cfg.name,
        onClick: (function(_this) {
          return function() {
            return _this.cfg.setFilter(_this.cfg.name);
          };
        })(this)
      };
    };

    return FilterButton;

  })(CompNode);

  AppView = (function(superClass) {
    extend(AppView, superClass);

    function AppView(cfg) {
      this.clearCompleted = bind(this.clearCompleted, this);
      this.removeTask = bind(this.removeTask, this);
      this.setFilter = bind(this.setFilter, this);
      this.taskDone = bind(this.taskDone, this);
      this.allDone = bind(this.allDone, this);
      this.addTask = bind(this.addTask, this);
      AppView.__super__.constructor.call(this, cfg);
    }

    AppView.prototype.updateCfg = function(cfg) {
      return this.data = this.tree.root;
    };

    AppView.prototype.addTask = function(text) {
      this.data.numTotal = this.data.tasks.push({
        text: text || 'task',
        done: false
      });
      return this.tree.update();
    };

    AppView.prototype.allDone = function(select) {
      var j, len, ref, t;
      ref = this.data.tasks;
      for (j = 0, len = ref.length; j < len; j++) {
        t = ref[j];
        t.done = select;
      }
      this.data.numDone = select ? this.data.tasks.length : 0;
      return this.tree.update();
    };

    AppView.prototype.taskDone = function(select, index) {
      this.data.tasks[index].done = select;
      if (select) {
        ++this.data.numDone;
      } else {
        --this.data.numDone;
      }
      return this.tree.update();
    };

    AppView.prototype.setFilter = function(name) {
      this.data.filter = name;
      return this.tree.update();
    };

    AppView.prototype.removeTask = function(index) {
      --this.data.numTotal;
      if (this.data.tasks[index].done) {
        --this.data.numDone;
      }
      this.data.tasks.splice(index, 1);
      return this.tree.update();
    };

    AppView.prototype.clearCompleted = function() {
      var index, j, len, t, tasks;
      tasks = this.data.tasks.slice();
      index = 0;
      for (j = 0, len = tasks.length; j < len; j++) {
        t = tasks[j];
        if (t.done) {
          this.data.tasks.splice(index, 1);
        } else {
          ++index;
        }
      }
      this.data.numTotal = index;
      this.data.numDone = 0;
      return this.tree.update();
    };

    AppView.prototype.render = function() {
      return {
        tag: 'div',
        style: 'padding: 20px;',
        children: [
          {
            tag: 'h1',
            children: 'todo ' + (this.data.tasks.length || '')
          }, {
            tag: 'button',
            children: 'undo',
            onClick: (function(_this) {
              return function() {
                return _this.tree.undo();
              };
            })(this)
          }, {
            tag: 'button',
            children: 'redo',
            onClick: (function(_this) {
              return function() {
                return _this.tree.redo();
              };
            })(this)
          }, {
            tag: InputView,
            addTask: this.addTask,
            allDone: this.allDone
          }, {
            tag: 'ol',
            bindings: [[this.data, 'filter'], [this.data, 'numDone'], [this.data, 'numTotal'], [this.data.tasks, '*']],
            children: (function(_this) {
              return function() {
                var f, i, j, len, ref, results, t;
                f = _this.data.filter;
                ref = _this.data.tasks;
                results = [];
                for (i = j = 0, len = ref.length; j < len; i = ++j) {
                  t = ref[i];
                  if (f === 'all' || (t.done && f === 'done') || (!t.done && f === 'undone')) {
                    results.push({
                      tag: TaskView,
                      task: t,
                      index: i,
                      taskDone: _this.taskDone,
                      removeTask: _this.removeTask
                    });
                  }
                }
                return results;
              };
            })(this)
          }, {
            tag: 'p',
            child: {
              text: (function(_this) {
                return function() {
                  return (_this.data.numTotal - _this.data.numDone) + ' items left';
                };
              })(this),
              bindings: [[this.data, 'numDone'], [this.data, 'numTotal']]
            }
          }, {
            tag: 'p',
            children: [
              'show: ', {
                tag: FilterButton,
                data: this.data,
                setFilter: this.setFilter,
                name: 'all'
              }, {
                tag: FilterButton,
                data: this.data,
                setFilter: this.setFilter,
                name: 'done'
              }, {
                tag: FilterButton,
                data: this.data,
                setFilter: this.setFilter,
                name: 'undone'
              }
            ]
          }, {
            tag: 'button',
            style: (function(_this) {
              return function() {
                return "display: " + (_this.tree.root.numDone > 0 ? 'inline-block' : 'none') + ";";
              };
            })(this),
            text: 'clear completed',
            onClick: (function(_this) {
              return function() {
                return _this.clearCompleted();
              };
            })(this),
            bindings: [[this.data, 'numDone']]
          }
        ]
      };
    };

    return AppView;

  })(CompNode);

  module.exports = AppView;

}).call(this);

//# sourceMappingURL=app-view.js.map
